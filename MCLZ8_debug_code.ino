//
//
//  File Name   :  MCLZ8.c
//  Used on     :  
//  Author      :  Ted Fried, MicroCore Labs
//  Creation    :  4/20/2022
//
//   Description:
//   ============
//   
//  Zilog Z80 emulator running on a Teensy 4.1.
//
//------------------------------------------------------------------------
//
// Modification History:
// =====================
//
// Revision 1 4/20/2022
// Initial revision
//
// Revision 2 1/28/2023
// Updated to only use M1 cycles for opcode fetches and not for subsequent bytes.
// Also fixed M1 signal which never was asserted low.
//
// Revision 2 1/28/2023
// Updated decode_table_0xCB to fetch_byte rather than fetch_opcode so R does not increase
//
//------------------------------------------------------------------------
//
// Copyright (c) 2022 Ted Fried
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//------------------------------------------------------------------------
                                                  


#include <stdint.h>

                                                    
// Need for Command-line Code
#include <stdio.h>

// C++17 removed the register keyword, so we define it to nothing so that
// it doesn't cause errors.
#if __cplusplus >= 201703L
#define register
#endif



// Teensy 4.1 pin assignments
//
#define PIN_RESET           23 // In-Buffer    1/8       
#define PIN_CLK             21 // In-Buffer    2/8        
#define PIN_NMI             19 // In-Buffer    3/8   
#define PIN_INTR            20 // In-Buffer    4/8
#define PIN_WAIT            22 // In-Buffer    5/8        
         
#define PIN_M1              12 // Out-direct        
#define PIN_HALT            24 // Out-direct         
#define PIN_RD              25 // Out-direct         
#define PIN_WR              26 // Out-direct                                                     
#define PIN_MREQ            27 // Out-direct                                                     
#define PIN_IOREQ           28 // Out-direct        
#define PIN_RFSH            29 // Out-direct 


#define PIN_ADDR15          30 // Out-direct     
#define PIN_ADDR14          31 // Out-direct     
#define PIN_ADDR13          32 // Out-direct     
#define PIN_ADDR12          33 // Out-direct     
#define PIN_ADDR11          34 // Out-direct     
#define PIN_ADDR10          35 // Out-direct     
#define PIN_ADDR9           36 // Out-direct     
#define PIN_ADDR8           37 // Out-direct     
                                                   
#define PIN_AD7_OUT         10 // Out-Buffer        
#define PIN_AD6_OUT          9 // Out-Buffer        
#define PIN_AD5_OUT          8 // Out-Buffer        
#define PIN_AD4_OUT          7 // Out-Buffer        
#define PIN_AD3_OUT          6 // Out-Buffer        
#define PIN_AD2_OUT          5 // Out-Buffer        
#define PIN_AD1_OUT          4 // Out-Buffer        
#define PIN_AD0_OUT          3 // Out-Buffer        
#define PIN_DATA_OE_n        2 // Out-Buffer         
#define PIN_ADDR_LATCH_n    11 // Out-direct     
                                                   
#define PIN_AD7_IN          39 // In-Buffer        
#define PIN_AD6_IN          40 // In-Buffer        
#define PIN_AD5_IN          41 // In-Buffer        
#define PIN_AD4_IN          14 // In-Buffer        
#define PIN_AD3_IN          15 // In-Buffer        
#define PIN_AD2_IN          16 // In-Buffer        
#define PIN_AD1_IN          17 // In-Buffer        
#define PIN_AD0_IN          18 // In-Buffer     
   

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

#define OPCODE_READ_M1             0x07   
#define MEM_WRITE_BYTE             0x02    
#define MEM_READ_BYTE              0x03    
#define IO_WRITE_BYTE              0x04    
#define IO_READ_BYTE               0x05    
#define INTERRUPT_ACK              0x09


#define flag_s (  (register_f & 0x80)==0 ? 0 : 1  )
#define flag_z (  (register_f & 0x40)==0 ? 0 : 1  )
#define flag_h (  (register_f & 0x10)==0 ? 0 : 1  )
#define flag_p (  (register_f & 0x04)==0 ? 0 : 1  )
#define flag_n (  (register_f & 0x02)==0 ? 0 : 1  )
#define flag_c (  (register_f & 0x01)==0 ? 0 : 1  )

#define flag_s2 (  (register_f2 & 0x80)==0 ? 0 : 1  )
#define flag_z2 (  (register_f2 & 0x40)==0 ? 0 : 1  )
#define flag_h2 (  (register_f2 & 0x10)==0 ? 0 : 1  )
#define flag_p2 (  (register_f2 & 0x04)==0 ? 0 : 1  )
#define flag_n2 (  (register_f2 & 0x02)==0 ? 0 : 1  )
#define flag_c2 (  (register_f2 & 0x01)==0 ? 0 : 1  )


#define REGISTER_BC  ( (register_b<<8)   | register_c )
#define REGISTER_DE  ( (register_d<<8)   | register_e )
#define REGISTER_HL  ( (register_h<<8)   | register_l )
#define REGISTER_AF  ( (register_a<<8)   | register_f )
#define REGISTER_IX  ( (register_ixh<<8) | register_ixl )
#define REGISTER_IY  ( (register_iyh<<8) | register_iyl )

#define REG_BC 1
#define REG_DE 2
#define REG_HL 3
#define REG_AF 4
#define REG_IX 5
#define REG_IY 6

  
// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------
 

uint8_t  clock_counter=0;
uint8_t  pause_interrupts=0;
uint8_t  temp8=0;
uint8_t  opcode_byte=0;
uint8_t  opcode_second_byte=0;
uint8_t  debounce_refresh=0;
uint8_t  last_instruction_set_a_prefix=0;
uint8_t  and_opcode=0;
uint8_t  prefix_dd=0;
uint8_t  prefix_fd=0;   
uint8_t  prefix_cb=0;   
uint8_t  inc_dec=0;
uint8_t  with_carry=0;
uint8_t  CB_opcode=0;
uint8_t  cp_opcode=0;
uint8_t  halt_in_progress=0;
uint8_t  assert_iack_type0=0;
uint8_t  cb_prefix_offset=0;
uint8_t  register_a    = 0;         
uint8_t  register_b    = 0;
uint8_t  register_c    = 0;
uint8_t  register_d    = 0;
uint8_t  register_e    = 0;
uint8_t  register_f    = 0;                                     
uint8_t  register_h    = 0;
uint8_t  register_l    = 0;
uint8_t  register_a2   = 0;                                      
uint8_t  register_b2   = 0;
uint8_t  register_c2   = 0;
uint8_t  register_d2   = 0;
uint8_t  register_e2   = 0;
uint8_t  register_f2   = 0;                                     
uint8_t  register_h2   = 0;
uint8_t  register_l2   = 0;
uint8_t  register_iff1 = 0;
uint8_t  register_iff2 = 0;
uint8_t  register_im   = 0;
uint8_t  register_i    = 0;
uint8_t  register_r    = 0;
uint8_t  register_ixh  = 0;
uint8_t  register_ixl  = 0;
uint8_t  register_iyh  = 0;
uint8_t  register_iyl  = 0;
uint8_t  special  = 0;
uint8_t  nmi_latched = 0;
uint8_t  mode = 0;
uint8_t  run = 1;
int      incomingByte;   


uint16_t register_sp   = 0;                   
uint16_t register_pc   = 0;                   
uint16_t temp16=0;

uint32_t direct_nmi=0; 
uint32_t direct_nmi_d=0; 
uint32_t direct_wait=0; 
uint32_t direct_intr=0; 
uint32_t direct_reset=0; 
uint32_t GPIO6_raw_data=0;

// Internal RAM for acceleration
uint8_t   internal_RAM[65536];

// maximum line length
const unsigned int LINE_LENGTH = 80;

// string buffer
char strBuf[LINE_LENGTH];

// breakpoint address

uint16_t breakpoint1;
uint8_t  bp1_enable = 0;
uint8_t  bp1_count = 0;
uint16_t breakpoint2;
uint8_t  bp2_enable = 0;
uint8_t  bp2_count = 0;
uint16_t breakpoint3;
uint8_t  bp3_enable = 0;
uint8_t  bp3_count = 0;
uint16_t stepbreak = 0;
uint8_t stepenable = 0;

// address for display

uint16_t display_address = 0;

// counter to allow for slow speed execution

int slow_counter = 0;
int slow_counter_set = 0;
  
// Arrays which hold the Z80 clock cycles for each opcode
uint8_t Opcode_Timing_Main[0x100] = {0x00,0x06,0x03,0x02,0x00,0x00,0x03,0x00,0x00,0x07,0x03,0x02,0x00,0x00,0x03,0x00,
                                     0x04,0x06,0x03,0x02,0x00,0x00,0x03,0x00,0x08,0x07,0x03,0x02,0x00,0x00,0x03,0x00,
                                     0x03,0x06,0x0c,0x02,0x00,0x00,0x03,0x00,0x03,0x07,0x0c,0x02,0x00,0x00,0x03,0x00,
                                     0x03,0x06,0x09,0x02,0x07,0x07,0x06,0x00,0x03,0x07,0x09,0x02,0x00,0x00,0x03,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                                     0x03,0x03,0x03,0x03,0x03,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                                     0x01,0x06,0x06,0x06,0x06,0x07,0x03,0x07,0x01,0x06,0x06,0x00,0x06,0x0d,0x03,0x07,
                                     0x01,0x06,0x06,0x07,0x06,0x07,0x03,0x07,0x01,0x00,0x06,0x07,0x06,0x00,0x03,0x07,
                                     0x01,0x06,0x06,0x0f,0x06,0x07,0x03,0x07,0x01,0x00,0x06,0x00,0x06,0x00,0x03,0x07,
                                     0x01,0x06,0x06,0x00,0x06,0x07,0x03,0x07,0x01,0x02,0x06,0x00,0x06,0x00,0x03,0x07 };

// Original ED timing table didn't account for the four T-states pulling the original ED, so was slow by 4 states.
uint8_t Opcode_Timing_ED[0x100]   = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x07,0x0c,0x00,0x06,0x00,0x01,0x04,0x04,0x07,0x0c,0x00,0x06,0x00,0x01,0x04,0x04,0x07,0x0c,0x00,0x06,0x00,0x01,0x04,0x04,0x07,0x0c,0x00,0x06,0x00,0x01,0x04,0x04,0x07,0x0c,0x00,0x06,0x00,0x0a,0x04,0x04,0x07,0x0c,0x00,0x06,0x00,0x0a,0x04,0x04,0x07,0x0c,0x00,0x06,0x00,0x00,0x04,0x04,0x0b,0x0c,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

uint8_t Opcode_Timing_DDFD[0x100] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x10,0x06,0x04,0x04,0x07,0x00,0x00,0x0b,0x10,0x06,0x04,0x04,0x07,0x00,0x00,0x00,0x00,0x00,0x13,0x13,0x0f,0x00,0x00,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x0f,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x0f,0x04,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x00,0x0f,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x13,0x00,0x0b,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00 };
    
// Pre-calculated 8-bit parity
uint8_t Parity_Array[0x100]       = {0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04 };


// Teensy 4.1 GPIO register mapping for address and data busses
uint32_t gpio7_low_array[0x100]   = {0x00000,0x00000,0x00000,0x00000,0x00000,0x00000,0x00000,0x00000,0x00400,0x00400,0x00400,0x00400,0x00400,0x00400,0x00400,0x00400,0x20000,0x20000,0x20000,0x20000,0x20000,0x20000,0x20000,0x20000,0x20400,0x20400,0x20400,0x20400,0x20400,0x20400,0x20400,0x20400,0x10000,0x10000,0x10000,0x10000,0x10000,0x10000,0x10000,0x10000,0x10400,0x10400,0x10400,0x10400,0x10400,0x10400,0x10400,0x10400,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30400,0x30400,0x30400,0x30400,0x30400,0x30400,0x30400,0x30400,0x00800,0x00800,0x00800,0x00800,0x00800,0x00800,0x00800,0x00800,0x00c00,0x00c00,0x00c00,0x00c00,0x00c00,0x00c00,0x00c00,0x00c00,0x20800,0x20800,0x20800,0x20800,0x20800,0x20800,0x20800,0x20800,0x20c00,0x20c00,0x20c00,0x20c00,0x20c00,0x20c00,0x20c00,0x20c00,0x10800,0x10800,0x10800,0x10800,0x10800,0x10800,0x10800,0x10800,0x10c00,0x10c00,0x10c00,0x10c00,0x10c00,0x10c00,0x10c00,0x10c00,0x30800,0x30800,0x30800,0x30800,0x30800,0x30800,0x30800,0x30800,0x30c00,0x30c00,0x30c00,0x30c00,0x30c00,0x30c00,0x30c00,0x30c00,0x00001,0x00001,0x00001,0x00001,0x00001,0x00001,0x00001,0x00001,0x00401,0x00401,0x00401,0x00401,0x00401,0x00401,0x00401,0x00401,0x20001,0x20001,0x20001,0x20001,0x20001,0x20001,0x20001,0x20001,0x20401,0x20401,0x20401,0x20401,0x20401,0x20401,0x20401,0x20401,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10001,0x10401,0x10401,0x10401,0x10401,0x10401,0x10401,0x10401,0x10401,0x30001,0x30001,0x30001,0x30001,0x30001,0x30001,0x30001,0x30001,0x30401,0x30401,0x30401,0x30401,0x30401,0x30401,0x30401,0x30401,0x00801,0x00801,0x00801,0x00801,0x00801,0x00801,0x00801,0x00801,0x00c01,0x00c01,0x00c01,0x00c01,0x00c01,0x00c01,0x00c01,0x00c01,0x20801,0x20801,0x20801,0x20801,0x20801,0x20801,0x20801,0x20801,0x20c01,0x20c01,0x20c01,0x20c01,0x20c01,0x20c01,0x20c01,0x20c01,0x10801,0x10801,0x10801,0x10801,0x10801,0x10801,0x10801,0x10801,0x10c01,0x10c01,0x10c01,0x10c01,0x10c01,0x10c01,0x10c01,0x10c01,0x30801,0x30801,0x30801,0x30801,0x30801,0x30801,0x30801,0x30801,0x30c01,0x30c01,0x30c01,0x30c01,0x30c01,0x30c01,0x30c01,0x30c01 };

uint32_t gpio9_low_array[0x100]   = {0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160,0x000,0x020,0x040,0x060,0x100,0x120,0x140,0x160 };

uint32_t gpio7_high_array[0x100] = {0x00000000,0x00080000,0x00040000,0x000c0000,0x10000000,0x10080000,0x10040000,0x100c0000,0x20000000,0x20080000,0x20040000,0x200c0000,0x30000000,0x30080000,0x30040000,0x300c0000,0x00000000,0x00080000,0x00040000,0x000c0000,0x10000000,0x10080000,0x10040000,0x100c0000,0x20000000,0x20080000,0x20040000,0x200c0000,0x30000000,0x30080000,0x30040000,0x300c0000,
                                    0x00001000,0x00081000,0x00041000,0x000c1000,0x10001000,0x10081000,0x10041000,0x100c1000,0x20001000,0x20081000,0x20041000,0x200c1000,0x30001000,0x30081000,0x30041000,0x300c1000,0x00001000,0x00081000,0x00041000,0x000c1000,0x10001000,0x10081000,0x10041000,0x100c1000,0x20001000,0x20081000,0x20041000,0x200c1000,0x30001000,0x30081000,0x30041000,0x300c1000,
                                    0x00000000,0x00080000,0x00040000,0x000c0000,0x10000000,0x10080000,0x10040000,0x100c0000,0x20000000,0x20080000,0x20040000,0x200c0000,0x30000000,0x30080000,0x30040000,0x300c0000,0x00000000,0x00080000,0x00040000,0x000c0000,0x10000000,0x10080000,0x10040000,0x100c0000,0x20000000,0x20080000,0x20040000,0x200c0000,0x30000000,0x30080000,0x30040000,0x300c0000,
                                    0x00001000,0x00081000,0x00041000,0x000c1000,0x10001000,0x10081000,0x10041000,0x100c1000,0x20001000,0x20081000,0x20041000,0x200c1000,0x30001000,0x30081000,0x30041000,0x300c1000,0x00001000,0x00081000,0x00041000,0x000c1000,0x10001000,0x10081000,0x10041000,0x100c1000,0x20001000,0x20081000,0x20041000,0x200c1000,0x30001000,0x30081000,0x30041000,0x300c1000,
                                    0x00000000,0x00080000,0x00040000,0x000c0000,0x10000000,0x10080000,0x10040000,0x100c0000,0x20000000,0x20080000,0x20040000,0x200c0000,0x30000000,0x30080000,0x30040000,0x300c0000,0x00000000,0x00080000,0x00040000,0x000c0000,0x10000000,0x10080000,0x10040000,0x100c0000,0x20000000,0x20080000,0x20040000,0x200c0000,0x30000000,0x30080000,0x30040000,0x300c0000,
                                    0x00001000,0x00081000,0x00041000,0x000c1000,0x10001000,0x10081000,0x10041000,0x100c1000,0x20001000,0x20081000,0x20041000,0x200c1000,0x30001000,0x30081000,0x30041000,0x300c1000,0x00001000,0x00081000,0x00041000,0x000c1000,0x10001000,0x10081000,0x10041000,0x100c1000,0x20001000,0x20081000,0x20041000,0x200c1000,0x30001000,0x30081000,0x30041000,0x300c1000,
                                    0x00000000,0x00080000,0x00040000,0x000c0000,0x10000000,0x10080000,0x10040000,0x100c0000,0x20000000,0x20080000,0x20040000,0x200c0000,0x30000000,0x30080000,0x30040000,0x300c0000,0x00000000,0x00080000,0x00040000,0x000c0000,0x10000000,0x10080000,0x10040000,0x100c0000,0x20000000,0x20080000,0x20040000,0x200c0000,0x30000000,0x30080000,0x30040000,0x300c0000,
                                    0x00001000,0x00081000,0x00041000,0x000c1000,0x10001000,0x10081000,0x10041000,0x100c1000,0x20001000,0x20081000,0x20041000,0x200c1000,0x30001000,0x30081000,0x30041000,0x300c1000,0x00001000,0x00081000,0x00041000,0x000c1000,0x10001000,0x10081000,0x10041000,0x100c1000,0x20001000,0x20081000,0x20041000,0x200c1000,0x30001000,0x30081000,0x30041000,0x300c1000 };

uint32_t gpio8_high_array[0x100] = {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
                                    0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
                                    0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,
                                    0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,
                                    0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,
                                    0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,0x800000,
                                    0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,
                                    0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000 };

uint32_t gpio9_high_array[0x100] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80 };

uint8_t read_data_array[0x10000] = { 0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x00,0x00,0x01,0x01,0x10,0x10,0x11,0x11,0x08,0x08,0x09,0x09,0x18,0x18,0x19,0x19,0x40,0x40,0x41,0x41,0x50,0x50,0x51,0x51,0x48,0x48,0x49,0x49,0x58,0x58,0x59,0x59,0x20,0x20,0x21,0x21,0x30,0x30,0x31,0x31,0x28,0x28,0x29,0x29,0x38,0x38,0x39,0x39,0x60,0x60,0x61,0x61,0x70,0x70,0x71,0x71,0x68,0x68,0x69,0x69,0x78,0x78,0x79,0x79,
                                     0x02,0x02,0x03,0x03,0x12,0x12,0x13,0x13,0x0a,0x0a,0x0b,0x0b,0x1a,0x1a,0x1b,0x1b,0x42,0x42,0x43,0x43,0x52,0x52,0x53,0x53,0x4a,0x4a,0x4b,0x4b,0x5a,0x5a,0x5b,0x5b,0x22,0x22,0x23,0x23,0x32,0x32,0x33,0x33,0x2a,0x2a,0x2b,0x2b,0x3a,0x3a,0x3b,0x3b,0x62,0x62,0x63,0x63,0x72,0x72,0x73,0x73,0x6a,0x6a,0x6b,0x6b,0x7a,0x7a,0x7b,0x7b,
                                     0x04,0x04,0x05,0x05,0x14,0x14,0x15,0x15,0x0c,0x0c,0x0d,0x0d,0x1c,0x1c,0x1d,0x1d,0x44,0x44,0x45,0x45,0x54,0x54,0x55,0x55,0x4c,0x4c,0x4d,0x4d,0x5c,0x5c,0x5d,0x5d,0x24,0x24,0x25,0x25,0x34,0x34,0x35,0x35,0x2c,0x2c,0x2d,0x2d,0x3c,0x3c,0x3d,0x3d,0x64,0x64,0x65,0x65,0x74,0x74,0x75,0x75,0x6c,0x6c,0x6d,0x6d,0x7c,0x7c,0x7d,0x7d,
                                     0x06,0x06,0x07,0x07,0x16,0x16,0x17,0x17,0x0e,0x0e,0x0f,0x0f,0x1e,0x1e,0x1f,0x1f,0x46,0x46,0x47,0x47,0x56,0x56,0x57,0x57,0x4e,0x4e,0x4f,0x4f,0x5e,0x5e,0x5f,0x5f,0x26,0x26,0x27,0x27,0x36,0x36,0x37,0x37,0x2e,0x2e,0x2f,0x2f,0x3e,0x3e,0x3f,0x3f,0x66,0x66,0x67,0x67,0x76,0x76,0x77,0x77,0x6e,0x6e,0x6f,0x6f,0x7e,0x7e,0x7f,0x7f,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff,
                                     0x80,0x80,0x81,0x81,0x90,0x90,0x91,0x91,0x88,0x88,0x89,0x89,0x98,0x98,0x99,0x99,0xc0,0xc0,0xc1,0xc1,0xd0,0xd0,0xd1,0xd1,0xc8,0xc8,0xc9,0xc9,0xd8,0xd8,0xd9,0xd9,0xa0,0xa0,0xa1,0xa1,0xb0,0xb0,0xb1,0xb1,0xa8,0xa8,0xa9,0xa9,0xb8,0xb8,0xb9,0xb9,0xe0,0xe0,0xe1,0xe1,0xf0,0xf0,0xf1,0xf1,0xe8,0xe8,0xe9,0xe9,0xf8,0xf8,0xf9,0xf9,
                                     0x82,0x82,0x83,0x83,0x92,0x92,0x93,0x93,0x8a,0x8a,0x8b,0x8b,0x9a,0x9a,0x9b,0x9b,0xc2,0xc2,0xc3,0xc3,0xd2,0xd2,0xd3,0xd3,0xca,0xca,0xcb,0xcb,0xda,0xda,0xdb,0xdb,0xa2,0xa2,0xa3,0xa3,0xb2,0xb2,0xb3,0xb3,0xaa,0xaa,0xab,0xab,0xba,0xba,0xbb,0xbb,0xe2,0xe2,0xe3,0xe3,0xf2,0xf2,0xf3,0xf3,0xea,0xea,0xeb,0xeb,0xfa,0xfa,0xfb,0xfb,
                                     0x84,0x84,0x85,0x85,0x94,0x94,0x95,0x95,0x8c,0x8c,0x8d,0x8d,0x9c,0x9c,0x9d,0x9d,0xc4,0xc4,0xc5,0xc5,0xd4,0xd4,0xd5,0xd5,0xcc,0xcc,0xcd,0xcd,0xdc,0xdc,0xdd,0xdd,0xa4,0xa4,0xa5,0xa5,0xb4,0xb4,0xb5,0xb5,0xac,0xac,0xad,0xad,0xbc,0xbc,0xbd,0xbd,0xe4,0xe4,0xe5,0xe5,0xf4,0xf4,0xf5,0xf5,0xec,0xec,0xed,0xed,0xfc,0xfc,0xfd,0xfd,
                                     0x86,0x86,0x87,0x87,0x96,0x96,0x97,0x97,0x8e,0x8e,0x8f,0x8f,0x9e,0x9e,0x9f,0x9f,0xc6,0xc6,0xc7,0xc7,0xd6,0xd6,0xd7,0xd7,0xce,0xce,0xcf,0xcf,0xde,0xde,0xdf,0xdf,0xa6,0xa6,0xa7,0xa7,0xb6,0xb6,0xb7,0xb7,0xae,0xae,0xaf,0xaf,0xbe,0xbe,0xbf,0xbf,0xe6,0xe6,0xe7,0xe7,0xf6,0xf6,0xf7,0xf7,0xee,0xee,0xef,0xef,0xfe,0xfe,0xff,0xff };


// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------
//
// Begin Z80 Bus Interface Unit 
//
// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

// Setup Teensy 4.1 IO's
//
void setup() {
    
  pinMode(PIN_RESET,         INPUT);  
  pinMode(PIN_CLK,           INPUT);  
  pinMode(PIN_NMI,           INPUT);  
  pinMode(PIN_INTR,          INPUT);  
  pinMode(PIN_WAIT,          INPUT);  
  
  pinMode(PIN_M1,            OUTPUT); 
  pinMode(PIN_HALT,          OUTPUT); 
  pinMode(PIN_RD,            OUTPUT); 
  pinMode(PIN_WR,            OUTPUT); 
  pinMode(PIN_MREQ,          OUTPUT); 
  pinMode(PIN_IOREQ,         OUTPUT); 
  pinMode(PIN_RFSH,          OUTPUT); 
  

  pinMode(PIN_ADDR15,        OUTPUT); 
  pinMode(PIN_ADDR14,        OUTPUT); 
  pinMode(PIN_ADDR13,        OUTPUT); 
  pinMode(PIN_ADDR12,        OUTPUT); 
  pinMode(PIN_ADDR11,        OUTPUT); 
  pinMode(PIN_ADDR10,        OUTPUT); 
  pinMode(PIN_ADDR9,         OUTPUT); 
  pinMode(PIN_ADDR8,         OUTPUT); 

  pinMode(PIN_AD7_OUT,       OUTPUT); 
  pinMode(PIN_AD6_OUT,       OUTPUT); 
  pinMode(PIN_AD5_OUT,       OUTPUT); 
  pinMode(PIN_AD4_OUT,       OUTPUT); 
  pinMode(PIN_AD3_OUT,       OUTPUT); 
  pinMode(PIN_AD2_OUT,       OUTPUT); 
  pinMode(PIN_AD1_OUT,       OUTPUT); 
  pinMode(PIN_AD0_OUT,       OUTPUT); 
  pinMode(PIN_DATA_OE_n,     OUTPUT); 
  pinMode(PIN_ADDR_LATCH_n,  OUTPUT); 

  pinMode(PIN_AD7_IN,        INPUT); 
  pinMode(PIN_AD6_IN,        INPUT); 
  pinMode(PIN_AD5_IN,        INPUT); 
  pinMode(PIN_AD4_IN,        INPUT); 
  pinMode(PIN_AD3_IN,        INPUT); 
  pinMode(PIN_AD2_IN,        INPUT); 
  pinMode(PIN_AD1_IN,        INPUT); 
  pinMode(PIN_AD0_IN,        INPUT); 

  digitalWriteFast(PIN_M1,0x1);
  digitalWriteFast(PIN_HALT,0x1);
  digitalWriteFast(PIN_RD,0x1);
  digitalWriteFast(PIN_WR,0x1);
  digitalWriteFast(PIN_MREQ,0x1);
  digitalWriteFast(PIN_IOREQ,0x1);
  digitalWriteFast(PIN_RFSH,0x1);
  digitalWriteFast(PIN_ADDR_LATCH_n,0x1);
  

  Serial.begin(9600);

}  
  
// -------------------------------------------------
// Wait for the CLK rising edge  
// -------------------------------------------------         
inline void wait_for_CLK_rising_edge() {

    while ( (GPIO6_DR&0x08000000) != 0) {}                                              // First ensure clock is at a low level
    do { GPIO6_raw_data = GPIO6_DR;   } while ( (GPIO6_raw_data&0x08000000) == 0);      // Then poll for the first instance where clock is not low

    if (debounce_refresh==1) { digitalWriteFast(PIN_RFSH,0x1);  debounce_refresh=0;}
    
    direct_nmi      = (GPIO6_raw_data&0x00010000);   
    direct_intr     = (GPIO6_raw_data&0x04000000);   
    if (direct_nmi_d!=0 && direct_nmi==0) nmi_latched=1;                                // Latch NMI on both CLK edges
    direct_nmi_d = direct_nmi;
    
    return;}
    
// -------------------------------------------------
// Wait for the CLK falling edge       
// -------------------------------------------------
inline void wait_for_CLK_falling_edge() {
    
    if (clock_counter>0) clock_counter--;                                               // Count down clock_counter here at end of each instruction

    while ( (GPIO6_DR&0x08000000) == 0) {}                                              // First ensure clock is at a high level
    do {    } while ( (GPIO6_DR&0x08000000) != 0);                                      // Then poll for the first instance where clock is not high
    
    GPIO6_raw_data  = GPIO6_DR;                                                         // Store slightly-delayed version of GPIO6 in a global register
    direct_wait     = (GPIO6_raw_data&0x01000000); 
    direct_reset    = (GPIO6_raw_data&0x02000000);   

    direct_nmi      = (GPIO6_raw_data&0x00010000);   
    if (direct_nmi_d!=0 && direct_nmi==0) nmi_latched=1;                                // Latch NMI on both CLK edges
    direct_nmi_d = direct_nmi;
    
    return;
}
  
// -------------------------------------------------
// Initiate a Z80 Bus Cycle
// -------------------------------------------------
  inline uint8_t BIU_Bus_Cycle(uint8_t biu_operation, uint16_t local_address , uint8_t local_data)  
  {
    register uint8_t  read_cycle=0;
    register uint8_t  read_data=0;
    register uint32_t read_data_raw=0;
    register uint32_t writeback_data7=0;
    register uint32_t writeback_data8=0;
    register uint32_t writeback_data9=0;

    register uint32_t gpio7_out=0;
    register uint32_t gpio8_out=0;
    register uint32_t gpio9_out=0;
    register uint8_t local_address_high=0;
    register uint8_t local_address_low=0;
    register uint8_t m1_cycle=0;

    read_cycle   = (biu_operation & 0x1);
    if ( (biu_operation==OPCODE_READ_M1) || ( biu_operation==INTERRUPT_ACK) )      m1_cycle=0; else m1_cycle=2;  
      
    noInterrupts();                           // Disable Teensy interupts so the Z80 bus cycle can complete without interruption
    digitalWriteFast(PIN_ADDR_LATCH_n,0x1);   // Allow address to propagate through '373 latch
    
    // Pre-calculate before the clock edge to gain speed
    //
    local_address_high = (local_address)>>8;
    local_address_low  = (0x00FF&local_address);
    gpio7_out = gpio7_high_array[local_address_high] | gpio7_low_array[local_address_low];
    gpio8_out = gpio8_high_array[local_address_high] ;
    gpio9_out = gpio9_high_array[local_address_high] | gpio9_low_array[local_address_low];
    
    writeback_data7 = (0xCFF0E3FC & GPIO7_DR) | m1_cycle;   
    writeback_data9 = (0xFFFFFE1F & GPIO9_DR);   
    writeback_data8 = (0xFF3FFFFF & GPIO8_DR);   

    // Address phase is common for all bus cycle types - Lower byte of address is multiplexed with data so needs to be externally latched
    // -----------------------------------------------------------------------------------------------------------------------------------------
    wait_for_CLK_rising_edge();    GPIO7_DR        = writeback_data7 | gpio7_out;                               // T1 Rising 
                                   GPIO8_DR        = writeback_data8 | gpio8_out;
                                   GPIO9_DR        = writeback_data9 | gpio9_out | 0x80000010; // disable PIN_RFSH and PIN_DATA_OE_n
								   if ( (biu_operation==OPCODE_READ_M1) || (biu_operation==INTERRUPT_ACK) )  digitalWriteFast(PIN_M1,0x0);


    // Opcode fetch - M1 type - 4 cycles
    // -----------------------------------------------------------------------------
    if (biu_operation == OPCODE_READ_M1)  {
        // commented out this wait to speed up execution with 3.375 MHz clock, as it was missing the edge and waiting an additional cycle.
        // this means M1 and MREQ/RD are essentially coincident, 
        // wait_for_CLK_falling_edge();  
                                      digitalWriteFast(PIN_MREQ,0x0);                                           // T1 Falling
                                      digitalWriteFast(PIN_RD,0x0);
                                      //digitalWriteFast(PIN_ADDR_LATCH_n,0x0);

        wait_for_CLK_falling_edge();  while (direct_wait==0) {  wait_for_CLK_falling_edge();    }               // T2 Falling     

                                      // Pre-calculate before the next clock edge to gain speed
                                      //
                                      local_address_high = register_i;
                                      local_address_low  = register_r;
                                      gpio7_out = gpio7_high_array[local_address_high] | gpio7_low_array[local_address_low];
                                      gpio8_out = gpio8_high_array[local_address_high] ;
                                      gpio9_out = gpio9_high_array[local_address_high] | gpio9_low_array[local_address_low];
                                      
                                      writeback_data7 = (0xCFF0E3FC & GPIO7_DR) | 0x2; // drive M1 high again   
                                      writeback_data8 = (0xFF3FFFFF & GPIO8_DR);    
                                      writeback_data9 = (0xFFFFFE1F & GPIO9_DR);    

        wait_for_CLK_rising_edge();   read_data_raw = GPIO6_raw_data;                                           // T3 Rising   -- Read data sampled on this edge
                                        
                                      // Drive Refresh address
                                      //
                                      GPIO9_DR        = writeback_data9 | gpio9_out;                          
                                      GPIO8_DR        = writeback_data8 | gpio8_out;
                                      GPIO7_DR        = writeback_data7 | gpio7_out; 
                                      
                                      digitalWriteFast(PIN_MREQ,0x1); 
                                      digitalWriteFast(PIN_RFSH,0x0);  
                                      digitalWriteFast(PIN_RD,0x1); 
                                      digitalWriteFast(PIN_M1,0x1);  

                                      
        wait_for_CLK_falling_edge();  digitalWriteFast(PIN_MREQ,0x0);                                           // T3 Falling
                                      read_data = read_data_array[ (read_data_raw>>16) ];                       // Read the Z80 bus data, re-arranging bits through read_data_array

        
        wait_for_CLK_falling_edge();  digitalWriteFast(PIN_MREQ,0x1);                                           // T4 Falling
                                      debounce_refresh=1;
        interrupts(); 
                
        return read_data;
    }
   
    // Memory Read/Write - 3 cycles
    // -----------------------------------------------------------------------------    
    else if ( (biu_operation==MEM_READ_BYTE) || (biu_operation==MEM_WRITE_BYTE) )  {
        wait_for_CLK_falling_edge();  digitalWriteFast(PIN_ADDR_LATCH_n,0x0);                                    // T1 Falling
                                      digitalWriteFast(PIN_MREQ,0x0);
                                      digitalWriteFast(PIN_RD,!read_cycle);

                                      digitalWriteFast(PIN_AD7_OUT,  (local_data & 0x80) );         
                                      digitalWriteFast(PIN_AD6_OUT,  (local_data & 0x40) );
                                      digitalWriteFast(PIN_AD5_OUT,  (local_data & 0x20) );
                                      digitalWriteFast(PIN_AD4_OUT,  (local_data & 0x10) );
                                      digitalWriteFast(PIN_AD3_OUT,  (local_data & 0x08) );
                                      digitalWriteFast(PIN_AD2_OUT,  (local_data & 0x04) );
                                      digitalWriteFast(PIN_AD1_OUT,  (local_data & 0x02) );
                                      digitalWriteFast(PIN_AD0_OUT,  (local_data & 0x01) );     
                                      digitalWriteFast(PIN_DATA_OE_n, read_cycle);

        wait_for_CLK_falling_edge();  digitalWriteFast(PIN_WR,read_cycle);                                      // T2 Falling
                                      while (direct_wait==0) {  wait_for_CLK_falling_edge();    }                     

        wait_for_CLK_falling_edge();  digitalWriteFast(PIN_MREQ,0x1);                                           // T3 Falling   -- Read data sampled on this edge
                                      digitalWriteFast(PIN_RD,0x1); 
                                      digitalWriteFast(PIN_WR,0x1); 
                                      read_data = read_data_array[ (GPIO6_raw_data>>16) ];                      // Read the Z80 bus data, re-arranging bits through read_data_array
                              
        interrupts();   
        
        return read_data;
    }
     
    // IO Read/Write - 3 cycles with one additional wait state
    // -----------------------------------------------------------------------------  
    else if ( (biu_operation==IO_READ_BYTE) || (biu_operation==IO_WRITE_BYTE) )  {
        
        wait_for_CLK_falling_edge();   digitalWriteFast(PIN_ADDR_LATCH_n,0x0);                                  // T1 Falling
                                       digitalWriteFast(PIN_AD7_OUT,  (local_data & 0x80) );                   
                                       digitalWriteFast(PIN_AD6_OUT,  (local_data & 0x40) );
                                       digitalWriteFast(PIN_AD5_OUT,  (local_data & 0x20) );
                                       digitalWriteFast(PIN_AD4_OUT,  (local_data & 0x10) );
                                       digitalWriteFast(PIN_AD3_OUT,  (local_data & 0x08) );
                                       digitalWriteFast(PIN_AD2_OUT,  (local_data & 0x04) );
                                       digitalWriteFast(PIN_AD1_OUT,  (local_data & 0x02) );
                                       digitalWriteFast(PIN_AD0_OUT,  (local_data & 0x01) );        
                                       digitalWriteFast(PIN_DATA_OE_n, read_cycle);
                                        
        wait_for_CLK_rising_edge();   digitalWriteFast(PIN_IOREQ,0x0);                                          // T2 Rising
                                      digitalWriteFast(PIN_RD,!read_cycle);
                                      digitalWriteFast(PIN_WR,read_cycle);
                                                            
        wait_for_CLK_rising_edge();                                                                             // Tw Rising        
        wait_for_CLK_rising_edge();                                                                             // T3 Rising        
        wait_for_CLK_falling_edge();  while (direct_wait==0) {  wait_for_CLK_falling_edge();    }               // T3 Falling        -- Read data sampled on this edge
                                      digitalWriteFast(PIN_IOREQ,0x1);                                       
                                      digitalWriteFast(PIN_RD,0x1); 
                                      digitalWriteFast(PIN_WR,0x1); 
                                      read_data = read_data_array[ (GPIO6_raw_data>>16) ];                      // Read the Z80 bus data, re-arranging bits through read_data_array 
        interrupts(); 
        return read_data;
    }

    // Interrupt Acknowledge - 4 cycle M1 type but with two additional wait states
    // -----------------------------------------------------------------------------  
    else if (biu_operation==INTERRUPT_ACK)  {
        wait_for_CLK_rising_edge();                                                                             // T2 Rising
        wait_for_CLK_rising_edge();                                                                             // Tw1 Rising
        wait_for_CLK_falling_edge();   digitalWriteFast(PIN_IOREQ,0x0);                                         // Tw1 Falling

        wait_for_CLK_falling_edge();  while (direct_wait==0) {  wait_for_CLK_falling_edge();    }               // Tw2 Falling      

                                      // Pre-calculate before the next clock edge to gain speed
                                      //
                                      local_address_high = register_i;
                                      local_address_low  = register_r;
                                      gpio7_out = gpio7_high_array[local_address_high] | gpio7_low_array[local_address_low];
                                      gpio8_out = gpio8_high_array[local_address_high] | 0x00040000 ; // Also set IOREQ_n high
                                      gpio9_out = gpio9_high_array[local_address_high] | gpio9_low_array[local_address_low];
                                      
                                      writeback_data7 = (0xCFF0E3FC & GPIO7_DR) | 0x2; // drive M1 high again   
                                      writeback_data9 = (0xFFFFFE1F & GPIO9_DR);   // Read in current GPIOx register value and clear the bits we intend to update
                                      writeback_data8 = (0xFF3FFFFF & GPIO8_DR);   // Read in current GPIOx register value and clear the bits we intend to update

        wait_for_CLK_rising_edge();   read_data_raw = GPIO6_raw_data;                                          // T3 Rising   -- Read data sampled on this edge
                                      
                                      // Drive Refresh address
                                      //
                                      GPIO9_DR        = writeback_data9 | gpio9_out;                          
                                      GPIO8_DR        = writeback_data8 | gpio8_out;
                                      GPIO7_DR        = writeback_data7 | gpio7_out; 
                                      
                                      digitalWriteFast(PIN_M1,0x1); 
                                      digitalWriteFast(PIN_RFSH,0x0);  
                                      digitalWriteFast(PIN_IOREQ,0x1);
                                 
        wait_for_CLK_falling_edge();  digitalWriteFast(PIN_MREQ,0x0);                                           // T3 Falling
                                      read_data = read_data_array[ (read_data_raw>>16) ];                       // Read the Z80 bus data, re-arranging bits through read_data_array

                                      
        wait_for_CLK_falling_edge();  digitalWriteFast(PIN_MREQ,0x1);                                           // T4 Falling
                                      debounce_refresh=1;
        interrupts(); 
        return read_data;
    }   
  return 0xEE;
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------
//
// End Z80 Bus Interface Unit
//
// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

uint16_t Sign_Extend(uint8_t local_data)  {  if ((0x0080&local_data)!=0) return (0xFF00|local_data); else return (0x00FF&local_data); }

// ------------------------------------------------------
// Z80 Reset routine
// ------------------------------------------------------
//
void reset_sequence()  {
    
    while (direct_reset==0) {  wait_for_CLK_falling_edge();  }       // Stay here until RESET is de-aserted

    clock_counter=0;                                                // Debounce prefix, cycle counter, and nmi
    last_instruction_set_a_prefix=0;   
    prefix_dd = 0;
    prefix_fd = 0;
    prefix_cb = 0;  
    pause_interrupts=0;     
    halt_in_progress=0;
    nmi_latched=0;  
    direct_nmi_d=0;
    
    register_iff1       = 0;                                        // Reset registers
    register_iff2       = 0;                                     
    register_i          = 0;                                     
    register_r          = 0;                                     
    register_im         = 0;                                     
    register_pc         = 0;                                     
    register_sp         = 0xFFFF;                                  
    register_a          = 0x00;                                  
    register_f          = 0xFF;                                  
    
    wait_for_CLK_rising_edge();
    return;
}

// ------------------------------------------------------
// Fetch an opcode byte - M1 cycle
// ------------------------------------------------------
uint8_t Fetch_opcode()  {    
    uint8_t local_byte;
    
    if (assert_iack_type0==1)  local_byte = BIU_Bus_Cycle(INTERRUPT_ACK  , 0x0000      , 0x00 ); 
    else                       local_byte = BIU_Bus_Cycle(OPCODE_READ_M1 , register_pc , 0x00 );
    
    assert_iack_type0=0;
    register_pc++;
    register_r = (register_r&0x80) | (0x7F&(register_r+1));

    return local_byte;
}

// ------------------------------------------------------
// Fetch a subsequent byte 
// ------------------------------------------------------
uint8_t Fetch_byte()  {    
    uint8_t local_byte;
    
    local_byte = BIU_Bus_Cycle(MEM_READ_BYTE , register_pc , 0x00 );
    
    register_pc++;
	
    return local_byte;
}


// ------------------------------------------------------
// Read and Write data from BIU
// ------------------------------------------------------
uint8_t Read_byte(uint16_t local_address)  {    
    uint8_t local_byte;
    local_byte = BIU_Bus_Cycle(MEM_READ_BYTE , local_address , 0x00 );
    return local_byte;
}

uint16_t Read_word(uint16_t local_address)  {    
    uint8_t local_byte1;
    uint8_t local_byte2;
    local_byte1 = BIU_Bus_Cycle(MEM_READ_BYTE , local_address   , 0x00 );
    local_byte2 = BIU_Bus_Cycle(MEM_READ_BYTE , local_address+1 , 0x00 );
    return (local_byte1 | (local_byte2<<8));
}

void Write_byte(uint16_t local_address , uint8_t local_data)  {    
    BIU_Bus_Cycle(MEM_WRITE_BYTE , local_address , local_data );
    return;
}

void Write_word(uint16_t local_address , uint16_t local_data)  {    
    BIU_Bus_Cycle(MEM_WRITE_BYTE , local_address   , local_data    );  
    BIU_Bus_Cycle(MEM_WRITE_BYTE , local_address+1 , local_data>>8 );  
    return;
}

void Writeback_Reg16(uint8_t local_reg , uint16_t local_data)  {
    switch (local_reg)  {
        case REG_BC: register_b=(local_data>>8);    register_c=(0xFF&local_data);    break; 
        case REG_DE: register_d=(local_data>>8);    register_e=(0xFF&local_data);    break; 
        case REG_HL: register_h=(local_data>>8);    register_l=(0xFF&local_data);    break; 
        case REG_AF: register_a=(local_data>>8);    register_f=(0xFF&local_data);    break; 
        case REG_IX: register_ixh=(local_data>>8);  register_ixl=(0xFF&local_data);  break; 
        case REG_IY: register_iyh=(local_data>>8);  register_iyl=(0xFF&local_data);  break; 
    }
    return;
}


// ------------------------------------------------------
// Prefix Opcodes
// ------------------------------------------------------
void opcode_0xDD () {
    prefix_dd=1;
    last_instruction_set_a_prefix=1;
    clock_counter = clock_counter + Opcode_Timing_DDFD[opcode_byte];
    return;
}

void opcode_0xFD () {
    prefix_fd=1;
    last_instruction_set_a_prefix=1;
    clock_counter = clock_counter + Opcode_Timing_DDFD[opcode_byte];
    return;
}

void opcode_0x00 ()   {     return; } // NOP

// ------------------------------------------------------
// Stack
// ------------------------------------------------------
void Push(uint16_t local_data)  {    
    register_sp--;
    BIU_Bus_Cycle(MEM_WRITE_BYTE , register_sp   , local_data>>8    );  // High Byte
    register_sp--;
    BIU_Bus_Cycle(MEM_WRITE_BYTE , register_sp , local_data );          // Low Byte
    return;
}

uint16_t Pop()  {   
    uint8_t local_data_low;
    uint8_t local_data_high;
    
    local_data_low  = BIU_Bus_Cycle(MEM_READ_BYTE , register_sp , 0x00    ); // Low Byte
    register_sp++;
    local_data_high = BIU_Bus_Cycle(MEM_READ_BYTE , register_sp , 0x00    ); // High Byte
    register_sp++;
    return( (local_data_high<<8) | local_data_low);
}
void opcode_0xC5()  {  Push(REGISTER_BC);  return;  }                                                                                                   // push bc
void opcode_0xD5()  {  Push(REGISTER_DE);  return;  }                                                                                                   // push de
void opcode_0xE5()  {  if (prefix_dd==1)  Push(REGISTER_IX); else if (prefix_fd==1) Push(REGISTER_IY); else Push(REGISTER_HL);  return;  }              // push hl
void opcode_0xF5()  {  Push(REGISTER_AF);  return;  }                                                                                                   // push af

void opcode_0xF1()  {  uint16_t local_data = Pop();                            register_a  =(local_data>>8); register_f  =(local_data&0xFF);  return;  } // pop af
void opcode_0xC1()  {  uint16_t local_data = Pop();                            register_b  =(local_data>>8); register_c  =(local_data&0xFF);  return;  } // pop bc
void opcode_0xD1()  {  uint16_t local_data = Pop();                            register_d  =(local_data>>8); register_e  =(local_data&0xFF);  return;  } // pop de
void opcode_0xE1()  {  uint16_t local_data = Pop();        if (prefix_dd==1) { register_ixh=(local_data>>8); register_ixl=(local_data&0xFF);}            // pop ix
                                                      else if (prefix_fd==1) { register_iyh=(local_data>>8); register_iyl=(local_data&0xFF);}            // pop iy
                                                      else                   { register_h  =(local_data>>8); register_l  =(local_data&0xFF);} return;  } // pop hl

// ------------------------------------------------------
// Flags/Complements 
// ------------------------------------------------------

void opcode_0x3F()  {   temp8 = register_f & 0x01;                          // Store old C Flag     
                        register_f = register_f & 0xC4;                     // Clear H, C, N, 5,3
                        if (temp8==1) register_f = register_f | 0x10;       // Set H
                        if (temp8==0) register_f = register_f | 0x01;       // Compliiment C Flag
                        register_f = register_f | (register_a&0x28); 
                        return;  }  // ccf

void opcode_0x2F()  {   register_a = 0xFF ^ register_a;                     // Compliment register a    
                        register_f = register_f | 0x12;                     // Set N and H Flags
                        register_f = register_f & 0xD7;                     // Clear Flags 5,3
                        register_f = register_f | (register_a&0x28); 
                        return;  }  // cpl

void opcode_0x37()  {   register_f = register_f | 0x01;                     // Set C
                        register_f = register_f & 0xC5;                     // Clear Flags H, N, 5,3
                        register_f = register_f | (register_a&0x28); 
                        return;  }  // scf

// ------------------------------------------------------
// Interrupt enables and modes 
// ------------------------------------------------------
void opcode_0xED46()  {  register_im=0;                                                                                   return;  }  // IM0
void opcode_0xED56()  {  register_im=1;                                                                                   return;  }  // IM1
void opcode_0xED5E()  {  register_im=2;                                                                                   return;  }  // IM2
void opcode_0xFB()  { register_iff1=1; register_iff2=1;   last_instruction_set_a_prefix=0;                                return;  }  // ei
void opcode_0xF3()  { register_iff1=0; register_iff2=0;                                                                   return;  }  // di

// ------------------------------------------------------
// Exchanges 
// ------------------------------------------------------
void opcode_0x08()  { temp8=register_a; register_a=register_a2; register_a2=temp8;    temp8=register_f; register_f=register_f2; register_f2=temp8;   return;  }   // ex af,af' 
void opcode_0xEB()  { temp8=register_d; register_d=register_h;  register_h=temp8;     temp8=register_e; register_e=register_l;  register_l=temp8;    return;  }   // ex de hl 

void opcode_0xD9()  { temp8=register_b; register_b=register_b2; register_b2=temp8;    temp8=register_c; register_c=register_c2; register_c2=temp8;                // exx  bc  bc' 
                      temp8=register_d; register_d=register_d2; register_d2=temp8;    temp8=register_e; register_e=register_e2; register_e2=temp8;                //      de  de' 
                      temp8=register_h; register_h=register_h2; register_h2=temp8;    temp8=register_l; register_l=register_l2; register_l2=temp8;   return;  }   //      hl  hl'

void opcode_0xE3()  {  if (prefix_dd==1) { temp8=Read_byte(register_sp);    Write_byte(register_sp  ,register_ixl);  register_ixl=temp8;                          // ex (sp),ix                                                                           
                                           temp8=Read_byte(register_sp+1);  Write_byte(register_sp+1,register_ixh);  register_ixh=temp8;  }  else                                                                                      
                       if (prefix_fd==1) { temp8=Read_byte(register_sp);    Write_byte(register_sp  ,register_iyl);  register_iyl=temp8;                          // ex (sp),iy                                                                           
                                           temp8=Read_byte(register_sp+1);  Write_byte(register_sp+1,register_iyh);  register_iyh=temp8;  }  else                                                                                      

                                         { temp8=Read_byte(register_sp);    Write_byte(register_sp  ,register_l);    register_l=temp8;                            // ex (sp),hl                                                                           
                                           temp8=Read_byte(register_sp+1);  Write_byte(register_sp+1,register_h);    register_h=temp8;    }  return;  }                                                                                      

// ------------------------------------------------------
// Jumps, Calls, Returns
// ------------------------------------------------------
void Jump_Not_Taken8()  {
    Fetch_byte();
    return;
}
void Jump_Not_Taken16()  {
    Fetch_byte();
    Fetch_byte();
    return;
}
void Jump_Taken8()  {   
    uint16_t local_displacement;
    
    local_displacement = Sign_Extend(Fetch_byte());
    register_pc = (register_pc) + local_displacement;
    return;
}
void Jump_Taken16()  {  
    uint16_t local_displacement;
        
    local_displacement = Fetch_byte();                                        
    register_pc = (Fetch_byte()<<8) | local_displacement; 
    return;
}
void opcode_0x18()  {                                            clock_counter=clock_counter+0; Jump_Taken8();                                              return;  }  // jr *    - Disp8
void opcode_0x20()  { if (flag_z == 0)                          {clock_counter=clock_counter+0; Jump_Taken8();}    else Jump_Not_Taken8();                  return;  }  // jr nz,* - Disp8
void opcode_0x28()  { if (flag_z == 1)                          {clock_counter=clock_counter+0; Jump_Taken8();}    else Jump_Not_Taken8();                  return;  }  // jr z,*  - Disp8
void opcode_0x30()  { if (flag_c == 0)                          {clock_counter=clock_counter+0; Jump_Taken8();}    else Jump_Not_Taken8();                  return;  }  // jr nc,* - Disp8
void opcode_0x38()  { if (flag_c == 1)                          {clock_counter=clock_counter+0; Jump_Taken8();}    else Jump_Not_Taken8();                  return;  }  // jr c,*  - Disp8
void opcode_0x10()  { register_b--;      if (register_b != 0)   {clock_counter=clock_counter+0; Jump_Taken8();}    else Jump_Not_Taken8();                  return;  }  // djnz *  - Disp8
            
void opcode_0xC2()  { if (flag_z == 0)                           Jump_Taken16();  else Jump_Not_Taken16();                                                  return;  }  // jp nz,**  
void opcode_0xCA()  { if (flag_z == 1)                           Jump_Taken16();  else Jump_Not_Taken16();                                                  return;  }  // jp z,**  
void opcode_0xD2()  { if (flag_c == 0)                           Jump_Taken16();  else Jump_Not_Taken16();                                                  return;  }  // jp nc,**  
void opcode_0xDA()  { if (flag_c == 1)                           Jump_Taken16();  else Jump_Not_Taken16();                                                  return;  }  // jp c,**  
void opcode_0xE2()  { if (flag_p == 0)                           Jump_Taken16();  else Jump_Not_Taken16();                                                  return;  }  // jp po,**  
void opcode_0xEA()  { if (flag_p == 1)                           Jump_Taken16();  else Jump_Not_Taken16();                                                  return;  }  // jp pe,**  
void opcode_0xF2()  { if (flag_s == 0)                           Jump_Taken16();  else Jump_Not_Taken16();                                                  return;  }  // jp p,**  
void opcode_0xFA()  { if (flag_s == 1)                           Jump_Taken16();  else Jump_Not_Taken16();                                                  return;  }  // jp m,**  

void opcode_0xC3()  {                                            Jump_Taken16();                                                                            return;  }  // jp ** 
void opcode_0xE9()  { if (prefix_dd==1) register_pc = (REGISTER_IX); else if (prefix_fd==1) register_pc = (REGISTER_IY); else register_pc = (REGISTER_HL);  return;  }  // jp ix or iy, or (hl) 

void opcode_0xC4()  { if (flag_z == 0) {    clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();   }  else Jump_Not_Taken16();               return;  }  // call nz,** 
void opcode_0xCC()  { if (flag_z == 1) {    clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();   }  else Jump_Not_Taken16();               return;  }  // call z,** 
void opcode_0xD4()  { if (flag_c == 0) {    clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();   }  else Jump_Not_Taken16();               return;  }  // call nc,** 
void opcode_0xDC()  { if (flag_c == 1) {    clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();   }  else Jump_Not_Taken16();               return;  }  // call c,** 
void opcode_0xE4()  { if (flag_p == 0) {    clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();   }  else Jump_Not_Taken16();               return;  }  // call po,** 
void opcode_0xEC()  { if (flag_p == 1) {    clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();   }  else Jump_Not_Taken16();               return;  }  // call pe,** 
void opcode_0xF4()  { if (flag_s == 0) {    clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();   }  else Jump_Not_Taken16();               return;  }  // call p,** 
void opcode_0xFC()  { if (flag_s == 1) {    clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();   }  else Jump_Not_Taken16();               return;  }  // call m,** 
void opcode_0xCD()  {                       clock_counter=clock_counter+2; Push(register_pc+2); Jump_Taken16();                                             return;  }  // call ** 

void opcode_0xC9()  {                       clock_counter=clock_counter+1; register_pc = Pop();         return;  }  // ret 
void opcode_0xC0()  { if (flag_z == 0)     {clock_counter=clock_counter+1; register_pc = Pop(); }       return;  }  // ret nz 
void opcode_0xC8()  { if (flag_z == 1)     {clock_counter=clock_counter+1; register_pc = Pop(); }       return;  }  // ret z 
void opcode_0xD0()  { if (flag_c == 0)     {clock_counter=clock_counter+1; register_pc = Pop(); }       return;  }  // ret nc 
void opcode_0xD8()  { if (flag_c == 1)     {clock_counter=clock_counter+1; register_pc = Pop(); }       return;  }  // ret c 
void opcode_0xE0()  { if (flag_p == 0)     {clock_counter=clock_counter+1; register_pc = Pop(); }       return;  }  // ret po 
void opcode_0xE8()  { if (flag_p == 1)     {clock_counter=clock_counter+1; register_pc = Pop(); }       return;  }  // ret pe 
void opcode_0xF0()  { if (flag_s == 0)     {clock_counter=clock_counter+1; register_pc = Pop(); }       return;  }  // ret p 
void opcode_0xF8()  { if (flag_s == 1)     {clock_counter=clock_counter+1; register_pc = Pop(); }       return;  }  // ret m 
void opcode_0xED45()  { register_iff1=register_iff2;   register_pc = Pop();                             return;  }  // retn
void opcode_0xED4D()  {                     register_pc = Pop();                                        return;  }  // reti 
                        
void opcode_0xC7()  {    Push(register_pc); register_pc = 0x00;                                         return;  }  // rst 00h
void opcode_0xD7()  {    Push(register_pc); register_pc = 0x10;                                         return;  }  // rst 10h
void opcode_0xE7()  {    Push(register_pc); register_pc = 0x20;                                         return;  }  // rst 20h
void opcode_0xF7()  {    Push(register_pc); register_pc = 0x30;                                         return;  }  // rst 30h
void opcode_0xCF()  {    Push(register_pc); register_pc = 0x08;                                         return;  }  // rst 08h
void opcode_0xDF()  {    Push(register_pc); register_pc = 0x18;                                         return;  }  // rst 18h
void opcode_0xEF()  {    Push(register_pc); register_pc = 0x28;                                         return;  }  // rst 28h
void opcode_0xFF()  {    Push(register_pc); register_pc = 0x38;                                         return;  }  // rst 38h


// ------------------------------------------------------
// Loads
// ------------------------------------------------------
void opcode_0x01 () {  register_c = Fetch_byte();  register_b = Fetch_byte();       return;  }
void opcode_0x11 () {  register_e = Fetch_byte();  register_d = Fetch_byte();       return;  }
void opcode_0x0A () {  register_a = Read_byte(REGISTER_BC);                             return;  }
void opcode_0x0E () {  register_c = Fetch_byte();                                     return;  }
void opcode_0x1E () {  register_e = Fetch_byte();                                     return;  }
void opcode_0x1A () {  register_a = Read_byte(REGISTER_DE);                             return;  }  

void opcode_0x21 () {  if (prefix_dd==1) { register_ixl = Fetch_byte(); register_ixh = Fetch_byte();  }   else
                       if (prefix_fd==1) { register_iyl = Fetch_byte(); register_iyh = Fetch_byte();  }   else
                                         { register_l   = Fetch_byte(); register_h   = Fetch_byte();  }   return;  }
                    
void opcode_0x22 () {  
    uint16_t local_address;
    
    local_address = Fetch_byte();
    local_address = (Fetch_byte()<<8) | local_address;

    if (prefix_dd==1) { Write_byte(local_address , register_ixl); Write_byte( local_address+1 , register_ixh); }   else
    if (prefix_fd==1) { Write_byte(local_address , register_iyl); Write_byte( local_address+1 , register_iyh); }   else
                      { Write_byte(local_address , register_l);   Write_byte( local_address+1 , register_h);   }   
return;  }
                            
void opcode_0x2A () {  
    uint16_t local_address;
    
    local_address = Fetch_byte();
    local_address = (Fetch_byte()<<8) | local_address; 
    
    if (prefix_dd==1) { register_ixl = Read_byte(local_address); register_ixh = Read_byte(local_address+1);  }   else
    if (prefix_fd==1) { register_iyl = Read_byte(local_address); register_iyh = Read_byte(local_address+1);  }   else
                      { register_l   = Read_byte(local_address); register_h   = Read_byte(local_address+1);  }   
return;  }
    
void opcode_0x06 () { register_b = Fetch_byte();   return;  }
void opcode_0x16 () { register_d = Fetch_byte();   return;  }
void opcode_0x26 () { if (prefix_dd==1) { register_ixh = Fetch_byte(); }   else if (prefix_fd==1) { register_iyh = Fetch_byte(); }   else  register_h = Fetch_byte();   return;  }
void opcode_0x2E () { if (prefix_dd==1) { register_ixl = Fetch_byte(); }   else if (prefix_fd==1) { register_iyl = Fetch_byte(); }   else  register_l = Fetch_byte();   return;  }

void opcode_0x31 () {  
    uint16_t local_address;
   local_address = Fetch_byte();
    local_address = (Fetch_byte()<<8) | local_address;

    register_sp = local_address;  return;  }
    
void opcode_0x32 () {  
    uint16_t local_address;
    
    local_address = Fetch_byte();
    local_address = (Fetch_byte()<<8) | local_address;

    Write_byte(local_address , register_a);        
return;  }  

void opcode_0x36 () {  if (prefix_dd==1) Write_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) , Fetch_byte() );  else
                       if (prefix_fd==1) Write_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) , Fetch_byte() );  else
                                         Write_byte(REGISTER_HL                               , Fetch_byte() );  return;  }
    
void opcode_0x3A () {   register_a = Read_byte((Fetch_byte()|(Fetch_byte()<<8)));  return;  }
void opcode_0x3E () {   register_a = Fetch_byte();   return;  }
    
void opcode_0x40 () {  register_b = register_b;  return;  }
void opcode_0x41 () {  register_b = register_c;  return;  }
void opcode_0x42 () {  register_b = register_d;  return;  }
void opcode_0x43 () {  register_b = register_e;  return;  }
void opcode_0x44 () {  if (prefix_dd==1) register_b = register_ixh;  else if (prefix_fd==1) register_b = register_iyh;   else  register_b = register_h; return;  }
void opcode_0x45 () {  if (prefix_dd==1) register_b = register_ixl;  else if (prefix_fd==1) register_b = register_iyl;   else  register_b = register_l; return;  }
void opcode_0x46 () {  if (prefix_dd==1) register_b = Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) );  else
                       if (prefix_fd==1) register_b = Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) );  else
                                         register_b = Read_byte(REGISTER_HL);                           return;  }
void opcode_0x47 () {  register_b = register_a;  return;  }
void opcode_0x48 () {  register_c = register_b;  return;  }
void opcode_0x49 () {  register_c = register_c;  return;  }
void opcode_0x4A () {  register_c = register_d;  return;  }
void opcode_0x4B () {  register_c = register_e;  return;  }
void opcode_0x4C () {  if (prefix_dd==1) register_c = register_ixh;  else if (prefix_fd==1) register_c = register_iyh;   else  register_c = register_h; return;  }
void opcode_0x4D () {  if (prefix_dd==1) register_c = register_ixl;  else if (prefix_fd==1) register_c = register_iyl;   else  register_c = register_l; return;  }
void opcode_0x4E () {  if (prefix_dd==1) register_c = Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) );  else
                       if (prefix_fd==1) register_c = Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) );  else
                                         register_c = Read_byte(REGISTER_HL);                           return;  }
void opcode_0x4F () {  register_c = register_a;  return;  }

// ----------------------------------------

void opcode_0x50 () {  register_d = register_b;  return;  }
void opcode_0x51 () {  register_d = register_c;  return;  }
void opcode_0x52 () {  register_d = register_d;  return;  }
void opcode_0x53 () {  register_d = register_e;  return;  }
void opcode_0x54 () {  if (prefix_dd==1) register_d = register_ixh;  else if (prefix_fd==1) register_d = register_iyh;   else  register_d = register_h; return;  }
void opcode_0x55 () {  if (prefix_dd==1) register_d = register_ixl;  else if (prefix_fd==1) register_d = register_iyl;   else  register_d = register_l; return;  }
void opcode_0x56 () {  if (prefix_dd==1) register_d = Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) );  else
                       if (prefix_fd==1) register_d = Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) );  else
                                         register_d = Read_byte(REGISTER_HL);                           return;  }
void opcode_0x57 () {  register_d = register_a;  return;  }
void opcode_0x58 () {  register_e = register_b;  return;  }
void opcode_0x59 () {  register_e = register_c;  return;  }
void opcode_0x5A () {  register_e = register_d;  return;  }
void opcode_0x5B () {  register_e = register_e;  return;  }
void opcode_0x5C () {  if (prefix_dd==1) register_e = register_ixh;  else if (prefix_fd==1) register_e = register_iyh;   else  register_e = register_h; return;  }
void opcode_0x5D () {  if (prefix_dd==1) register_e = register_ixl;  else if (prefix_fd==1) register_e = register_iyl;   else  register_e = register_l; return;  }
void opcode_0x5E () {  if (prefix_dd==1) register_e = Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) );  else
                       if (prefix_fd==1) register_e = Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) );  else
                                         register_e = Read_byte(REGISTER_HL);                           return;  }
void opcode_0x5F () {  register_e = register_a;  return;  }

// ----------------------------------------

void opcode_0x60 () {  if (prefix_dd==1) register_ixh = register_b;    else if (prefix_fd==1) register_iyh = register_b;     else  register_h = register_b; return;  }
void opcode_0x61 () {  if (prefix_dd==1) register_ixh = register_c;    else if (prefix_fd==1) register_iyh = register_c;     else  register_h = register_c; return;  }
void opcode_0x62 () {  if (prefix_dd==1) register_ixh = register_d;    else if (prefix_fd==1) register_iyh = register_d;     else  register_h = register_d; return;  }
void opcode_0x63 () {  if (prefix_dd==1) register_ixh = register_e;    else if (prefix_fd==1) register_iyh = register_e;     else  register_h = register_e; return;  }
void opcode_0x64 () {  if (prefix_dd==1) register_ixh = register_ixh;  else if (prefix_fd==1) register_iyh = register_iyh;   else  register_h = register_h; return;  }
void opcode_0x65 () {  if (prefix_dd==1) register_ixh = register_ixl;  else if (prefix_fd==1) register_iyh = register_iyl;   else  register_h = register_l; return;  }
void opcode_0x66 () {  if (prefix_dd==1) register_h = Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) );  else
                       if (prefix_fd==1) register_h = Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) );  else
                                         register_h = Read_byte(REGISTER_HL);                           return;  }
void opcode_0x67 () {  if (prefix_dd==1) register_ixh = register_a;    else if (prefix_fd==1) register_iyh = register_a;     else  register_h = register_a; return;  }
void opcode_0x68 () {  if (prefix_dd==1) register_ixl = register_b;    else if (prefix_fd==1) register_iyl = register_b;     else  register_l = register_b; return;  }
void opcode_0x69 () {  if (prefix_dd==1) register_ixl = register_c;    else if (prefix_fd==1) register_iyl = register_c;     else  register_l = register_c; return;  }
void opcode_0x6A () {  if (prefix_dd==1) register_ixl = register_d;    else if (prefix_fd==1) register_iyl = register_d;     else  register_l = register_d; return;  }
void opcode_0x6B () {  if (prefix_dd==1) register_ixl = register_e;    else if (prefix_fd==1) register_iyl = register_e;     else  register_l = register_e; return;  }
void opcode_0x6C () {  if (prefix_dd==1) register_ixl = register_ixh;  else if (prefix_fd==1) register_iyl = register_iyh;   else  register_l = register_h; return;  }
void opcode_0x6D () {  if (prefix_dd==1) register_ixl = register_ixl;  else if (prefix_fd==1) register_iyl = register_iyl;   else  register_l = register_l; return;  }
void opcode_0x6E () {  if (prefix_dd==1) register_l = Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) );  else
                       if (prefix_fd==1) register_l = Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) );  else
                                         register_l = Read_byte(REGISTER_HL);                           return;  }
void opcode_0x6F () {  if (prefix_dd==1) register_ixl = register_a;    else if (prefix_fd==1) register_iyl = register_a;     else  register_l = register_a; return;  }

// ----------------------------------------

void opcode_0x02 () {  Write_byte(REGISTER_BC , register_a);   return;  }  // ld (bc),a
void opcode_0x12 () {  Write_byte(REGISTER_DE , register_a);   return;  }  // ld (de),a


void opcode_0x70 () {  if (prefix_dd==1) Write_byte( (REGISTER_IX+Sign_Extend(Fetch_byte())) , register_b);  else
                       if (prefix_fd==1) Write_byte( (REGISTER_IY+Sign_Extend(Fetch_byte())) , register_b);  else
                                         Write_byte( REGISTER_HL                               , register_b );    return;  }
                    
void opcode_0x71 () {  if (prefix_dd==1) Write_byte( (REGISTER_IX+Sign_Extend(Fetch_byte())) , register_c);  else
                       if (prefix_fd==1) Write_byte( (REGISTER_IY+Sign_Extend(Fetch_byte())) , register_c);  else
                                         Write_byte( REGISTER_HL                               , register_c );    return;  }

void opcode_0x72 () {  if (prefix_dd==1) Write_byte( (REGISTER_IX+Sign_Extend(Fetch_byte())) , register_d);  else
                       if (prefix_fd==1) Write_byte( (REGISTER_IY+Sign_Extend(Fetch_byte())) , register_d);  else
                                         Write_byte( REGISTER_HL                               , register_d );    return;  }
                    
void opcode_0x73 () {  if (prefix_dd==1) Write_byte( (REGISTER_IX+Sign_Extend(Fetch_byte())) , register_e);  else
                       if (prefix_fd==1) Write_byte( (REGISTER_IY+Sign_Extend(Fetch_byte())) , register_e);  else
                                         Write_byte( REGISTER_HL                               , register_e );    return;  }

void opcode_0x74 () {  if (prefix_dd==1) Write_byte( (REGISTER_IX+Sign_Extend(Fetch_byte())) , register_h);  else
                       if (prefix_fd==1) Write_byte( (REGISTER_IY+Sign_Extend(Fetch_byte())) , register_h);  else
                                         Write_byte( REGISTER_HL                               , register_h );    return;  }
                    
void opcode_0x75 () {  if (prefix_dd==1) Write_byte( (REGISTER_IX+Sign_Extend(Fetch_byte())) , register_l);  else
                       if (prefix_fd==1) Write_byte( (REGISTER_IY+Sign_Extend(Fetch_byte())) , register_l);  else
                                         Write_byte( REGISTER_HL                               , register_l );    return;  }
                    
void opcode_0x77 () {  if (prefix_dd==1) Write_byte( (REGISTER_IX+Sign_Extend(Fetch_byte())) , register_a);  else
                       if (prefix_fd==1) Write_byte( (REGISTER_IY+Sign_Extend(Fetch_byte())) , register_a);  else
                                         Write_byte( REGISTER_HL                               , register_a );    return;  }
void opcode_0x78 () {  register_a = register_b; return;  }
void opcode_0x79 () {  register_a = register_c; return;  }
void opcode_0x7A () {  register_a = register_d; return;  }
void opcode_0x7B () {  register_a = register_e; return;  }
void opcode_0x7C () {  if (prefix_dd==1) register_a = register_ixh;    else if (prefix_fd==1) register_a = register_iyh;     else  register_a = register_h; return;  }
void opcode_0x7D () {  if (prefix_dd==1) register_a = register_ixl;    else if (prefix_fd==1) register_a = register_iyl;     else  register_a = register_l; return;  }
void opcode_0x7E () {  if (prefix_dd==1) register_a = Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) );  else
                       if (prefix_fd==1) register_a = Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) );  else
                                         register_a = Read_byte(REGISTER_HL);    return;  }
void opcode_0x7F () {  register_a = register_a; return;  }

// ----------------------------------------

void opcode_0xF9 () {  if (prefix_dd==1) register_sp = ((register_ixh<<8) | register_ixl);   else   
                       if (prefix_fd==1) register_sp = ((register_iyh<<8) | register_iyl);   else   
                                         register_sp = ((register_h  <<8) | register_l  );   return;  }   

void opcode_0xED43 () {  
    uint16_t local_address;
    
    local_address = (Fetch_byte() | (Fetch_byte()<<8));

    Write_byte(local_address , register_c);   Write_byte( local_address+1 , register_b);      
return;  }
            
void opcode_0xED53 () {  
    uint16_t local_address;
    
    local_address = (Fetch_byte() | (Fetch_byte()<<8));

    Write_byte(local_address , register_e);   Write_byte( local_address+1 , register_d);      
return;  }
            
void opcode_0xED63 () {  
    uint16_t local_address;
    
    local_address = (Fetch_byte() | (Fetch_byte()<<8));

    Write_byte(local_address , register_l);   Write_byte( local_address+1 , register_h);      
return;  }
            
void opcode_0xED73 () {  
    uint16_t local_address;
    
    local_address = (Fetch_byte() | (Fetch_byte()<<8));

    Write_word(local_address , register_sp);  
return;  }
            
void opcode_0xED4B () {  
    uint16_t local_address;
    
    local_address = (Fetch_byte() | (Fetch_byte()<<8));

    register_c   = Read_byte(local_address);
    register_b   = Read_byte(local_address+1);
    
return;  }

void opcode_0xED5B () {  
    uint16_t local_address;
    
    local_address = (Fetch_byte() | (Fetch_byte()<<8));

    register_e   = Read_byte(local_address);
    register_d   = Read_byte(local_address+1);
    
return;  }

void opcode_0xED6B () {  
    uint16_t local_address;
    
    local_address = (Fetch_byte() | (Fetch_byte()<<8));

    register_l   = Read_byte(local_address);
    register_h   = Read_byte(local_address+1);
    
return;  }

void opcode_0xED7B () {  
    uint16_t local_address;
    
    local_address = (Fetch_byte() | (Fetch_byte()<<8));

    register_sp   = Read_word(local_address);
    
return;  }
    
void opcode_0xED47 () {  register_i = register_a;  return;  }                   // ld i, a

void opcode_0xED57 () {  register_a = register_i;                               // ld a, i
                         register_f = register_f & 0x29;                        // Clear S, Z, H, P, N flags
                         if (register_iff2) register_f=register_f|0x04;         // Set P flag
                         register_f = register_f | (register_a&0x80);           // Set S flag
                         if (register_a==0)  register_f = register_f | 0x40;    // Set Z flag                        
                         return;  } 

void opcode_0xED4F () {  register_r = register_a;  return;  }

void opcode_0xED5F () {  register_a = register_r; 
                         register_f = register_f & 0x29;                        // Clear S, Z, H, P, N flags
                         if (register_iff2) register_f=register_f|0x04;         // Set P flag
                         register_f = register_f | (register_a&0x80);           // Set S flag
                         if (register_a==0)  register_f = register_f | 0x40;    // Set Z flag                        
                         return;  } 

// ------------------------------------------------------
// Boolean
// ------------------------------------------------------
void Flags_Boolean() {
    register_f = register_f & 0x00;                         // Clear S, Z, H, P, N, C flags
    if (and_opcode==1) register_f = register_f | 0x10;      // Set H flag
    register_f = register_f | Parity_Array[register_a];     // Set P flag
    register_f = register_f | (register_a&0x80);            // Set S flag
    if (register_a==0)  register_f = register_f | 0x40;     // Set Z flag
    register_f = register_f | (register_a&0x28);            // Set flag bits 5,3 to ALU results
    and_opcode=0;
    return;
}
        
void opcode_0xA0 () {  register_a=(register_a & register_b);      and_opcode=1; Flags_Boolean();  return;  }  // and b
void opcode_0xA1 () {  register_a=(register_a & register_c);      and_opcode=1; Flags_Boolean();  return;  }  // and c
void opcode_0xA2 () {  register_a=(register_a & register_d);      and_opcode=1; Flags_Boolean();  return;  }  // and d
void opcode_0xA3 () {  register_a=(register_a & register_e);      and_opcode=1; Flags_Boolean();  return;  }  // and e
void opcode_0xA4 () {  if (prefix_dd==1) register_a=(register_a & register_ixh);  else                        // and h , ixh, iyh            
                       if (prefix_fd==1) register_a=(register_a & register_iyh);  else              
                                         register_a=(register_a & register_h); 
                       and_opcode=1; Flags_Boolean();  return;  }  
void opcode_0xA5 () {  if (prefix_dd==1) register_a=(register_a & register_ixl);  else                        // and l , ixl, iyl            
                       if (prefix_fd==1) register_a=(register_a & register_iyl);  else              
                                         register_a=(register_a & register_l); 
                       and_opcode=1; Flags_Boolean();  return;  }  
void opcode_0xA6 () {  if (prefix_dd==1) register_a=(register_a & Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) ));  else      // and (hl) , ix+*, iy+*            
                       if (prefix_fd==1) register_a=(register_a & Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) ));  else             
                                         register_a=(register_a & Read_byte(REGISTER_HL)); 
                       and_opcode=1; Flags_Boolean();  return;  }                        
void opcode_0xA7 () {  register_a=(register_a & register_a);       and_opcode=1; Flags_Boolean();  return;  }  // and a
void opcode_0xE6 () {  register_a=(register_a & Fetch_byte());     and_opcode=1;        Flags_Boolean();  return;  }  // and *
        
// ----
        
void opcode_0xA8 () {  register_a=(register_a ^ register_b);                Flags_Boolean();  return;  }  // xor b
void opcode_0xA9 () {  register_a=(register_a ^ register_c);                Flags_Boolean();  return;  }  // xor c
void opcode_0xAA () {  register_a=(register_a ^ register_d);                Flags_Boolean();  return;  }  // xor d
void opcode_0xAB () {  register_a=(register_a ^ register_e);                Flags_Boolean();  return;  }  // xor e
void opcode_0xAC () {  if (prefix_dd==1) register_a=(register_a ^ register_ixh);  else                    // xor h , ixh, iyh            
                       if (prefix_fd==1) register_a=(register_a ^ register_iyh);  else              
                                         register_a=(register_a ^ register_h); 
                       Flags_Boolean();  return;  }  
void opcode_0xAD () {  if (prefix_dd==1) register_a=(register_a ^ register_ixl);  else                    // xor l , ixl, iyl            
                       if (prefix_fd==1) register_a=(register_a ^ register_iyl);  else              
                                         register_a=(register_a ^ register_l); 
                       Flags_Boolean();  return;  }  
void opcode_0xAE () {  if (prefix_dd==1) register_a=(register_a ^ Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) ));  else      // xor (hl) , ix+*, iy+*            
                       if (prefix_fd==1) register_a=(register_a ^ Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) ));  else             
                                         register_a=(register_a ^ Read_byte(REGISTER_HL)); 
                       Flags_Boolean();  return;  }  
void opcode_0xAF () {  register_a=(register_a ^ register_a);                Flags_Boolean();  return;  }  // xor a
void opcode_0xEE () {  register_a=(register_a ^ Fetch_byte());            Flags_Boolean();  return;  }  // xor *
        
// ----
    
void opcode_0xB0 () {  register_a=(register_a | register_b);                Flags_Boolean();  return;  }  // or b
void opcode_0xB1 () {  register_a=(register_a | register_c);                Flags_Boolean();  return;  }  // or c
void opcode_0xB2 () {  register_a=(register_a | register_d);                Flags_Boolean();  return;  }  // or d
void opcode_0xB3 () {  register_a=(register_a | register_e);                Flags_Boolean();  return;  }  // or e
void opcode_0xB4 () {  if (prefix_dd==1) register_a=(register_a | register_ixh);  else                    // or h , ixh, iyh            
                       if (prefix_fd==1) register_a=(register_a | register_iyh);  else              
                                         register_a=(register_a | register_h); 
                       Flags_Boolean();  return;  }  
void opcode_0xB5 () {  if (prefix_dd==1) register_a=(register_a | register_ixl);  else                    // or l , ixl, iyl            
                       if (prefix_fd==1) register_a=(register_a | register_iyl);  else              
                                         register_a=(register_a | register_l); 
                       Flags_Boolean();  return;  }  
void opcode_0xB6 () {  if (prefix_dd==1) register_a=(register_a | Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()) ));  else      // or (hl) , ix+*, iy+*            
                       if (prefix_fd==1) register_a=(register_a | Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()) ));  else             
                                         register_a=(register_a | Read_byte(REGISTER_HL)); 
                       Flags_Boolean();  return;  }  
void opcode_0xB7 () {  register_a=(register_a | register_a);                Flags_Boolean();  return;  }  // or a
void opcode_0xF6 () {  register_a=(register_a | Fetch_byte());            Flags_Boolean();  return;  }  // or *

// ------------------------------------------------------
// Addition for bytes
// ------------------------------------------------------
uint8_t ADD_Bytes(uint8_t local_data1 , uint8_t local_data2)  {
    uint8_t   local_nibble_results;
    uint16_t  local_byte_results;
    uint16_t  operand0=0;
    uint16_t  operand1=0;
    uint16_t  result=0;
    uint8_t   local_cf=0;  
    
    local_cf=(flag_c);
    
    
    register_f = register_f & 0x01;                                                                     // Clear S, Z, H, V, N flags

    if (with_carry==1) {  local_nibble_results = (0x0F&local_data1) + (0x0F&local_data2) + local_cf;    // Perform the nibble math
                          local_byte_results   = local_data1 + local_data2 + local_cf;                  // Perform the byte math 
    }
    else               {  local_nibble_results = (0x0F&local_data1) + (0x0F&local_data2);               // Perform the nibble math
                          local_byte_results   = local_data1 + local_data2;                             // Perform the byte math 
    }

    if (local_nibble_results > 0x0F)                 register_f = (register_f | 0x10);                  // Set H Flag
    if ( inc_dec==0 )  {  if (local_byte_results > 0xFF)  register_f = (register_f | 0x01); else register_f = (register_f & 0xFE);  }                  // Set C Flag if not INC or DEC opcodes
    inc_dec = 0;                                                                                        // Debounce inc_dec

    operand0 = (local_data1         & 0x0080);  
    operand1 = (local_data2         & 0x0080);  
    result   = (local_byte_results  & 0x0080);   
    if      (operand0==0 && operand1==0 && result!=0)  register_f = (register_f | 0x04);                // Set V Flag
    else if (operand0!=0 && operand1!=0 && result==0)  register_f = (register_f | 0x04);       
    
    register_f = register_f | (local_byte_results&0x80);                                                // Set S flag
    if ((0xFF&local_byte_results)==0)  register_f = register_f | 0x40;                                  // Set Z flag
    register_f = register_f | (local_byte_results&0x28);            // Set flag bits 5,3 to ALU results
    with_carry=0;
        
    return local_byte_results;
}

// ------------------------------------------------------
// Addition for words  
// ------------------------------------------------------
uint16_t ADD_Words(uint16_t local_data1 , uint16_t local_data2)  {
    uint16_t  local_nibble_results;
    uint32_t  local_word_results;
    uint8_t   local_cf=0;  
    
    local_cf=(flag_c);
    
    register_f = register_f & 0xC5;                                                                     // Clear H, N flags

    
    if (with_carry==1) {  local_nibble_results = (0x0FFF&local_data1) + (0x0FFF&local_data2) + local_cf;    // Perform the nibble math
                          local_word_results   = local_data1 + local_data2 + local_cf;                  // Perform the word math 
    }
    else               {  local_nibble_results = (0x0FFF&local_data1) + (0x0FFF&local_data2);               // Perform the nibble math
                          local_word_results   = local_data1 + local_data2;                             // Perform the word math 
    }


    if (local_nibble_results > 0x0FFF)                 register_f = (register_f | 0x10);                 // Set H Flag
    if ( inc_dec==0 )  {  if (local_word_results > 0xFFFF)  register_f = (register_f | 0x01); else register_f = (register_f & 0xFE);  }                  // Set C Flag if not INC or DEC opcodes
    register_f = register_f | ((local_word_results>>8)&0x28);            // Set flag bits 5,3 to ALU results
    inc_dec = 0;                                                                                        // Debounce inc_dec
    with_carry=0;

    return local_word_results;
}

// ------------------------------------------------------
// Addition for words2 - Sets all flags
// ------------------------------------------------------
uint16_t ADD_Words2(uint16_t local_data1 , uint16_t local_data2)  {
    uint16_t   local_nibble_results;
    uint32_t  local_word_results;
    uint16_t  operand0=0;
    uint16_t  operand1=0;
    uint16_t  result=0;
    uint8_t   local_cf=0;  
    
    local_cf=(flag_c);
    
    register_f = register_f & 0x01;                                                                     // Clear S, Z, H, V, N flags

    
    if (with_carry==1) {  local_nibble_results = (0x0FFF&local_data1) + (0x0FFF&local_data2) + local_cf;    // Perform the nibble math
                          local_word_results   = local_data1 + local_data2 + local_cf;                  // Perform the word math 
    }
    else               {  local_nibble_results = (0x0FFF&local_data1) + (0x0FFF&local_data2);               // Perform the nibble math
                          local_word_results   = local_data1 + local_data2;                             // Perform the word math 
    }


    if (local_nibble_results > 0x0FFF)                 register_f = (register_f | 0x10);                 // Set H Flag
    if ( inc_dec==0 )  {  if (local_word_results > 0xFFFF)  register_f = (register_f | 0x01); else register_f = (register_f & 0xFE);  }                  // Set C Flag if not INC or DEC opcodes
    inc_dec = 0;                                                                                         // Debounce inc_dec


    operand0 = (local_data1         & 0x8000);  
    operand1 = (local_data2         & 0x8000);  
    result   = (local_word_results  & 0x8000); 
    if      (operand0==0 && operand1==0 && result!=0)  register_f = (register_f | 0x04);              // Set V Flag
    else if (operand0!=0 && operand1!=0 && result==0)  register_f = (register_f | 0x04);       
    
    if (local_word_results&0x8000)register_f = register_f | 0x80;                                       // Set S flag
    if (local_word_results==0)    register_f = register_f | 0x40;                                       // Set Z flag
    register_f = register_f | ((local_word_results>>8)&0x28);            // Set flag bits 5,3 to ALU results
    with_carry=0;

    return local_word_results;
}

// ------------------------------------------------------
// Subtraction for bytes
// ------------------------------------------------------
uint8_t SUB_Bytes(uint8_t local_data1 , uint8_t local_data2)  {
    uint8_t   local_nibble_results;
    uint16_t  local_byte_results;
    uint16_t  operand0=0;
    uint16_t  operand1=0;
    uint16_t  result=0;
    uint8_t   local_cf=0;  
    
    local_cf=(flag_c);
    
    register_f = register_f & 0x01;                                                                     // Clear S, Z, H, V, N flags
    
    if (with_carry==1) {  local_nibble_results = (0x0F&local_data1) - (0x0F&local_data2) - local_cf;    // Perform the nibble math
                          local_byte_results   = local_data1 - local_data2 - local_cf;                  // Perform the byte math 
    }
    else               {  local_nibble_results = (0x0F&local_data1) - (0x0F&local_data2);               // Perform the nibble math
                          local_byte_results   = local_data1 - local_data2;                             // Perform the byte math 
    }

    if (local_nibble_results > 0x0F)                 register_f = (register_f | 0x10);                  // Set H Flag
    if ( inc_dec==0 )  {  if (local_byte_results > 0xFF)  register_f = (register_f | 0x01); else register_f = (register_f & 0xFE);  }                  // Set C Flag if not INC or DEC opcodes
    inc_dec = 0;                                                                                        // Debounce inc_dec

    operand0 = (local_data1         & 0x0080);  
    operand1 = (local_data2         & 0x0080);  
    result   = (local_byte_results  & 0x0080); 
    if      (operand0==0 && operand1!=0 && result!=0)  register_f = (register_f | 0x04);              // Set V Flag
    else if (operand0!=0 && operand1==0 && result==0)  register_f = (register_f | 0x04);       
    
    register_f = register_f | (local_byte_results&0x80);                                                // Set S flag
    if ((0xFF&local_byte_results)==0)  register_f = register_f | 0x40;                                  // Set Z flag
    register_f = register_f | 0x02;                                                                     // Set N flag always for subtraction  
    if (cp_opcode==0) register_f = register_f | (local_byte_results&0x28);   else          // Set flag bits 5,3 to ALU results
                      register_f = register_f | (local_data2&0x28);             // Set flag bits 5,3 to ALU results
    with_carry=0;
    cp_opcode=0;

    return local_byte_results;
}

// ------------------------------------------------------
// Subtraction for words
// ------------------------------------------------------
uint16_t SUB_Words(uint16_t local_data1 , uint16_t local_data2)  {
    uint16_t   local_nibble_results;
    uint32_t  local_word_results;
    uint16_t  operand0=0;
    uint16_t  operand1=0;
    uint16_t  result=0;
    uint8_t   local_cf=0;  
    
    local_cf=(flag_c);
    
    register_f = register_f & 0x01;                                                                     // Clear S, Z, H, V, N flags
    
    if (with_carry==1) {  local_nibble_results = (0x0FFF&local_data1) - (0x0FFF&local_data2) - local_cf;    // Perform the nibble math
                          local_word_results   = local_data1 - local_data2 - local_cf;                  // Perform the word math 
    }
    else               {  local_nibble_results = (0x0FFF&local_data1) - (0x0FFF&local_data2);               // Perform the nibble math
                          local_word_results   = local_data1 - local_data2;                             // Perform the word math 
    }

    if (local_nibble_results > 0x0FFF)                   register_f = (register_f | 0x10);                // Set H Flag
    if ( inc_dec==0 )  {  if (local_word_results > 0xFFFF)  register_f = (register_f | 0x01); else register_f = (register_f & 0xFE);  }                  // Set C Flag if not INC or DEC opcodes
    inc_dec = 0;                                                                                        // Debounce inc_dec

    operand0 = (local_data1         & 0x8000);  
    operand1 = (local_data2         & 0x8000);  
    result   = (local_word_results  & 0x8000); 
    if      (operand0==0 && operand1!=0 && result!=0)  register_f = (register_f | 0x04);              // Set V Flag
    else if (operand0!=0 && operand1==0 && result==0)  register_f = (register_f | 0x04);       

    if (local_word_results&0x8000)register_f = register_f | 0x80;                                       // Set S flag
    if (local_word_results==0)    register_f = register_f | 0x40;                                       // Set Z flag
    register_f = register_f | 0x02;                                                                     // Set N flag always for subtraction
    register_f = register_f | ((local_word_results>>8)&0x28);            // Set flag bits 5,3 to ALU results
    with_carry=0;

    return local_word_results;
}

void opcode_0x09 () {  if (prefix_dd==1)  Writeback_Reg16(REG_IX , ADD_Words(REGISTER_IX , REGISTER_BC) );  else        // add ix,bc
                       if (prefix_fd==1)  Writeback_Reg16(REG_IY , ADD_Words(REGISTER_IY , REGISTER_BC) );  else        // add iy,bc
                                          Writeback_Reg16(REG_HL , ADD_Words(REGISTER_HL , REGISTER_BC) );  return; }   // add hl,bc
                                             
void opcode_0x19 () {  if (prefix_dd==1)  Writeback_Reg16(REG_IX , ADD_Words(REGISTER_IX , REGISTER_DE) );  else        // add ix,de
                       if (prefix_fd==1)  Writeback_Reg16(REG_IY , ADD_Words(REGISTER_IY , REGISTER_DE) );  else        // add iy,de
                                          Writeback_Reg16(REG_HL , ADD_Words(REGISTER_HL , REGISTER_DE) );  return; }   // add hl,de
                                         
void opcode_0x29 () {  if (prefix_dd==1)  Writeback_Reg16(REG_IX , ADD_Words(REGISTER_IX , REGISTER_IX) );  else        // add ix,ix
                       if (prefix_fd==1)  Writeback_Reg16(REG_IY , ADD_Words(REGISTER_IY , REGISTER_IY) );  else        // add iy,iy
                                          Writeback_Reg16(REG_HL , ADD_Words(REGISTER_HL , REGISTER_HL) );  return; }   // add hl,hl
                                         
void opcode_0x39 () {  if (prefix_dd==1)  Writeback_Reg16(REG_IX , ADD_Words(REGISTER_IX , register_sp) );  else        // add ix,sp
                       if (prefix_fd==1)  Writeback_Reg16(REG_IY , ADD_Words(REGISTER_IY , register_sp) );  else        // add iy,sp
                                          Writeback_Reg16(REG_HL , ADD_Words(REGISTER_HL , register_sp) );  return; }   // add hl,sp
                                         
void opcode_0xC6 () {  register_a = ADD_Bytes(register_a , Fetch_byte() );                     return; }   // add a,*
void opcode_0x87 () {  register_a = ADD_Bytes(register_a , register_a);                          return; }   // add a,a
void opcode_0x80 () {  register_a = ADD_Bytes(register_a , register_b);                          return; }   // add a,b
void opcode_0x81 () {  register_a = ADD_Bytes(register_a , register_c);                          return; }   // add a,c
void opcode_0x82 () {  register_a = ADD_Bytes(register_a , register_d);                          return; }   // add a,d
void opcode_0x83 () {  register_a = ADD_Bytes(register_a , register_e);                          return; }   // add a,e

void opcode_0x84 () {  if (prefix_dd==1) { register_a = ADD_Bytes(register_a , register_ixh); }  else        // add a, h/ixh/iyh
                       if (prefix_fd==1) { register_a = ADD_Bytes(register_a , register_iyh); }  else
                                         { register_a = ADD_Bytes(register_a , register_h);   }  return; }        

void opcode_0x85 () {  if (prefix_dd==1) { register_a = ADD_Bytes(register_a , register_ixl); }  else        // add a, l/ixl/iyl
                       if (prefix_fd==1) { register_a = ADD_Bytes(register_a , register_iyl); }  else
                                         { register_a = ADD_Bytes(register_a , register_l);   }  return; }        

void opcode_0x86 () {  if (prefix_dd==1) { register_a = ADD_Bytes(register_a , Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()))); }  else     // add a, (hl)/(ix+*)/(iy+*)
                       if (prefix_fd==1) { register_a = ADD_Bytes(register_a , Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()))); }  else
                                         { register_a = ADD_Bytes(register_a , Read_byte(REGISTER_HL));   }  return; }        


void opcode_0xED4A() { with_carry=1; Writeback_Reg16(REG_HL , ADD_Words2(REGISTER_HL , REGISTER_BC) );          return; }   // adc hl,bc
void opcode_0xED5A() { with_carry=1; Writeback_Reg16(REG_HL , ADD_Words2(REGISTER_HL , REGISTER_DE) );          return; }   // adc hl,de
void opcode_0xED6A() { with_carry=1; Writeback_Reg16(REG_HL , ADD_Words2(REGISTER_HL , REGISTER_HL) );          return; }   // adc hl,hl
void opcode_0xED7A() { with_carry=1; Writeback_Reg16(REG_HL , ADD_Words2(REGISTER_HL , register_sp) );          return; }   // adc hl,sp

void opcode_0xCE () {  with_carry=1; register_a = ADD_Bytes(register_a , Fetch_byte() );                     return; }   // adc *
void opcode_0x8F () {  with_carry=1; register_a = ADD_Bytes(register_a , register_a);                          return; }   // adc a,a
void opcode_0x88 () {  with_carry=1; register_a = ADD_Bytes(register_a , register_b);                          return; }   // adc a,b
void opcode_0x89 () {  with_carry=1; register_a = ADD_Bytes(register_a , register_c);                          return; }   // adc a,c
void opcode_0x8A () {  with_carry=1; register_a = ADD_Bytes(register_a , register_d);                          return; }   // adc a,d
void opcode_0x8B () {  with_carry=1; register_a = ADD_Bytes(register_a , register_e);                          return; }   // adc a,e

void opcode_0x8C () {  if (prefix_dd==1) { with_carry=1; register_a = ADD_Bytes(register_a , register_ixh); }  else        // adc a, h/ixh/iyh
                       if (prefix_fd==1) { with_carry=1; register_a = ADD_Bytes(register_a , register_iyh); }  else
                                         { with_carry=1; register_a = ADD_Bytes(register_a , register_h);   }  return; }        

void opcode_0x8D () {  if (prefix_dd==1) { with_carry=1; register_a = ADD_Bytes(register_a , register_ixl); }  else        // adc a, l/ixl/iyl
                       if (prefix_fd==1) { with_carry=1; register_a = ADD_Bytes(register_a , register_iyl); }  else
                                         { with_carry=1; register_a = ADD_Bytes(register_a , register_l);   }  return; }        

void opcode_0x8E () {  if (prefix_dd==1) { with_carry=1; register_a = ADD_Bytes(register_a , Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()))); }  else     // adc a, (hl)/(ix+*)/(iy+*)
                       if (prefix_fd==1) { with_carry=1; register_a = ADD_Bytes(register_a , Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()))); }  else
                                         { with_carry=1; register_a = ADD_Bytes(register_a , Read_byte(REGISTER_HL));   }  return; }        

void opcode_0xED44(){  register_a = SUB_Bytes(0 , register_a);                                   return; }    // neg a
void opcode_0xD6 () {  register_a = SUB_Bytes(register_a , Fetch_byte() );                     return; }    // sub a,*
void opcode_0x97 () {  register_a = SUB_Bytes(register_a , register_a);                          return; }    // sub a,a
void opcode_0x90 () {  register_a = SUB_Bytes(register_a , register_b);                          return; }    // sub a,b
void opcode_0x91 () {  register_a = SUB_Bytes(register_a , register_c);                          return; }    // sub a,c
void opcode_0x92 () {  register_a = SUB_Bytes(register_a , register_d);                          return; }    // sub a,d
void opcode_0x93 () {  register_a = SUB_Bytes(register_a , register_e);                          return; }    // sub a,e

void opcode_0x94 () {  if (prefix_dd==1) { register_a = SUB_Bytes(register_a , register_ixh); }  else         // sub a, h/ixh/iyh
                       if (prefix_fd==1) { register_a = SUB_Bytes(register_a , register_iyh); }  else
                                         { register_a = SUB_Bytes(register_a , register_h);   }  return; }        

void opcode_0x95 () {  if (prefix_dd==1) { register_a = SUB_Bytes(register_a , register_ixl); }  else         // sub a, l/ixl/iyl
                       if (prefix_fd==1) { register_a = SUB_Bytes(register_a , register_iyl); }  else
                                         { register_a = SUB_Bytes(register_a , register_l);   }  return; }        

void opcode_0x96 () {  if (prefix_dd==1) { register_a = SUB_Bytes(register_a , Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()))); }  else     // sub a, (hl)/(ix+*)/(iy+*)
                       if (prefix_fd==1) { register_a = SUB_Bytes(register_a , Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()))); }  else
                                         { register_a = SUB_Bytes(register_a , Read_byte(REGISTER_HL));   }  return; }        

void opcode_0xED42() { with_carry=1; Writeback_Reg16(REG_HL , SUB_Words(REGISTER_HL , REGISTER_BC) );          return; }   // sbc hl,bc
void opcode_0xED52() { with_carry=1; Writeback_Reg16(REG_HL , SUB_Words(REGISTER_HL , REGISTER_DE) );          return; }   // sbc hl,de
void opcode_0xED62() { with_carry=1; Writeback_Reg16(REG_HL , SUB_Words(REGISTER_HL , REGISTER_HL) );          return; }   // sbc hl,hl
void opcode_0xED72() { with_carry=1; Writeback_Reg16(REG_HL , SUB_Words(REGISTER_HL , register_sp) );          return; }   // sbc hl,sp

void opcode_0xDE () {  with_carry=1; register_a = SUB_Bytes(register_a , Fetch_byte() );                     return; }    // sbc a,*
void opcode_0x9F () {  with_carry=1; register_a = SUB_Bytes(register_a , register_a);                          return; }    // sbc a,a
void opcode_0x98 () {  with_carry=1; register_a = SUB_Bytes(register_a , register_b);                          return; }    // sbc a,b
void opcode_0x99 () {  with_carry=1; register_a = SUB_Bytes(register_a , register_c);                          return; }    // sbc a,c
void opcode_0x9A () {  with_carry=1; register_a = SUB_Bytes(register_a , register_d);                          return; }    // sbc a,d
void opcode_0x9B () {  with_carry=1; register_a = SUB_Bytes(register_a , register_e);                          return; }    // sbc a,e

void opcode_0x9C () {  if (prefix_dd==1) { with_carry=1; register_a = SUB_Bytes(register_a , register_ixh); }  else         // sbc a, h/ixh/iyh
                       if (prefix_fd==1) { with_carry=1; register_a = SUB_Bytes(register_a , register_iyh); }  else
                                         { with_carry=1; register_a = SUB_Bytes(register_a , register_h);   }  return; }        

void opcode_0x9D () {  if (prefix_dd==1) { with_carry=1; register_a = SUB_Bytes(register_a , register_ixl); }  else         // sbc a, l/ixl/iyl
                       if (prefix_fd==1) { with_carry=1; register_a = SUB_Bytes(register_a , register_iyl); }  else
                                         { with_carry=1; register_a = SUB_Bytes(register_a , register_l);   }  return; }        

void opcode_0x9E () {  if (prefix_dd==1) { with_carry=1; register_a = SUB_Bytes(register_a , Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()))); }  else     // sbc a, (hl)/(ix+*)/(iy+*)
                       if (prefix_fd==1) { with_carry=1; register_a = SUB_Bytes(register_a , Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()))); }  else
                                         { with_carry=1; register_a = SUB_Bytes(register_a , Read_byte(REGISTER_HL));   }  return; }        

void opcode_0xFE () {  cp_opcode=1; SUB_Bytes(register_a , Fetch_byte() );                     return; }    // cp * 
void opcode_0xBF () {  cp_opcode=1; SUB_Bytes(register_a , register_a);                          return; }    // cp a,a
void opcode_0xB8 () {  cp_opcode=1; SUB_Bytes(register_a , register_b);                          return; }    // cp a,b
void opcode_0xB9 () {  cp_opcode=1; SUB_Bytes(register_a , register_c);                          return; }    // cp a,c
void opcode_0xBA () {  cp_opcode=1; SUB_Bytes(register_a , register_d);                          return; }    // cp a,d
void opcode_0xBB () {  cp_opcode=1; SUB_Bytes(register_a , register_e);                          return; }    // cp a,e
     
void opcode_0xBC () {  if (prefix_dd==1) { cp_opcode=1; SUB_Bytes(register_a , register_ixh); }  else         // cp a, h/ixh/iyh
                       if (prefix_fd==1) { cp_opcode=1; SUB_Bytes(register_a , register_iyh); }  else
                                         { cp_opcode=1; SUB_Bytes(register_a , register_h);   }  return; }        
     
void opcode_0xBD () {  if (prefix_dd==1) { cp_opcode=1; SUB_Bytes(register_a , register_ixl); }  else         // cp a, l/ixl/iyl
                       if (prefix_fd==1) { cp_opcode=1; SUB_Bytes(register_a , register_iyl); }  else
                                         { cp_opcode=1; SUB_Bytes(register_a , register_l);   }  return; }        
     
void opcode_0xBE () {  if (prefix_dd==1) { cp_opcode=1; SUB_Bytes(register_a , Read_byte(REGISTER_IX + Sign_Extend(Fetch_byte()))); }  else     // cp a, (hl)/(ix+*)/(iy+*)
                       if (prefix_fd==1) { cp_opcode=1; SUB_Bytes(register_a , Read_byte(REGISTER_IY + Sign_Extend(Fetch_byte()))); }  else
                                         { cp_opcode=1; SUB_Bytes(register_a , Read_byte(REGISTER_HL));   }  return; }        

void opcode_0x33 () {  register_sp++;                                                        return;  }  // inc sp
void opcode_0x03 () {  Writeback_Reg16(REG_BC , (REGISTER_BC) + 1);                          return;  }  // inc bc
void opcode_0x13 () {  Writeback_Reg16(REG_DE , (REGISTER_DE) + 1);                          return;  }  // inc de
void opcode_0x23 () {  if (prefix_dd==1) { Writeback_Reg16(REG_IX , (REGISTER_IX) + 1);  }   else        // inc hl
                       if (prefix_fd==1) { Writeback_Reg16(REG_IY , (REGISTER_IY) + 1);  }   else  
                                         { Writeback_Reg16(REG_HL , (REGISTER_HL) + 1);  }   return;    }

void opcode_0x3C () {  inc_dec=1;  register_a = ADD_Bytes(register_a , 0x1);                              return;  }  // inc a
void opcode_0x04 () {  inc_dec=1;  register_b = ADD_Bytes(register_b , 0x1);                              return;  }  // inc b
void opcode_0x0C () {  inc_dec=1;  register_c = ADD_Bytes(register_c , 0x1);                              return;  }  // inc c
void opcode_0x14 () {  inc_dec=1;  register_d = ADD_Bytes(register_d , 0x1);                              return;  }  // inc d
void opcode_0x1C () {  inc_dec=1;  register_e = ADD_Bytes(register_e , 0x1);                              return;  }  // inc e

void opcode_0x24 () {  inc_dec=1; if (prefix_dd==1) {register_ixh=ADD_Bytes(register_ixh , 0x1);  }   else        // inc ixh, iyh, h
                                  if (prefix_fd==1) { register_iyh=ADD_Bytes(register_iyh , 0x1);  }   else  
                                                    { register_h=ADD_Bytes(register_h   , 0x1);  }   return;    }

void opcode_0x2C () {  inc_dec=1; if (prefix_dd==1) { register_ixl=ADD_Bytes(register_ixl , 0x1);  }   else        // inc ixl, iyl, l
                                  if (prefix_fd==1) { register_iyl=ADD_Bytes(register_iyl , 0x1);  }   else  
                                                    { register_l=ADD_Bytes(register_l   , 0x1);  }   return;    }
                                                    
void opcode_0x34 () {  inc_dec=1; if (prefix_dd==1) { temp16=REGISTER_IX + Sign_Extend(Fetch_byte()); Write_byte(temp16 , ADD_Bytes(Read_byte(temp16),0x1));  }   else        // inc ix+*, iy+*, (hl)
                                  if (prefix_fd==1) { temp16=REGISTER_IY + Sign_Extend(Fetch_byte()); Write_byte(temp16 , ADD_Bytes(Read_byte(temp16),0x1));  }   else  
                                                    { Write_byte(REGISTER_HL , ADD_Bytes(Read_byte(REGISTER_HL),0x1) );  }   return;    }
                                                    
// -----------

void opcode_0x3B () {  register_sp--;                                                        return;  }  // dec sp
void opcode_0x0B () {  Writeback_Reg16(REG_BC , (REGISTER_BC) - 1);                          return;  }  // dec bc
void opcode_0x1B () {  Writeback_Reg16(REG_DE , (REGISTER_DE) - 1);                          return;  }  // dec de
void opcode_0x2B () {  if (prefix_dd==1) { Writeback_Reg16(REG_IX , (REGISTER_IX) - 1);  }   else        // dec hl
                       if (prefix_fd==1) { Writeback_Reg16(REG_IY , (REGISTER_IY) - 1);  }   else  
                                         { Writeback_Reg16(REG_HL , (REGISTER_HL) - 1);  }   return;    }

// -----------

void opcode_0x3D () {  inc_dec=1;  register_a = SUB_Bytes(register_a , 0x1);                              return;  }  // dec a
void opcode_0x05 () {  inc_dec=1;  register_b = SUB_Bytes(register_b , 0x1);                              return;  }  // dec b
void opcode_0x0D () {  inc_dec=1;  register_c = SUB_Bytes(register_c , 0x1);                              return;  }  // dec c
void opcode_0x15 () {  inc_dec=1;  register_d = SUB_Bytes(register_d , 0x1);                              return;  }  // dec d
void opcode_0x1D () {  inc_dec=1;  register_e = SUB_Bytes(register_e , 0x1);                              return;  }  // dec e

void opcode_0x25 () {  inc_dec=1; if (prefix_dd==1) { register_ixh=SUB_Bytes(register_ixh , 0x1);  }   else        // dec ixh, iyh, h
                                  if (prefix_fd==1) { register_iyh=SUB_Bytes(register_iyh , 0x1);  }   else  
                                                    { register_h=SUB_Bytes(register_h   , 0x1);  }   return;    }

void opcode_0x2D () {  inc_dec=1; if (prefix_dd==1) { register_ixl=SUB_Bytes(register_ixl , 0x1);  }   else        // dec ixl, iyl, l
                                  if (prefix_fd==1) { register_iyl=SUB_Bytes(register_iyl , 0x1);  }   else  
                                                    { register_l=SUB_Bytes(register_l   , 0x1);  }   return;    }
                                                    
void opcode_0x35 () {  inc_dec=1; if (prefix_dd==1) { temp16=REGISTER_IX + Sign_Extend(Fetch_byte()); Write_byte(temp16 , SUB_Bytes(Read_byte(temp16),0x1));  }   else        // dec ix+*, iy+*, (hl)
                                  if (prefix_fd==1) { temp16=REGISTER_IY + Sign_Extend(Fetch_byte()); Write_byte(temp16 , SUB_Bytes(Read_byte(temp16),0x1));  }   else  
                                                    { Write_byte(REGISTER_HL , SUB_Bytes(Read_byte(REGISTER_HL),0x1) );  }   return;    }
                                                    
// ------------------------------------------------------
// Input and Output
// ------------------------------------------------------
void Flags_IO(uint8_t local_data) {
    
    register_f = register_f & 0x29;                         // Clear S, Z, H, P, N flags
    register_f = register_f | Parity_Array[local_data];     // Set P flag
    register_f = register_f | (local_data&0x80);            // Set S flag
    if (local_data==0)  register_f = register_f | 0x40;     // Set Z flag
    return;
}
void opcode_0xDB()   {  register_a = BIU_Bus_Cycle(IO_READ_BYTE , Fetch_byte()  , 0x00 );                        return;    }     // in a,(*)
void opcode_0xED78() {  register_a = BIU_Bus_Cycle(IO_READ_BYTE , register_c      , 0x00 ); Flags_IO(register_a);  return;    }     // in a,(c)
void opcode_0xED40() {  register_b = BIU_Bus_Cycle(IO_READ_BYTE , register_c      , 0x00 ); Flags_IO(register_b);  return;    }     // in b,(c)
void opcode_0xED48() {  register_c = BIU_Bus_Cycle(IO_READ_BYTE , register_c      , 0x00 ); Flags_IO(register_c);  return;    }     // in c,(c)
void opcode_0xED50() {  register_d = BIU_Bus_Cycle(IO_READ_BYTE , register_c      , 0x00 ); Flags_IO(register_d);  return;    }     // in d,(c)
void opcode_0xED58() {  register_e = BIU_Bus_Cycle(IO_READ_BYTE , register_c      , 0x00 ); Flags_IO(register_e);  return;    }     // in e,(c)
void opcode_0xED60() {  register_h = BIU_Bus_Cycle(IO_READ_BYTE , register_c      , 0x00 ); Flags_IO(register_h);  return;    }     // in h,(c)
void opcode_0xED68() {  register_l = BIU_Bus_Cycle(IO_READ_BYTE , register_c      , 0x00 ); Flags_IO(register_l);  return;    }     // in l,(c)
void opcode_0xED70() {  temp8      = BIU_Bus_Cycle(IO_READ_BYTE , register_c      , 0x00 ); Flags_IO(temp8);       return;    }     // in(c)

void opcode_0xD3()     {  BIU_Bus_Cycle(IO_WRITE_BYTE , Fetch_byte() ,            register_a );   return;    }     // out (*),a
void opcode_0xED79()   {  BIU_Bus_Cycle(IO_WRITE_BYTE , register_c ,                register_a );   return;    }     // out (c),a
void opcode_0xED41()   {  BIU_Bus_Cycle(IO_WRITE_BYTE , register_c ,                register_b );   return;    }     // out (c),b
void opcode_0xED49()   {  BIU_Bus_Cycle(IO_WRITE_BYTE , register_c ,                register_c );   return;    }     // out (c),c
void opcode_0xED51()   {  BIU_Bus_Cycle(IO_WRITE_BYTE , register_c ,                register_d );   return;    }     // out (c),d
void opcode_0xED59()   {  BIU_Bus_Cycle(IO_WRITE_BYTE , register_c ,                register_e );   return;    }     // out (c),e
void opcode_0xED61()   {  BIU_Bus_Cycle(IO_WRITE_BYTE , register_c ,                register_h );   return;    }     // out (c),h
void opcode_0xED69()   {  BIU_Bus_Cycle(IO_WRITE_BYTE , register_c ,                register_l );   return;    }     // out (c),l
void opcode_0xED71()   {  BIU_Bus_Cycle(IO_WRITE_BYTE , register_c ,                       0x0 );   return;    }     // out (c),0x0
        
// ------------------------------------------------------
// Shifts and Rotates
// ------------------------------------------------------

void Flags_Shifts(uint8_t local_data) {
    if (prefix_cb==0) {
        register_f = register_f & 0xC5;                         // Clear H, N, 5, 3 flags 
        register_f = register_f | (local_data&0x28);            // Set flag bits 5,3 to ALU results
    }
    else  {
        register_f = register_f & 0x01;                         // Clear H, N, P, S, Z, 5, 3  flags     
        register_f = register_f | Parity_Array[local_data];     // Set P flag
        register_f = register_f | (local_data&0x80);            // Set S flag
        if (local_data==0)  register_f = register_f | 0x40;     // Set Z flag
        register_f = register_f | (local_data&0x28);            // Set flag bits 5,3 to ALU results
    }
    return;
}

uint8_t RLC(uint8_t local_data) {
                        register_f = register_f & 0xFE;                         // Clear C flag
                        register_f = register_f | (local_data>>7);              // C Flag = bit[7]
                        local_data = (local_data<<1);                           // Shift register_a left 1 bit
                        local_data = local_data | (register_f&0x01);            // register_a bit[0] = bit shifted out of bit[7]
                        Flags_Shifts(local_data);
                        return local_data;    }     // rlca

uint8_t RRC(uint8_t local_data) {
                        register_f = register_f & 0xFE;                         // Clear C flag
                        register_f = register_f | (local_data&0x01);            // C Flag = bit[0]
                        local_data = (local_data>>1);                           // Shift register_a left 1 bit
                        local_data = local_data | ((register_f&0x01)<<7);       // register_a bit[7] = bit shifted out of bit[0]
                        Flags_Shifts(local_data);  
                        return local_data;    }     // rrca

uint8_t RL(uint8_t local_data) {
                        temp8      = register_f & 0x01;                         // Store old C flag
                        register_f = register_f & 0xFE;                         // Clear C flag
                        register_f = register_f | (local_data>>7);              // C Flag = bit[7]
                        local_data = (local_data<<1);                           // Shift register_a left 1 bit
                        local_data = local_data | temp8;                        // register_a bit[0] = old C Flag
                        Flags_Shifts(local_data);
                        return local_data;    }     // rla

uint8_t RR(uint8_t local_data) {
                        temp8      = register_f & 0x01;                         // Store old C flag
                        register_f = register_f & 0xFE;                         // Clear C flag
                        register_f = register_f | (local_data&0x01);            // C Flag = bit[0]
                        local_data = (local_data>>1);                           // Shift register_a left 1 bit
                        local_data = local_data | (temp8<<7);                   // register_a bit[7] = old C Flag
                        Flags_Shifts(local_data);
                        return local_data;    }     // rra

uint8_t SLA(uint8_t local_data) {
                        register_f = register_f & 0xFE;                         // Clear C flag
                        register_f = register_f | (local_data>>7);              // C Flag = bit[7]
                        local_data = (local_data<<1);                           // Shift register_a left 1 bit
                        Flags_Shifts(local_data);
                        return local_data;    }     // sla
                        
uint8_t SRA(uint8_t local_data) {
                        register_f = register_f & 0xFE;                         // Clear C flag
                        register_f = register_f | (local_data&0x01);            // C Flag = bit[0]
                        local_data = (local_data>>1);                           // Shift register_a right 1 bit
                        if (local_data&0x40) local_data=local_data | 0x80;      // Keep bit[7] the same as before the shift
                        Flags_Shifts(local_data);
                        return local_data;    }     // sra

uint8_t SLL(uint8_t local_data) {
                        register_f = register_f & 0xFE;                         // Clear C flag
                        register_f = register_f | (local_data>>7);              // C Flag = bit[7]
                        local_data = (local_data<<1);                           // Shift register_a left 1 bit
                        local_data = local_data | 0x1;                          // Set bit[0] to 1
                        Flags_Shifts(local_data);
                        return local_data;    }     // sll

uint8_t SRL(uint8_t local_data) {
                        register_f = register_f & 0xFE;                         // Clear C flag
                        register_f = register_f | (local_data&0x01);            // C Flag = bit[0]
                        local_data = (local_data>>1);                           // Shift register_a left 1 bit
                        Flags_Shifts(local_data);
                        return local_data;    }     // rra

void opcode_0x07()   {register_a = RLC(register_a);   return;    }     // rlc
void opcode_0xCB00() {if (prefix_dd==1) {register_b = RLC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_b = RLC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=RLC(register_b); }return;    }    
void opcode_0xCB01() {if (prefix_dd==1) {register_c = RLC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_c = RLC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=RLC(register_c); }return;    }     
void opcode_0xCB02() {if (prefix_dd==1) {register_d = RLC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_d = RLC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=RLC(register_d); }return;    }     
void opcode_0xCB03() {if (prefix_dd==1) {register_e = RLC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_e = RLC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=RLC(register_e); }return;    }     
void opcode_0xCB04() {if (prefix_dd==1) {register_h = RLC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_h = RLC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=RLC(register_h); }return;    }     
void opcode_0xCB05() {if (prefix_dd==1) {register_l = RLC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_l = RLC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=RLC(register_l); }return;    }     
void opcode_0xCB07() {if (prefix_dd==1) {register_a = RLC(Read_byte(REGISTER_IX+Sign_Extend(cb_prefix_offset)));}  else if (prefix_fd==1) {register_a = RLC(Read_byte(REGISTER_IY+Sign_Extend(cb_prefix_offset)));} else {register_a=RLC(register_a); }return;    }     
void opcode_0xCB06() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RLC(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RLC(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , RLC(Read_byte(REGISTER_HL)) );return;    }  

void opcode_0x0F()   {register_a = RRC(register_a);   return;    }     // rrc
void opcode_0xCB08() {if (prefix_dd==1) {register_b = RRC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_b = RRC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=RRC(register_b); }return;    }    
void opcode_0xCB09() {if (prefix_dd==1) {register_c = RRC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_c = RRC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=RRC(register_c); }return;    }     
void opcode_0xCB0A() {if (prefix_dd==1) {register_d = RRC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_d = RRC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=RRC(register_d); }return;    }     
void opcode_0xCB0B() {if (prefix_dd==1) {register_e = RRC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_e = RRC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=RRC(register_e); }return;    }     
void opcode_0xCB0C() {if (prefix_dd==1) {register_h = RRC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_h = RRC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=RRC(register_h); }return;    }     
void opcode_0xCB0D() {if (prefix_dd==1) {register_l = RRC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_l = RRC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=RRC(register_l); }return;    }     
void opcode_0xCB0F() {if (prefix_dd==1) {register_a = RRC(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_a = RRC(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=RRC(register_a); }return;    }     
void opcode_0xCB0E() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RRC(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RRC(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , RRC(Read_byte(REGISTER_HL)) );return;    }  

void opcode_0x17()   {register_a = RL(register_a);   return;    }     // rl
void opcode_0xCB10() {if (prefix_dd==1) {register_b = RL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_b = RL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=RL(register_b); }return;    }    
void opcode_0xCB11() {if (prefix_dd==1) {register_c = RL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_c = RL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=RL(register_c); }return;    }     
void opcode_0xCB12() {if (prefix_dd==1) {register_d = RL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_d = RL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=RL(register_d); }return;    }     
void opcode_0xCB13() {if (prefix_dd==1) {register_e = RL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_e = RL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=RL(register_e); }return;    }     
void opcode_0xCB14() {if (prefix_dd==1) {register_h = RL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_h = RL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=RL(register_h); }return;    }     
void opcode_0xCB15() {if (prefix_dd==1) {register_l = RL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_l = RL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=RL(register_l); }return;    }     
void opcode_0xCB17() {if (prefix_dd==1) {register_a = RL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_a = RL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=RL(register_a); }return;    }     
void opcode_0xCB16() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RL(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RL(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , RL(Read_byte(REGISTER_HL)) );return;    }  

void opcode_0x1F()   {register_a = RR(register_a);   return;    }     // rr
void opcode_0xCB18() {if (prefix_dd==1) {register_b = RR(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_b = RR(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=RR(register_b); }return;    }    
void opcode_0xCB19() {if (prefix_dd==1) {register_c = RR(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_c = RR(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=RR(register_c); }return;    }     
void opcode_0xCB1A() {if (prefix_dd==1) {register_d = RR(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_d = RR(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=RR(register_d); }return;    }     
void opcode_0xCB1B() {if (prefix_dd==1) {register_e = RR(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_e = RR(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=RR(register_e); }return;    }     
void opcode_0xCB1C() {if (prefix_dd==1) {register_h = RR(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_h = RR(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=RR(register_h); }return;    }     
void opcode_0xCB1D() {if (prefix_dd==1) {register_l = RR(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_l = RR(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=RR(register_l); }return;    }     
void opcode_0xCB1F() {if (prefix_dd==1) {register_a = RR(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_a = RR(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=RR(register_a); }return;    }     
void opcode_0xCB1E() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RR(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RR(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , RR(Read_byte(REGISTER_HL)) );return;    }  

// ----

void opcode_0xCB20() {if (prefix_dd==1) {register_b = SLA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_b = SLA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=SLA(register_b); }return;    }    
void opcode_0xCB21() {if (prefix_dd==1) {register_c = SLA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_c = SLA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=SLA(register_c); }return;    }     
void opcode_0xCB22() {if (prefix_dd==1) {register_d = SLA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_d = SLA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=SLA(register_d); }return;    }     
void opcode_0xCB23() {if (prefix_dd==1) {register_e = SLA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_e = SLA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=SLA(register_e); }return;    }     
void opcode_0xCB24() {if (prefix_dd==1) {register_h = SLA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_h = SLA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=SLA(register_h); }return;    }     
void opcode_0xCB25() {if (prefix_dd==1) {register_l = SLA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_l = SLA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=SLA(register_l); }return;    }     
void opcode_0xCB27() {if (prefix_dd==1) {register_a = SLA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_a = SLA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=SLA(register_a); }return;    }     
void opcode_0xCB26() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SLA(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SLA(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , SLA(Read_byte(REGISTER_HL)) );return;    }  

void opcode_0xCB28() {if (prefix_dd==1) {register_b = SRA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_b = SRA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=SRA(register_b); }return;    }    
void opcode_0xCB29() {if (prefix_dd==1) {register_c = SRA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_c = SRA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=SRA(register_c); }return;    }     
void opcode_0xCB2A() {if (prefix_dd==1) {register_d = SRA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_d = SRA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=SRA(register_d); }return;    }     
void opcode_0xCB2B() {if (prefix_dd==1) {register_e = SRA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_e = SRA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=SRA(register_e); }return;    }     
void opcode_0xCB2C() {if (prefix_dd==1) {register_h = SRA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_h = SRA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=SRA(register_h); }return;    }     
void opcode_0xCB2D() {if (prefix_dd==1) {register_l = SRA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_l = SRA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=SRA(register_l); }return;    }     
void opcode_0xCB2F() {if (prefix_dd==1) {register_a = SRA(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_a = SRA(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=SRA(register_a); }return;    }     
void opcode_0xCB2E() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SRA(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SRA(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , SRA(Read_byte(REGISTER_HL)) );return;    }  

void opcode_0xCB30() {if (prefix_dd==1) {register_b = SLL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_b = SLL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=SLL(register_b); }return;    }    
void opcode_0xCB31() {if (prefix_dd==1) {register_c = SLL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_c = SLL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=SLL(register_c); }return;    }     
void opcode_0xCB32() {if (prefix_dd==1) {register_d = SLL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_d = SLL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=SLL(register_d); }return;    }     
void opcode_0xCB33() {if (prefix_dd==1) {register_e = SLL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_e = SLL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=SLL(register_e); }return;    }     
void opcode_0xCB34() {if (prefix_dd==1) {register_h = SLL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_h = SLL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=SLL(register_h); }return;    }     
void opcode_0xCB35() {if (prefix_dd==1) {register_l = SLL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_l = SLL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=SLL(register_l); }return;    }     
void opcode_0xCB37() {if (prefix_dd==1) {register_a = SLL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_a = SLL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=SLL(register_a); }return;    }     
void opcode_0xCB36() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SLL(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SLL(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , SLL(Read_byte(REGISTER_HL)) );return;    }  

void opcode_0xCB38() {if (prefix_dd==1) {register_b = SRL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_b = SRL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=SRL(register_b); }return;    }    
void opcode_0xCB39() {if (prefix_dd==1) {register_c = SRL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_c = SRL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=SRL(register_c); }return;    }     
void opcode_0xCB3A() {if (prefix_dd==1) {register_d = SRL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_d = SRL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=SRL(register_d); }return;    }     
void opcode_0xCB3B() {if (prefix_dd==1) {register_e = SRL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_e = SRL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=SRL(register_e); }return;    }     
void opcode_0xCB3C() {if (prefix_dd==1) {register_h = SRL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_h = SRL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=SRL(register_h); }return;    }     
void opcode_0xCB3D() {if (prefix_dd==1) {register_l = SRL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_l = SRL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=SRL(register_l); }return;    }     
void opcode_0xCB3F() {if (prefix_dd==1) {register_a = SRL(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {register_a = SRL(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=SRL(register_a); }return;    }     
void opcode_0xCB3E() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SRL(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SRL(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , SRL(Read_byte(REGISTER_HL)) );return;    }  

void BIT(uint8_t local_data) {  
    uint8_t local_bitnum;
                        register_f = register_f & 0x01;                         // Clear all flags except C
                        local_bitnum = (CB_opcode>>3) &0x07;
                        switch (local_bitnum)  {
                            case 0x00: temp8=(local_data&0x01); if (temp8==0) { register_f = register_f | 0x40; } break;   // Set Z flag
                            case 0x01: temp8=(local_data&0x02); if (temp8==0) { register_f = register_f | 0x40; } break;  
                            case 0x02: temp8=(local_data&0x04); if (temp8==0) { register_f = register_f | 0x40; } break;  
                            case 0x03: temp8=(local_data&0x08); if (temp8==0) { register_f = register_f | 0x40; } break;  
                            case 0x04: temp8=(local_data&0x10); if (temp8==0) { register_f = register_f | 0x40; } break;  
                            case 0x05: temp8=(local_data&0x20); if (temp8==0) { register_f = register_f | 0x40; } break;  
                            case 0x06: temp8=(local_data&0x40); if (temp8==0) { register_f = register_f | 0x40; } break;  
                            case 0x07: temp8=(local_data&0x80); if (temp8==0) { register_f = register_f | 0x40; } break;  
                        }
                        
                        register_f = register_f | 0x10;                         // Set H flag
                        register_f = register_f | (temp8&0x80);                 // Set S flag
                        if (temp8==0) register_f=register_f|0x04;               // Set P flag

                        if (special==1)  {                                      // Special handlinig for (hl)
                            clock_counter=clock_counter+0x4;
                            register_f = register_f | ((register_pc>>8)&0x28);  // Set flag bits 5,3 to ALU results
                        }
                        else if (special==2)  {                                 // Special handlinig for IX+*
                            register_f = register_f | ((temp16>>8)&0x28);       // Set flag bits 5,3 to ALU results
                        }
                        
                        else  {                                                 // Other opcodes
                            register_f = register_f | (local_data&0x28);        // Set flag bits 5,3 to ALU results
                        }
                        
                        special=0;
                        return;    }     // bit

void opcode_0xCB_Bit_b()  {if (prefix_dd==1) {BIT(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {BIT(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {BIT(register_b); }return;    }    
void opcode_0xCB_Bit_c()  {if (prefix_dd==1) {BIT(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {BIT(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {BIT(register_c); }return;    }    
void opcode_0xCB_Bit_d()  {if (prefix_dd==1) {BIT(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {BIT(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {BIT(register_d); }return;    }    
void opcode_0xCB_Bit_e()  {if (prefix_dd==1) {BIT(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {BIT(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {BIT(register_e); }return;    }    
void opcode_0xCB_Bit_h()  {if (prefix_dd==1) {BIT(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {BIT(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {BIT(register_h); }return;    }    
void opcode_0xCB_Bit_l()  {if (prefix_dd==1) {BIT(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {BIT(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {BIT(register_l); }return;    }    
void opcode_0xCB_Bit_a()  {if (prefix_dd==1) {BIT(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {BIT(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {BIT(register_a); }return;    }    
void opcode_0xCB_Bit_hl() {if (prefix_dd==1) {special=2; temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); BIT(Read_byte(temp16));}  else if (prefix_fd==1) {special=2; temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); BIT(Read_byte(temp16));} else {special=1; BIT(Read_byte(REGISTER_HL)); }return;    }    

uint8_t RES(uint8_t local_data) {
    uint8_t local_bitnum;

                        local_bitnum = (CB_opcode>>3) &0x07;
                        switch (local_bitnum)  {
                            case 0x00:  local_data = (local_data & (~(0x01)));  break;   
                            case 0x01:  local_data = (local_data & (~(0x02)));  break;   
                            case 0x02:  local_data = (local_data & (~(0x04)));  break;   
                            case 0x03:  local_data = (local_data & (~(0x08)));  break;   
                            case 0x04:  local_data = (local_data & (~(0x10)));  break;   
                            case 0x05:  local_data = (local_data & (~(0x20)));  break;   
                            case 0x06:  local_data = (local_data & (~(0x40)));  break;   
                            case 0x07:  local_data = (local_data & (~(0x80)));  break;   
                        }
                        return local_data;    }     // res

void opcode_0xCB_Res_b()  {if (prefix_dd==1) {RES(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {RES(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=RES(register_b); }return;    }    
void opcode_0xCB_Res_c()  {if (prefix_dd==1) {RES(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {RES(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=RES(register_c); }return;    }    
void opcode_0xCB_Res_d()  {if (prefix_dd==1) {RES(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {RES(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=RES(register_d); }return;    }    
void opcode_0xCB_Res_e()  {if (prefix_dd==1) {RES(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {RES(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=RES(register_e); }return;    }    
void opcode_0xCB_Res_h()  {if (prefix_dd==1) {RES(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {RES(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=RES(register_h); }return;    }    
void opcode_0xCB_Res_l()  {if (prefix_dd==1) {RES(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {RES(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=RES(register_l); }return;    }    
void opcode_0xCB_Res_a()  {if (prefix_dd==1) {RES(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {RES(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=RES(register_a); }return;    }    
void opcode_0xCB_Res_hl() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RES(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,RES(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , RES(Read_byte(REGISTER_HL)) );return;    }  

uint8_t SET(uint8_t local_data) {
    uint8_t local_bitnum;

                        clock_counter=clock_counter+0x3;
                        local_bitnum = (CB_opcode>>3) &0x07;
                        switch (local_bitnum)  {
                            case 0x00:  local_data = (local_data | 0x01);  break;   
                            case 0x01:  local_data = (local_data | 0x02);  break;   
                            case 0x02:  local_data = (local_data | 0x04);  break;   
                            case 0x03:  local_data = (local_data | 0x08);  break;   
                            case 0x04:  local_data = (local_data | 0x10);  break;   
                            case 0x05:  local_data = (local_data | 0x20);  break;   
                            case 0x06:  local_data = (local_data | 0x40);  break;   
                            case 0x07:  local_data = (local_data | 0x80);  break;   
                        }
                        return local_data;    }     // set

void opcode_0xCB_Set_b()  {if (prefix_dd==1) {SET(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {SET(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_b=SET(register_b); }return;    }    
void opcode_0xCB_Set_c()  {if (prefix_dd==1) {SET(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {SET(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_c=SET(register_c); }return;    }    
void opcode_0xCB_Set_d()  {if (prefix_dd==1) {SET(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {SET(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_d=SET(register_d); }return;    }    
void opcode_0xCB_Set_e()  {if (prefix_dd==1) {SET(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {SET(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_e=SET(register_e); }return;    }    
void opcode_0xCB_Set_h()  {if (prefix_dd==1) {SET(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {SET(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_h=SET(register_h); }return;    }    
void opcode_0xCB_Set_l()  {if (prefix_dd==1) {SET(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {SET(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_l=SET(register_l); }return;    }    
void opcode_0xCB_Set_a()  {if (prefix_dd==1) {SET(Read_byte(REGISTER_IX+Sign_Extend(Fetch_byte())));}  else if (prefix_fd==1) {SET(Read_byte(REGISTER_IY+Sign_Extend(Fetch_byte())));} else {register_a=SET(register_a); }return;    }    
void opcode_0xCB_Set_hl() {if (prefix_dd==1) {temp16=REGISTER_IX+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SET(Read_byte(temp16)));}  else if (prefix_fd==1){temp16=REGISTER_IY+Sign_Extend(cb_prefix_offset); Write_byte(temp16,SET(Read_byte(temp16)));} else Write_byte( (REGISTER_HL) , SET(Read_byte(REGISTER_HL)) );return;    }  

void opcode_0x76()  {                                                           // Halt

    digitalWriteFast(PIN_HALT,0x0);
    halt_in_progress=1;
    register_pc--;
    return;
}

void opcode_0x27()  {                                           // daa
    register_f = register_f & 0x13;                             // Clear S, Z, P Flags
    temp8=0;
    if ( ((0x0f&register_a) > 0x09) || (flag_h==1) )  {  temp8=temp8+0x06;  }
    if ( (     (register_a) > 0x99) || (flag_c==1) )  {  temp8=temp8+0x60;  register_f=register_f|0x01; } // Set C Flag
    
    if (flag_n==1)  {
        if (( (0x0F&register_a) < 0x06) && (flag_h==1) )   register_f = register_f | 0x10; else register_f = register_f & 0xEF;  // Set H Flag
        register_a = register_a - temp8;
    }
    else
    {
        if ( (0x0F&register_a) > 0x09 )  register_f = register_f | 0x10; else register_f = register_f & 0xEF;  // Set H Flag
        register_a = register_a + temp8;
    }
    
    if (register_a&0x80)  register_f = register_f | 0x80;       // Set S Flag
    if (register_a==0)         register_f = register_f | 0x40;  // Set Z Flag
    register_f = register_f | Parity_Array[register_a];         // Set P flag   
    register_f = register_f | (register_a&0x28);                // Set flag bits 5,3 to ALU results
    return;
}   

void opcode_0xEDA2()  {                                     // ini
    register_f = register_f & 0xBF;                         // Clear Z flag     
    Write_byte( REGISTER_HL ,  BIU_Bus_Cycle(IO_READ_BYTE,register_c,0x00) );
    Writeback_Reg16( REG_HL , (REGISTER_HL + 1) );
    register_b--;
    if (register_b==0) register_f = register_f | 0x40;      // Set Z flag
    register_f = register_f | 0x02;                         // Set N flag       
    if ( (opcode_byte>0xAF) && (register_b!=0) ) {clock_counter=clock_counter+0x5; register_pc=register_pc-2; }    // Allow for repeat of this instruction
    return;}

void opcode_0xEDA3()  {                                     // outi
    register_f = register_f & 0xBF;                         // Clear Z flag     
    BIU_Bus_Cycle(IO_WRITE_BYTE,register_c, (Read_byte(REGISTER_HL)) );
    Writeback_Reg16( REG_HL , (REGISTER_HL + 1) );
    register_b--;
    if (register_b==0) register_f = register_f | 0x40;      // Set Z flag
    register_f = register_f | 0x02;                         // Set N flag       
    if ( (opcode_byte>0xAF) && (register_b!=0) ) {clock_counter=clock_counter+0x5; register_pc=register_pc-2; }    // Allow for repeat of this instruction
    return;}
    
void opcode_0xEDA0()  {                                     // ldi
    register_f = register_f & 0xC1;                         // Clear N, H, P, 5,3 flags   
    temp8 = Read_byte(REGISTER_HL);
    Write_byte( REGISTER_DE ,  temp8);
    Writeback_Reg16( REG_HL , (REGISTER_HL + 1) );
    Writeback_Reg16( REG_DE , (REGISTER_DE + 1) );
    Writeback_Reg16( REG_BC , (REGISTER_BC - 1) );
    if ( (opcode_byte>0xAF) && (REGISTER_BC!=0) ) {clock_counter=clock_counter+0x5; register_pc=register_pc-2; }       // Allow for repeat of this instruction
    temp8 = temp8 + register_a;
    if (temp8&0x08) register_f = register_f | 0x08;
    if (temp8&0x02) register_f = register_f | 0x20;
    if ( REGISTER_BC!=0) register_f = register_f | 0x04;     // Set P flag
    return;
}

void opcode_0xEDA8()  {                                     // ldd
    register_f = register_f & 0xC1;                         // Clear N, H, P, 5,3 flags   
    temp8 = Read_byte(REGISTER_HL);
    Write_byte( REGISTER_DE ,  temp8);
    Writeback_Reg16( REG_HL , (REGISTER_HL - 1) );
    Writeback_Reg16( REG_DE , (REGISTER_DE - 1) );
    Writeback_Reg16( REG_BC , (REGISTER_BC - 1) );
    if ( (opcode_byte>0xAF) && (REGISTER_BC!=0) ) {clock_counter=clock_counter+0x5; register_pc=register_pc-2; }       // Allow for repeat of this instruction
    temp8 = temp8 + register_a;
    if (temp8&0x08) register_f = register_f | 0x08;
    if (temp8&0x02) register_f = register_f | 0x20;
    if ( REGISTER_BC!=0) register_f = register_f | 0x04;     // Set P flag 
    return;
}

void opcode_0xEDA1()  {                                     // cpi  
    uint8_t old_C = flag_c;
    temp8 = SUB_Bytes(register_a , Read_byte(REGISTER_HL) );
    Writeback_Reg16( REG_HL , (REGISTER_HL + 1) );
    Writeback_Reg16( REG_BC , (REGISTER_BC - 1) );
    if ( (opcode_byte>0xAF) && (REGISTER_BC!=0) && (flag_z!=1) ) {clock_counter=clock_counter+0x5; register_pc=register_pc-2; }    // Allow for repeat of this instruction
    
    register_f = register_f & 0xD2;                          // Clear C, P, 3,5 flags   
    if ((temp8-flag_h)&0x08) register_f = register_f | 0x08; // 3
    if ((temp8-flag_h)&0x02) register_f = register_f | 0x20; // 5
    if (old_C==1)            register_f = register_f | 0x01; // C
    if (REGISTER_BC!=0)      register_f = register_f | 0x04; // p   
    return;}

void opcode_0xEDA9()  {                                     // cpd
    uint8_t old_C = flag_c;
    temp8 = SUB_Bytes(register_a , Read_byte(REGISTER_HL) );
    Writeback_Reg16( REG_HL , (REGISTER_HL - 1) );
    Writeback_Reg16( REG_BC , (REGISTER_BC - 1) );
    if ( (opcode_byte>0xAF) && (REGISTER_BC!=0) && (flag_z!=1) ) {clock_counter=clock_counter+0x5; register_pc=register_pc-2;  }    // Allow for repeat of this instruction
    
    register_f = register_f & 0xD2;                          // Clear C, P, 3,5 flags   
    if ((temp8-flag_h)&0x08) register_f = register_f | 0x08; // 3
    if ((temp8-flag_h)&0x02) register_f = register_f | 0x20; // 5
    if (old_C==1)            register_f = register_f | 0x01; // C
    if (REGISTER_BC!=0)      register_f = register_f | 0x04; // p   
    return;}

void opcode_0xEDAA()  {                                     // ind
    register_f = register_f & 0xBF;                         // Clear Z flag     
    Write_byte( REGISTER_HL ,  BIU_Bus_Cycle(IO_READ_BYTE,register_c,0x00) );
    Writeback_Reg16( REG_HL , (REGISTER_HL + 1) );
    register_b--;
    if (register_b==0) register_f = register_f | 0x40;      // Set Z flag
    register_f = register_f | 0x02;                         // Set N flag       
    if ( (opcode_byte>0xAF) && (register_b!=0) ) {clock_counter=clock_counter+0x5; register_pc=register_pc-2; }    // Allow for repeat of this instruction
    return;}

void opcode_0xEDAB()  {                                     // outd
    register_f = register_f & 0xBF;                         // Clear Z flag     
    BIU_Bus_Cycle(IO_WRITE_BYTE,register_c, (Read_byte(REGISTER_HL)) );
    Writeback_Reg16( REG_HL , (REGISTER_HL - 1) );
    register_b--;
    if (register_b==0) register_f = register_f | 0x40;      // Set Z flag
    register_f = register_f | 0x02;                         // Set N flag       
    if ( (opcode_byte>0xAF) && (register_b!=0) ) register_pc=register_pc-2;     // Allow for repeat of this instruction
    return;}

void opcode_0xED67()  {                                     // rrd
    register_f = register_f & 0x01;                         // Clear S, Z, H, P, N flags
    temp8 = Read_byte(REGISTER_HL);
    temp16 = (register_a<<8) | temp8 ;
    temp16 = temp16 >> 4;
    temp16 = (temp16&0xF0FF) | ((temp8&0x0F)<<8) ;
    
    register_a = (register_a&0xF0) | (0x0F& (temp16>>8));
    Write_byte( REGISTER_HL , (temp16&0x00FF) );
    
    register_f = register_f | Parity_Array[register_a];     // Set P flag  
    register_f = register_f | (register_a&0x80);            // Set S flag
    if (register_a==0)  register_f = register_f | 0x40;     // Set Z flag
    register_f = register_f | (register_a&0x28);            // Set flag bits 5,3 to ALU results
    return;}

void opcode_0xED6F()  {                                     // rld
    register_f = register_f & 0x01;                         // Clear S, Z, H, P, N flags
    
    temp16 = (register_a<<8) | Read_byte(REGISTER_HL) ;
    temp16 = temp16 << 4;
    temp16 = (temp16>>12) | (temp16&0xFFF0) ;
    
    Write_byte( REGISTER_HL , (temp16&0x00FF) );
    register_a = (register_a&0xF0) | (0x0F& (temp16>>8));
    
    register_f = register_f | Parity_Array[register_a];     // Set P flag  
    register_f = register_f | (register_a&0x80);            // Set S flag
    if (register_a==0)  register_f = register_f | 0x40;     // Set Z flag
    register_f = register_f | (register_a&0x28);            // Set flag bits 5,3 to ALU results
    return;}

// -------------------------------------------------
// NMI Handler     
// -------------------------------------------------
void NMI_Handler() {
    
    BIU_Bus_Cycle(OPCODE_READ_M1 , 0xABCD , 0x00 );
    wait_for_CLK_falling_edge();
    
    if (halt_in_progress==1) Push(register_pc+1);  else Push(register_pc);
    halt_in_progress=0;
    digitalWriteFast(PIN_HALT,0x1);  
    register_iff2 = register_iff1;
    register_iff1 = 0;
    register_pc = 0x0066;
    nmi_latched=0;
    return;
}

// -------------------------------------------------
// INTR Handler     
// -------------------------------------------------
void INTR_Handler() {
    uint8_t local_intr_vector;
    
    register_iff1 = 0;
    register_iff2 = 0;  
    
    if (register_im==0)  {
        assert_iack_type0 = 1;      // BIU performs IACK during the next opcode fetch
        return;
    }
    else if (register_im==1)  {
        local_intr_vector  = BIU_Bus_Cycle(INTERRUPT_ACK , 0x0000 , 0x00    ); 
        BIU_Bus_Cycle(OPCODE_READ_M1 , 0xABCD , 0x00 );
        wait_for_CLK_falling_edge();

        if (halt_in_progress==1) Push(register_pc+1);  else Push(register_pc);
        halt_in_progress=0;
        digitalWriteFast(PIN_HALT,0x1);
        register_pc = 0x0038;
        return; 
    }       
    else if (register_im==2)  {
        local_intr_vector  = BIU_Bus_Cycle(INTERRUPT_ACK , 0x0000 , 0x00    ); 
        wait_for_CLK_falling_edge();
        if (halt_in_progress==1) Push(register_pc+1);  else Push(register_pc);
        halt_in_progress=0;
        digitalWriteFast(PIN_HALT,0x1);
        temp16 =  (register_i<<8) | local_intr_vector;
        register_pc = Read_word(temp16);
        return; 
    }       
    
    return;
}
  
// -------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------

void decode_table_0xCB()  {

    if (nmi_latched==1)  {        // NMI allowed between CB and ED opcodes.  Back-off PC and handle the NMI
        register_pc--;
        return;
    }
  
    prefix_cb=1;
    
    if ( (prefix_dd==1) || (prefix_fd==1)  )  { 
        //cb_prefix_offset = Fetch_opcode();
        cb_prefix_offset = Fetch_byte();
        opcode_byte      = Fetch_opcode();
        CB_opcode = opcode_byte;
    }
    else  {
        opcode_byte = Fetch_opcode();
        CB_opcode = opcode_byte;        
    }

    switch (opcode_byte)  {
        
       case 0x00:   opcode_0xCB00();        break; 
       case 0x01:   opcode_0xCB01();        break; 
       case 0x02:   opcode_0xCB02();        break; 
       case 0x03:   opcode_0xCB03();        break; 
       case 0x04:   opcode_0xCB04();        break; 
       case 0x05:   opcode_0xCB05();        break; 
       case 0x06:   opcode_0xCB06();        break; 
       case 0x07:   opcode_0xCB07();        break; 
       case 0x08:   opcode_0xCB08();        break; 
       case 0x09:   opcode_0xCB09();        break; 
       case 0x0A:   opcode_0xCB0A();        break; 
       case 0x0B:   opcode_0xCB0B();        break; 
       case 0x0C:   opcode_0xCB0C();        break; 
       case 0x0D:   opcode_0xCB0D();        break; 
       case 0x0E:   opcode_0xCB0E();        break; 
       case 0x0F:   opcode_0xCB0F();        break; 
       case 0x10:   opcode_0xCB10();        break; 
       case 0x11:   opcode_0xCB11();        break; 
       case 0x12:   opcode_0xCB12();        break; 
       case 0x13:   opcode_0xCB13();        break; 
       case 0x14:   opcode_0xCB14();        break; 
       case 0x15:   opcode_0xCB15();        break; 
       case 0x16:   opcode_0xCB16();        break; 
       case 0x17:   opcode_0xCB17();        break; 
       case 0x18:   opcode_0xCB18();        break; 
       case 0x19:   opcode_0xCB19();        break; 
       case 0x1A:   opcode_0xCB1A();        break; 
       case 0x1B:   opcode_0xCB1B();        break; 
       case 0x1C:   opcode_0xCB1C();        break; 
       case 0x1D:   opcode_0xCB1D();        break; 
       case 0x1E:   opcode_0xCB1E();        break; 
       case 0x1F:   opcode_0xCB1F();        break; 
       case 0x20:   opcode_0xCB20();        break; 
       case 0x21:   opcode_0xCB21();        break; 
       case 0x22:   opcode_0xCB22();        break; 
       case 0x23:   opcode_0xCB23();        break; 
       case 0x24:   opcode_0xCB24();        break; 
       case 0x25:   opcode_0xCB25();        break; 
       case 0x26:   opcode_0xCB26();        break; 
       case 0x27:   opcode_0xCB27();        break; 
       case 0x28:   opcode_0xCB28();        break; 
       case 0x29:   opcode_0xCB29();        break; 
       case 0x2A:   opcode_0xCB2A();        break; 
       case 0x2B:   opcode_0xCB2B();        break; 
       case 0x2C:   opcode_0xCB2C();        break; 
       case 0x2D:   opcode_0xCB2D();        break; 
       case 0x2E:   opcode_0xCB2E();        break; 
       case 0x2F:   opcode_0xCB2F();        break; 
       case 0x30:   opcode_0xCB30();        break; 
       case 0x31:   opcode_0xCB31();        break; 
       case 0x32:   opcode_0xCB32();        break; 
       case 0x33:   opcode_0xCB33();        break; 
       case 0x34:   opcode_0xCB34();        break; 
       case 0x35:   opcode_0xCB35();        break; 
       case 0x36:   opcode_0xCB36();        break; 
       case 0x37:   opcode_0xCB37();        break; 
       case 0x38:   opcode_0xCB38();        break; 
       case 0x39:   opcode_0xCB39();        break; 
       case 0x3A:   opcode_0xCB3A();        break; 
       case 0x3B:   opcode_0xCB3B();        break; 
       case 0x3C:   opcode_0xCB3C();        break; 
       case 0x3D:   opcode_0xCB3D();        break; 
       case 0x3E:   opcode_0xCB3E();        break; 
       case 0x3F:   opcode_0xCB3F();        break; 
       case 0x40:   opcode_0xCB_Bit_b();    break; 
       case 0x41:   opcode_0xCB_Bit_c();    break; 
       case 0x42:   opcode_0xCB_Bit_d();    break; 
       case 0x43:   opcode_0xCB_Bit_e();    break; 
       case 0x44:   opcode_0xCB_Bit_h();    break; 
       case 0x45:   opcode_0xCB_Bit_l();    break; 
       case 0x46:   opcode_0xCB_Bit_hl();   break; 
       case 0x47:   opcode_0xCB_Bit_a();    break; 
       case 0x48:   opcode_0xCB_Bit_b();    break; 
       case 0x49:   opcode_0xCB_Bit_c();    break; 
       case 0x4A:   opcode_0xCB_Bit_d();    break; 
       case 0x4B:   opcode_0xCB_Bit_e();    break; 
       case 0x4C:   opcode_0xCB_Bit_h();    break; 
       case 0x4D:   opcode_0xCB_Bit_l();    break; 
       case 0x4E:   opcode_0xCB_Bit_hl();   break; 
       case 0x4F:   opcode_0xCB_Bit_a();    break; 
       case 0x50:   opcode_0xCB_Bit_b();    break; 
       case 0x51:   opcode_0xCB_Bit_c();    break; 
       case 0x52:   opcode_0xCB_Bit_d();    break; 
       case 0x53:   opcode_0xCB_Bit_e();    break; 
       case 0x54:   opcode_0xCB_Bit_h();    break; 
       case 0x55:   opcode_0xCB_Bit_l();    break; 
       case 0x56:   opcode_0xCB_Bit_hl();   break; 
       case 0x57:   opcode_0xCB_Bit_a();    break; 
       case 0x58:   opcode_0xCB_Bit_b();    break; 
       case 0x59:   opcode_0xCB_Bit_c();    break; 
       case 0x5A:   opcode_0xCB_Bit_d();    break; 
       case 0x5B:   opcode_0xCB_Bit_e();    break; 
       case 0x5C:   opcode_0xCB_Bit_h();    break; 
       case 0x5D:   opcode_0xCB_Bit_l();    break; 
       case 0x5E:   opcode_0xCB_Bit_hl();   break; 
       case 0x5F:   opcode_0xCB_Bit_a();    break; 
       case 0x60:   opcode_0xCB_Bit_b();    break; 
       case 0x61:   opcode_0xCB_Bit_c();    break; 
       case 0x62:   opcode_0xCB_Bit_d();    break; 
       case 0x63:   opcode_0xCB_Bit_e();    break; 
       case 0x64:   opcode_0xCB_Bit_h();    break; 
       case 0x65:   opcode_0xCB_Bit_l();    break; 
       case 0x66:   opcode_0xCB_Bit_hl();   break; 
       case 0x67:   opcode_0xCB_Bit_a();    break; 
       case 0x68:   opcode_0xCB_Bit_b();    break; 
       case 0x69:   opcode_0xCB_Bit_c();    break; 
       case 0x6A:   opcode_0xCB_Bit_d();    break; 
       case 0x6B:   opcode_0xCB_Bit_e();    break; 
       case 0x6C:   opcode_0xCB_Bit_h();    break; 
       case 0x6D:   opcode_0xCB_Bit_l();    break; 
       case 0x6E:   opcode_0xCB_Bit_hl();   break; 
       case 0x6F:   opcode_0xCB_Bit_a();    break; 
       case 0x70:   opcode_0xCB_Bit_b();    break; 
       case 0x71:   opcode_0xCB_Bit_c();    break; 
       case 0x72:   opcode_0xCB_Bit_d();    break; 
       case 0x73:   opcode_0xCB_Bit_e();    break; 
       case 0x74:   opcode_0xCB_Bit_h();    break; 
       case 0x75:   opcode_0xCB_Bit_l();    break; 
       case 0x76:   opcode_0xCB_Bit_hl();   break; 
       case 0x77:   opcode_0xCB_Bit_a();    break; 
       case 0x78:   opcode_0xCB_Bit_b();    break; 
       case 0x79:   opcode_0xCB_Bit_c();    break; 
       case 0x7A:   opcode_0xCB_Bit_d();    break; 
       case 0x7B:   opcode_0xCB_Bit_e();    break; 
       case 0x7C:   opcode_0xCB_Bit_h();    break; 
       case 0x7D:   opcode_0xCB_Bit_l();    break; 
       case 0x7E:   opcode_0xCB_Bit_hl();   break; 
       case 0x7F:   opcode_0xCB_Bit_a();    break; 
       case 0x80:   opcode_0xCB_Res_b();    break; 
       case 0x81:   opcode_0xCB_Res_c();    break; 
       case 0x82:   opcode_0xCB_Res_d();    break; 
       case 0x83:   opcode_0xCB_Res_e();    break; 
       case 0x84:   opcode_0xCB_Res_h();    break; 
       case 0x85:   opcode_0xCB_Res_l();    break; 
       case 0x86:   opcode_0xCB_Res_hl();   break; 
       case 0x87:   opcode_0xCB_Res_a();    break; 
       case 0x88:   opcode_0xCB_Res_b();    break; 
       case 0x89:   opcode_0xCB_Res_c();    break; 
       case 0x8A:   opcode_0xCB_Res_d();    break; 
       case 0x8B:   opcode_0xCB_Res_e();    break; 
       case 0x8C:   opcode_0xCB_Res_h();    break; 
       case 0x8D:   opcode_0xCB_Res_l();    break; 
       case 0x8E:   opcode_0xCB_Res_hl();   break; 
       case 0x8F:   opcode_0xCB_Res_a();    break; 
       case 0x90:   opcode_0xCB_Res_b();    break; 
       case 0x91:   opcode_0xCB_Res_c();    break; 
       case 0x92:   opcode_0xCB_Res_d();    break; 
       case 0x93:   opcode_0xCB_Res_e();    break; 
       case 0x94:   opcode_0xCB_Res_h();    break; 
       case 0x95:   opcode_0xCB_Res_l();    break; 
       case 0x96:   opcode_0xCB_Res_hl();   break; 
       case 0x97:   opcode_0xCB_Res_a();    break; 
       case 0x98:   opcode_0xCB_Res_b();    break; 
       case 0x99:   opcode_0xCB_Res_c();    break; 
       case 0x9A:   opcode_0xCB_Res_d();    break; 
       case 0x9B:   opcode_0xCB_Res_e();    break; 
       case 0x9C:   opcode_0xCB_Res_h();    break; 
       case 0x9D:   opcode_0xCB_Res_l();    break; 
       case 0x9E:   opcode_0xCB_Res_hl();   break; 
       case 0x9F:   opcode_0xCB_Res_a();    break; 
       case 0xA0:   opcode_0xCB_Res_b();    break; 
       case 0xA1:   opcode_0xCB_Res_c();    break; 
       case 0xA2:   opcode_0xCB_Res_d();    break; 
       case 0xA3:   opcode_0xCB_Res_e();    break; 
       case 0xA4:   opcode_0xCB_Res_h();    break; 
       case 0xA5:   opcode_0xCB_Res_l();    break; 
       case 0xA6:   opcode_0xCB_Res_hl();   break; 
       case 0xA7:   opcode_0xCB_Res_a();    break; 
       case 0xA8:   opcode_0xCB_Res_b();    break; 
       case 0xA9:   opcode_0xCB_Res_c();    break; 
       case 0xAA:   opcode_0xCB_Res_d();    break; 
       case 0xAB:   opcode_0xCB_Res_e();    break; 
       case 0xAC:   opcode_0xCB_Res_h();    break; 
       case 0xAD:   opcode_0xCB_Res_l();    break; 
       case 0xAE:   opcode_0xCB_Res_hl();   break; 
       case 0xAF:   opcode_0xCB_Res_a();    break; 
       case 0xB0:   opcode_0xCB_Res_b();    break; 
       case 0xB1:   opcode_0xCB_Res_c();    break; 
       case 0xB2:   opcode_0xCB_Res_d();    break; 
       case 0xB3:   opcode_0xCB_Res_e();    break; 
       case 0xB4:   opcode_0xCB_Res_h();    break; 
       case 0xB5:   opcode_0xCB_Res_l();    break; 
       case 0xB6:   opcode_0xCB_Res_hl();   break; 
       case 0xB7:   opcode_0xCB_Res_a();    break; 
       case 0xB8:   opcode_0xCB_Res_b();    break; 
       case 0xB9:   opcode_0xCB_Res_c();    break; 
       case 0xBA:   opcode_0xCB_Res_d();    break; 
       case 0xBB:   opcode_0xCB_Res_e();    break; 
       case 0xBC:   opcode_0xCB_Res_h();    break; 
       case 0xBD:   opcode_0xCB_Res_l();    break; 
       case 0xBE:   opcode_0xCB_Res_hl();   break; 
       case 0xBF:   opcode_0xCB_Res_a();    break; 
       case 0xC0:   opcode_0xCB_Set_b();    break; 
       case 0xC1:   opcode_0xCB_Set_c();    break; 
       case 0xC2:   opcode_0xCB_Set_d();    break; 
       case 0xC3:   opcode_0xCB_Set_e();    break; 
       case 0xC4:   opcode_0xCB_Set_h();    break; 
       case 0xC5:   opcode_0xCB_Set_l();    break; 
       case 0xC6:   opcode_0xCB_Set_hl();   break; 
       case 0xC7:   opcode_0xCB_Set_a();    break; 
       case 0xC8:   opcode_0xCB_Set_b();    break; 
       case 0xC9:   opcode_0xCB_Set_c();    break; 
       case 0xCA:   opcode_0xCB_Set_d();    break; 
       case 0xCB:   opcode_0xCB_Set_e();    break; 
       case 0xCC:   opcode_0xCB_Set_h();    break; 
       case 0xCD:   opcode_0xCB_Set_l();    break; 
       case 0xCE:   opcode_0xCB_Set_hl();   break; 
       case 0xCF:   opcode_0xCB_Set_a();    break; 
       case 0xD0:   opcode_0xCB_Set_b();    break; 
       case 0xD1:   opcode_0xCB_Set_c();    break; 
       case 0xD2:   opcode_0xCB_Set_d();    break; 
       case 0xD3:   opcode_0xCB_Set_e();    break; 
       case 0xD4:   opcode_0xCB_Set_h();    break; 
       case 0xD5:   opcode_0xCB_Set_l();    break; 
       case 0xD6:   opcode_0xCB_Set_hl();   break; 
       case 0xD7:   opcode_0xCB_Set_a();    break; 
       case 0xD8:   opcode_0xCB_Set_b();    break; 
       case 0xD9:   opcode_0xCB_Set_c();    break; 
       case 0xDA:   opcode_0xCB_Set_d();    break; 
       case 0xDB:   opcode_0xCB_Set_e();    break; 
       case 0xDC:   opcode_0xCB_Set_h();    break; 
       case 0xDD:   opcode_0xCB_Set_l();    break; 
       case 0xDE:   opcode_0xCB_Set_hl();   break; 
       case 0xDF:   opcode_0xCB_Set_a();    break; 
       case 0xE0:   opcode_0xCB_Set_b();    break; 
       case 0xE1:   opcode_0xCB_Set_c();    break; 
       case 0xE2:   opcode_0xCB_Set_d();    break; 
       case 0xE3:   opcode_0xCB_Set_e();    break; 
       case 0xE4:   opcode_0xCB_Set_h();    break; 
       case 0xE5:   opcode_0xCB_Set_l();    break; 
       case 0xE6:   opcode_0xCB_Set_hl();   break; 
       case 0xE7:   opcode_0xCB_Set_a();    break; 
       case 0xE8:   opcode_0xCB_Set_b();    break; 
       case 0xE9:   opcode_0xCB_Set_c();    break; 
       case 0xEA:   opcode_0xCB_Set_d();    break; 
       case 0xEB:   opcode_0xCB_Set_e();    break; 
       case 0xEC:   opcode_0xCB_Set_h();    break; 
       case 0xED:   opcode_0xCB_Set_l();    break; 
       case 0xEE:   opcode_0xCB_Set_hl();   break; 
       case 0xEF:   opcode_0xCB_Set_a();    break; 
       case 0xF0:   opcode_0xCB_Set_b();    break; 
       case 0xF1:   opcode_0xCB_Set_c();    break; 
       case 0xF2:   opcode_0xCB_Set_d();    break; 
       case 0xF3:   opcode_0xCB_Set_e();    break; 
       case 0xF4:   opcode_0xCB_Set_h();    break; 
       case 0xF5:   opcode_0xCB_Set_l();    break; 
       case 0xF6:   opcode_0xCB_Set_hl();   break; 
       case 0xF7:   opcode_0xCB_Set_a();    break; 
       case 0xF8:   opcode_0xCB_Set_b();    break; 
       case 0xF9:   opcode_0xCB_Set_c();    break; 
       case 0xFA:   opcode_0xCB_Set_d();    break; 
       case 0xFB:   opcode_0xCB_Set_e();    break; 
       case 0xFC:   opcode_0xCB_Set_h();    break; 
       case 0xFD:   opcode_0xCB_Set_l();    break; 
       case 0xFE:   opcode_0xCB_Set_hl();   break; 
       case 0xFF:   opcode_0xCB_Set_a();    break; 
      }
      
    return;
}
      
void decode_table_0xED()  {
    
    if (nmi_latched==1)  {        // NMI allowed between CB and ED opcodes.  Back-off PC and handle the NMI
        register_pc--;
        return;
    }

    opcode_byte = Fetch_opcode();
  
    clock_counter = clock_counter + Opcode_Timing_ED[opcode_byte];

    switch (opcode_byte)  {
        
       case 0x00:   opcode_0x00();      break; 
       case 0x01:   opcode_0x00();      break; 
       case 0x02:   opcode_0x00();      break; 
       case 0x03:   opcode_0x00();      break; 
       case 0x04:   opcode_0x00();      break; 
       case 0x05:   opcode_0x00();      break; 
       case 0x06:   opcode_0x00();      break; 
       case 0x07:   opcode_0x00();      break; 
       case 0x08:   opcode_0x00();      break; 
       case 0x09:   opcode_0x00();      break; 
       case 0x0A:   opcode_0x00();      break; 
       case 0x0B:   opcode_0x00();      break; 
       case 0x0C:   opcode_0x00();      break; 
       case 0x0D:   opcode_0x00();      break; 
       case 0x0E:   opcode_0x00();      break; 
       case 0x0F:   opcode_0x00();      break; 
       case 0x10:   opcode_0x00();      break; 
       case 0x11:   opcode_0x00();      break; 
       case 0x12:   opcode_0x00();      break; 
       case 0x13:   opcode_0x00();      break; 
       case 0x14:   opcode_0x00();      break; 
       case 0x15:   opcode_0x00();      break; 
       case 0x16:   opcode_0x00();      break; 
       case 0x17:   opcode_0x00();      break; 
       case 0x18:   opcode_0x00();      break; 
       case 0x19:   opcode_0x00();      break; 
       case 0x1A:   opcode_0x00();      break; 
       case 0x1B:   opcode_0x00();      break; 
       case 0x1C:   opcode_0x00();      break; 
       case 0x1D:   opcode_0x00();      break; 
       case 0x1E:   opcode_0x00();      break; 
       case 0x1F:   opcode_0x00();      break; 
       case 0x20:   opcode_0x00();      break; 
       case 0x21:   opcode_0x00();      break; 
       case 0x22:   opcode_0x00();      break; 
       case 0x23:   opcode_0x00();      break; 
       case 0x24:   opcode_0x00();      break; 
       case 0x25:   opcode_0x00();      break; 
       case 0x26:   opcode_0x00();      break; 
       case 0x27:   opcode_0x00();      break; 
       case 0x28:   opcode_0x00();      break; 
       case 0x29:   opcode_0x00();      break; 
       case 0x2A:   opcode_0x00();      break; 
       case 0x2B:   opcode_0x00();      break; 
       case 0x2C:   opcode_0x00();      break; 
       case 0x2D:   opcode_0x00();      break; 
       case 0x2E:   opcode_0x00();      break; 
       case 0x2F:   opcode_0x00();      break; 
       case 0x30:   opcode_0x00();      break; 
       case 0x31:   opcode_0x00();      break; 
       case 0x32:   opcode_0x00();      break; 
       case 0x33:   opcode_0x00();      break; 
       case 0x34:   opcode_0x00();      break; 
       case 0x35:   opcode_0x00();      break; 
       case 0x36:   opcode_0x00();      break; 
       case 0x37:   opcode_0x00();      break; 
       case 0x38:   opcode_0x00();      break; 
       case 0x39:   opcode_0x00();      break; 
       case 0x3A:   opcode_0x00();      break; 
       case 0x3B:   opcode_0x00();      break; 
       case 0x3C:   opcode_0x00();      break; 
       case 0x3D:   opcode_0x00();      break; 
       case 0x3E:   opcode_0x00();      break; 
       case 0x3F:   opcode_0x00();      break; 
       case 0x40:   opcode_0xED40();    break; 
       case 0x41:   opcode_0xED41();    break; 
       case 0x42:   opcode_0xED42();    break; 
       case 0x43:   opcode_0xED43();    break; 
       case 0x44:   opcode_0xED44();    break; 
       case 0x45:   opcode_0xED45();    break; 
       case 0x46:   opcode_0xED46();    break; 
       case 0x47:   opcode_0xED47();    break; 
       case 0x48:   opcode_0xED48();    break; 
       case 0x49:   opcode_0xED49();    break; 
       case 0x4A:   opcode_0xED4A();    break; 
       case 0x4B:   opcode_0xED4B();    break; 
       case 0x4C:   opcode_0xED44();    break; 
       case 0x4D:   opcode_0xED4D();    break; 
       case 0x4E:   opcode_0x00();      break; 
       case 0x4F:   opcode_0xED4F();    break; 
       case 0x50:   opcode_0xED50();    break; 
       case 0x51:   opcode_0xED51();    break; 
       case 0x52:   opcode_0xED52();    break; 
       case 0x53:   opcode_0xED53();    break; 
       case 0x54:   opcode_0xED44();    break; 
       case 0x55:   opcode_0xED45();    break; 
       case 0x56:   opcode_0xED56();    break; 
       case 0x57:   opcode_0xED57();    break; 
       case 0x58:   opcode_0xED58();    break; 
       case 0x59:   opcode_0xED59();    break; 
       case 0x5A:   opcode_0xED5A();    break; 
       case 0x5B:   opcode_0xED5B();    break; 
       case 0x5C:   opcode_0xED44();    break; 
       case 0x5D:   opcode_0xED45();    break; 
       case 0x5E:   opcode_0xED5E();    break; 
       case 0x5F:   opcode_0xED5F();    break; 
       case 0x60:   opcode_0xED60();    break; 
       case 0x61:   opcode_0xED61();    break; 
       case 0x62:   opcode_0xED62();    break; 
       case 0x63:   opcode_0xED63();    break; 
       case 0x64:   opcode_0xED44();    break; 
       case 0x65:   opcode_0xED45();    break; 
       case 0x66:   opcode_0xED46();    break; 
       case 0x67:   opcode_0xED67();    break; 
       case 0x68:   opcode_0xED68();    break; 
       case 0x69:   opcode_0xED69();    break; 
       case 0x6A:   opcode_0xED6A();    break; 
       case 0x6B:   opcode_0xED6B();    break; 
       case 0x6C:   opcode_0xED44();    break; 
       case 0x6D:   opcode_0xED45();    break; 
       case 0x6E:   opcode_0x00();      break; 
       case 0x6F:   opcode_0xED6F();    break; 
       case 0x70:   opcode_0xED70();    break; 
       case 0x71:   opcode_0xED71();    break; 
       case 0x72:   opcode_0xED72();    break; 
       case 0x73:   opcode_0xED73();    break; 
       case 0x74:   opcode_0xED44();    break; 
       case 0x75:   opcode_0xED45();    break; 
       case 0x76:   opcode_0xED56();    break; 
       case 0x77:   opcode_0x00();      break; 
       case 0x78:   opcode_0xED78();    break; 
       case 0x79:   opcode_0xED79();    break; 
       case 0x7A:   opcode_0xED7A();    break; 
       case 0x7B:   opcode_0xED7B();    break; 
       case 0x7C:   opcode_0xED44();    break; 
       case 0x7D:   opcode_0xED45();    break; 
       case 0x7E:   opcode_0xED5E();    break; 
       case 0x7F:   opcode_0x00();      break; 
       case 0x80:   opcode_0x00();      break; 
       case 0x81:   opcode_0x00();      break; 
       case 0x82:   opcode_0x00();      break; 
       case 0x83:   opcode_0x00();      break; 
       case 0x84:   opcode_0x00();      break; 
       case 0x85:   opcode_0x00();      break; 
       case 0x86:   opcode_0x00();      break; 
       case 0x87:   opcode_0x00();      break; 
       case 0x88:   opcode_0x00();      break; 
       case 0x89:   opcode_0x00();      break; 
       case 0x8A:   opcode_0x00();      break; 
       case 0x8B:   opcode_0x00();      break; 
       case 0x8C:   opcode_0x00();      break; 
       case 0x8D:   opcode_0x00();      break; 
       case 0x8E:   opcode_0x00();      break; 
       case 0x8F:   opcode_0x00();      break; 
       case 0x90:   opcode_0x00();      break;   
       case 0x91:   opcode_0x00();      break;  
       case 0x92:   opcode_0x00();      break;  
       case 0x93:   opcode_0x00();      break;  
       case 0x94:   opcode_0x00();      break;  
       case 0x95:   opcode_0x00();      break;  
       case 0x96:   opcode_0x00();      break;  
       case 0x97:   opcode_0x00();      break;  
       case 0x98:   opcode_0x00();      break; 
       case 0x99:   opcode_0x00();      break; 
       case 0x9A:   opcode_0x00();      break; 
       case 0x9B:   opcode_0x00();      break; 
       case 0x9C:   opcode_0x00();      break; 
       case 0x9D:   opcode_0x00();      break; 
       case 0x9E:   opcode_0x00();      break; 
       case 0x9F:   opcode_0x00();      break; 
       case 0xA0:   opcode_0xEDA0();    break; 
       case 0xA1:   opcode_0xEDA1();    break; 
       case 0xA2:   opcode_0xEDA2();    break; 
       case 0xA3:   opcode_0xEDA3();    break; 
       case 0xA4:   opcode_0x00();      break; 
       case 0xA5:   opcode_0x00();      break; 
       case 0xA6:   opcode_0x00();      break; 
       case 0xA7:   opcode_0x00();      break; 
       case 0xA8:   opcode_0xEDA8();    break; 
       case 0xA9:   opcode_0xEDA9();    break; 
       case 0xAA:   opcode_0xEDAA();    break; 
       case 0xAB:   opcode_0xEDAB();    break; 
       case 0xAC:   opcode_0x00();      break; 
       case 0xAD:   opcode_0x00();      break; 
       case 0xAE:   opcode_0x00();      break; 
       case 0xAF:   opcode_0x00();      break; 
       case 0xB0:   opcode_0xEDA0();    break; 
       case 0xB1:   opcode_0xEDA1();    break; 
       case 0xB2:   opcode_0xEDA2();    break; 
       case 0xB3:   opcode_0xEDA3();    break; 
       case 0xB4:   opcode_0x00();      break; 
       case 0xB5:   opcode_0x00();      break; 
       case 0xB6:   opcode_0x00();      break; 
       case 0xB7:   opcode_0x00();      break; 
       case 0xB8:   opcode_0xEDA8();    break; 
       case 0xB9:   opcode_0xEDA9();    break; 
       case 0xBA:   opcode_0xEDAA();    break; 
       case 0xBB:   opcode_0xEDAB();    break; 
       case 0xBC:   opcode_0x00();      break; 
       case 0xBD:   opcode_0x00();      break; 
       case 0xBE:   opcode_0x00();      break; 
       case 0xBF:   opcode_0x00();      break; 
       case 0xC0:   opcode_0x00();      break; 
       case 0xC1:   opcode_0x00();      break; 
       case 0xC2:   opcode_0x00();      break; 
       case 0xC3:   opcode_0x00();      break; 
       case 0xC4:   opcode_0x00();      break; 
       case 0xC5:   opcode_0x00();      break; 
       case 0xC6:   opcode_0x00();      break; 
       case 0xC7:   opcode_0x00();      break; 
       case 0xC8:   opcode_0x00();      break; 
       case 0xC9:   opcode_0x00();      break; 
       case 0xCA:   opcode_0x00();      break; 
       case 0xCB:   opcode_0x00();      break; 
       case 0xCC:   opcode_0x00();      break; 
       case 0xCD:   opcode_0x00();      break; 
       case 0xCE:   opcode_0x00();      break; 
       case 0xCF:   opcode_0x00();      break; 
       case 0xD0:   opcode_0x00();      break; 
       case 0xD1:   opcode_0x00();      break; 
       case 0xD2:   opcode_0x00();      break; 
       case 0xD3:   opcode_0x00();      break; 
       case 0xD4:   opcode_0x00();      break; 
       case 0xD5:   opcode_0x00();      break; 
       case 0xD6:   opcode_0x00();      break; 
       case 0xD7:   opcode_0x00();      break; 
       case 0xD8:   opcode_0x00();      break; 
       case 0xD9:   opcode_0x00();      break; 
       case 0xDA:   opcode_0x00();      break; 
       case 0xDB:   opcode_0x00();      break; 
       case 0xDC:   opcode_0x00();      break; 
       case 0xDD:   opcode_0x00();      break; 
       case 0xDE:   opcode_0x00();      break; 
       case 0xDF:   opcode_0x00();      break; 
       case 0xE0:   opcode_0x00();      break; 
       case 0xE1:   opcode_0x00();      break; 
       case 0xE2:   opcode_0x00();      break; 
       case 0xE3:   opcode_0x00();      break; 
       case 0xE4:   opcode_0x00();      break; 
       case 0xE5:   opcode_0x00();      break; 
       case 0xE6:   opcode_0x00();      break; 
       case 0xE7:   opcode_0x00();      break; 
       case 0xE8:   opcode_0x00();      break; 
       case 0xE9:   opcode_0x00();      break; 
       case 0xEA:   opcode_0x00();      break; 
       case 0xEB:   opcode_0x00();      break; 
       case 0xEC:   opcode_0x00();      break; 
       case 0xED:   opcode_0x00();      break; 
       case 0xEE:   opcode_0x00();      break; 
       case 0xEF:   opcode_0x00();      break; 
       case 0xF0:   opcode_0x00();      break; 
       case 0xF1:   opcode_0x00();      break; 
       case 0xF2:   opcode_0x00();      break; 
       case 0xF3:   opcode_0x00();      break; 
       case 0xF4:   opcode_0x00();      break; 
       case 0xF5:   opcode_0x00();      break;   
       case 0xF6:   opcode_0x00();      break;  
       case 0xF7:   opcode_0x00();      break;  
       case 0xF8:   opcode_0x00();      break;   
       case 0xF9:   opcode_0x00();      break;   
       case 0xFA:   opcode_0x00();      break;  
       case 0xFB:   opcode_0x00();      break;  
       case 0xFC:   opcode_0x00();      break;   
       case 0xFD:   opcode_0x00();      break;   
       case 0xFE:   opcode_0x00();      break;   
       case 0xFF:   opcode_0x00();      break;   
      }
      
    return;
}
      
// ------------------------------------------------------------------------------------------------------------
// Decode the first byte of the opcode
// ------------------------------------------------------------------------------------------------------------
void execute_instruction()  {
    
    opcode_byte = Fetch_opcode(); 
    clock_counter=Opcode_Timing_Main[opcode_byte];

    switch (opcode_byte)  {
        
       case 0x00:   opcode_0x00();    break; 
       case 0x01:   opcode_0x01();    break; 
       case 0x02:   opcode_0x02();    break; 
       case 0x03:   opcode_0x03();    break; 
       case 0x04:   opcode_0x04();    break; 
       case 0x05:   opcode_0x05();    break; 
       case 0x06:   opcode_0x06();    break; 
       case 0x07:   opcode_0x07();    break; 
       case 0x08:   opcode_0x08();    break; 
       case 0x09:   opcode_0x09();    break; 
       case 0x0A:   opcode_0x0A();    break; 
       case 0x0B:   opcode_0x0B();    break; 
       case 0x0C:   opcode_0x0C();    break; 
       case 0x0D:   opcode_0x0D();    break; 
       case 0x0E:   opcode_0x0E();    break; 
       case 0x0F:   opcode_0x0F();    break; 
       case 0x10:   opcode_0x10();    break; 
       case 0x11:   opcode_0x11();    break; 
       case 0x12:   opcode_0x12();    break; 
       case 0x13:   opcode_0x13();    break; 
       case 0x14:   opcode_0x14();    break; 
       case 0x15:   opcode_0x15();    break; 
       case 0x16:   opcode_0x16();    break; 
       case 0x17:   opcode_0x17();    break; 
       case 0x18:   opcode_0x18();    break; 
       case 0x19:   opcode_0x19();    break; 
       case 0x1A:   opcode_0x1A();    break; 
       case 0x1B:   opcode_0x1B();    break; 
       case 0x1C:   opcode_0x1C();    break; 
       case 0x1D:   opcode_0x1D();    break; 
       case 0x1E:   opcode_0x1E();    break; 
       case 0x1F:   opcode_0x1F();    break; 
       case 0x20:   opcode_0x20();    break; 
       case 0x21:   opcode_0x21();    break; 
       case 0x22:   opcode_0x22();    break; 
       case 0x23:   opcode_0x23();    break; 
       case 0x24:   opcode_0x24();    break; 
       case 0x25:   opcode_0x25();    break; 
       case 0x26:   opcode_0x26();    break; 
       case 0x27:   opcode_0x27();    break; 
       case 0x28:   opcode_0x28();    break; 
       case 0x29:   opcode_0x29();    break; 
       case 0x2A:   opcode_0x2A();    break; 
       case 0x2B:   opcode_0x2B();    break; 
       case 0x2C:   opcode_0x2C();    break; 
       case 0x2D:   opcode_0x2D();    break; 
       case 0x2E:   opcode_0x2E();    break; 
       case 0x2F:   opcode_0x2F();    break; 
       case 0x30:   opcode_0x30();    break; 
       case 0x31:   opcode_0x31();    break; 
       case 0x32:   opcode_0x32();    break; 
       case 0x33:   opcode_0x33();    break; 
       case 0x34:   opcode_0x34();    break; 
       case 0x35:   opcode_0x35();    break; 
       case 0x36:   opcode_0x36();    break; 
       case 0x37:   opcode_0x37();    break; 
       case 0x38:   opcode_0x38();    break; 
       case 0x39:   opcode_0x39();    break; 
       case 0x3a:   opcode_0x3A();    break; 
       case 0x3B:   opcode_0x3B();    break; 
       case 0x3C:   opcode_0x3C();    break; 
       case 0x3D:   opcode_0x3D();    break; 
       case 0x3E:   opcode_0x3E();    break; 
       case 0x3F:   opcode_0x3F();    break; 
       case 0x40:   opcode_0x40();    break; 
       case 0x41:   opcode_0x41();    break; 
       case 0x42:   opcode_0x42();    break; 
       case 0x43:   opcode_0x43();    break; 
       case 0x44:   opcode_0x44();    break; 
       case 0x45:   opcode_0x45();    break; 
       case 0x46:   opcode_0x46();    break; 
       case 0x47:   opcode_0x47();    break; 
       case 0x48:   opcode_0x48();    break; 
       case 0x49:   opcode_0x49();    break; 
       case 0x4A:   opcode_0x4A();    break; 
       case 0x4B:   opcode_0x4B();    break; 
       case 0x4C:   opcode_0x4C();    break; 
       case 0x4D:   opcode_0x4D();    break; 
       case 0x4E:   opcode_0x4E();    break; 
       case 0x4F:   opcode_0x4F();    break; 
       case 0x50:   opcode_0x50();    break; 
       case 0x51:   opcode_0x51();    break; 
       case 0x52:   opcode_0x52();    break; 
       case 0x53:   opcode_0x53();    break; 
       case 0x54:   opcode_0x54();    break; 
       case 0x55:   opcode_0x55();    break; 
       case 0x56:   opcode_0x56();    break; 
       case 0x57:   opcode_0x57();    break; 
       case 0x58:   opcode_0x58();    break; 
       case 0x59:   opcode_0x59();    break; 
       case 0x5A:   opcode_0x5A();    break; 
       case 0x5B:   opcode_0x5B();    break; 
       case 0x5C:   opcode_0x5C();    break; 
       case 0x5D:   opcode_0x5D();    break; 
       case 0x5E:   opcode_0x5E();    break; 
       case 0x5F:   opcode_0x5F();    break; 
       case 0x60:   opcode_0x60();    break; 
       case 0x61:   opcode_0x61();    break; 
       case 0x62:   opcode_0x62();    break; 
       case 0x63:   opcode_0x63();    break; 
       case 0x64:   opcode_0x64();    break; 
       case 0x65:   opcode_0x65();    break; 
       case 0x66:   opcode_0x66();    break; 
       case 0x67:   opcode_0x67();    break; 
       case 0x68:   opcode_0x68();    break; 
       case 0x69:   opcode_0x69();    break; 
       case 0x6A:   opcode_0x6A();    break; 
       case 0x6B:   opcode_0x6B();    break; 
       case 0x6C:   opcode_0x6C();    break; 
       case 0x6D:   opcode_0x6D();    break; 
       case 0x6E:   opcode_0x6E();    break; 
       case 0x6F:   opcode_0x6F();    break; 
       case 0x70:   opcode_0x70();    break; 
       case 0x71:   opcode_0x71();    break; 
       case 0x72:   opcode_0x72();    break; 
       case 0x73:   opcode_0x73();    break; 
       case 0x74:   opcode_0x74();    break; 
       case 0x75:   opcode_0x75();    break; 
       case 0x76:   opcode_0x76();    break; 
       case 0x77:   opcode_0x77();    break; 
       case 0x78:   opcode_0x78();    break; 
       case 0x79:   opcode_0x79();    break; 
       case 0x7A:   opcode_0x7A();    break; 
       case 0x7B:   opcode_0x7B();    break; 
       case 0x7C:   opcode_0x7C();    break; 
       case 0x7D:   opcode_0x7D();    break; 
       case 0x7E:   opcode_0x7E();    break; 
       case 0x7F:   opcode_0x7F();    break; 
       case 0x80:   opcode_0x80();    break; 
       case 0x81:   opcode_0x81();    break; 
       case 0x82:   opcode_0x82();    break; 
       case 0x83:   opcode_0x83();    break; 
       case 0x84:   opcode_0x84();    break; 
       case 0x85:   opcode_0x85();    break; 
       case 0x86:   opcode_0x86();    break; 
       case 0x87:   opcode_0x87();    break; 
       case 0x88:   opcode_0x88();    break; 
       case 0x89:   opcode_0x89();    break; 
       case 0x8A:   opcode_0x8A();    break; 
       case 0x8B:   opcode_0x8B();    break; 
       case 0x8C:   opcode_0x8C();    break; 
       case 0x8D:   opcode_0x8D();    break; 
       case 0x8E:   opcode_0x8E();    break; 
       case 0x8F:   opcode_0x8F();    break; 
       case 0x90:   opcode_0x90();    break; 
       case 0x91:   opcode_0x91();    break; 
       case 0x92:   opcode_0x92();    break; 
       case 0x93:   opcode_0x93();    break; 
       case 0x94:   opcode_0x94();    break; 
       case 0x95:   opcode_0x95();    break; 
       case 0x96:   opcode_0x96();    break; 
       case 0x97:   opcode_0x97();    break; 
       case 0x98:   opcode_0x98();    break; 
       case 0x99:   opcode_0x99();    break; 
       case 0x9A:   opcode_0x9A();    break; 
       case 0x9B:   opcode_0x9B();    break; 
       case 0x9C:   opcode_0x9C();    break; 
       case 0x9D:   opcode_0x9D();    break; 
       case 0x9E:   opcode_0x9E();    break; 
       case 0x9F:   opcode_0x9F();    break; 
       case 0xA0:   opcode_0xA0();    break; 
       case 0xA1:   opcode_0xA1();    break; 
       case 0xA2:   opcode_0xA2();    break; 
       case 0xA3:   opcode_0xA3();    break; 
       case 0xA4:   opcode_0xA4();    break; 
       case 0xA5:   opcode_0xA5();    break; 
       case 0xA6:   opcode_0xA6();    break; 
       case 0xA7:   opcode_0xA7();    break;        
       case 0xA8:   opcode_0xA8();    break; 
       case 0xA9:   opcode_0xA9();    break; 
       case 0xAA:   opcode_0xAA();    break; 
       case 0xAB:   opcode_0xAB();    break; 
       case 0xAC:   opcode_0xAC();    break; 
       case 0xAD:   opcode_0xAD();    break; 
       case 0xAE:   opcode_0xAE();    break; 
       case 0xAF:   opcode_0xAF();    break; 
       case 0xB0:   opcode_0xB0();    break; 
       case 0xB1:   opcode_0xB1();    break; 
       case 0xB2:   opcode_0xB2();    break; 
       case 0xB3:   opcode_0xB3();    break; 
       case 0xB4:   opcode_0xB4();    break; 
       case 0xB5:   opcode_0xB5();    break; 
       case 0xB6:   opcode_0xB6();    break; 
       case 0xB7:   opcode_0xB7();    break; 
       case 0xB8:   opcode_0xB8();    break; 
       case 0xB9:   opcode_0xB9();    break; 
       case 0xBA:   opcode_0xBA();    break; 
       case 0xBB:   opcode_0xBB();    break; 
       case 0xBC:   opcode_0xBC();    break; 
       case 0xBD:   opcode_0xBD();    break; 
       case 0xBE:   opcode_0xBE();    break; 
       case 0xBF:   opcode_0xBF();    break; 
       case 0xC0:   opcode_0xC0();    break; 
       case 0xC1:   opcode_0xC1();    break; 
       case 0xC2:   opcode_0xC2();    break; 
       case 0xC3:   opcode_0xC3();    break; 
       case 0xC4:   opcode_0xC4();    break; 
       case 0xC5:   opcode_0xC5();    break; 
       case 0xC6:   opcode_0xC6();    break; 
       case 0xC7:   opcode_0xC7();    break; 
       case 0xC8:   opcode_0xC8();    break; 
       case 0xC9:   opcode_0xC9();    break; 
       case 0xCA:   opcode_0xCA();    break; 
       case 0xCB:   decode_table_0xCB();    break; 
       case 0xCC:   opcode_0xCC();    break; 
       case 0xCD:   opcode_0xCD();    break; 
       case 0xCE:   opcode_0xCE();    break; 
       case 0xCF:   opcode_0xCF();    break; 
       case 0xD0:   opcode_0xD0();    break; 
       case 0xD1:   opcode_0xD1();    break; 
       case 0xD2:   opcode_0xD2();    break; 
       case 0xD3:   opcode_0xD3();    break; 
       case 0xD4:   opcode_0xD4();    break; 
       case 0xD5:   opcode_0xD5();    break; 
       case 0xD6:   opcode_0xD6();    break; 
       case 0xD7:   opcode_0xD7();    break; 
       case 0xD8:   opcode_0xD8();    break; 
       case 0xD9:   opcode_0xD9();    break; 
       case 0xDA:   opcode_0xDA();    break; 
       case 0xDB:   opcode_0xDB();    break; 
       case 0xDC:   opcode_0xDC();    break; 
       case 0xDD:   opcode_0xDD();    break; 
       case 0xDE:   opcode_0xDE();    break; 
       case 0xDF:   opcode_0xDF();    break; 
       case 0xE0:   opcode_0xE0();    break; 
       case 0xE1:   opcode_0xE1();    break; 
       case 0xE2:   opcode_0xE2();    break; 
       case 0xE3:   opcode_0xE3();    break; 
       case 0xE4:   opcode_0xE4();    break; 
       case 0xE5:   opcode_0xE5();    break; 
       case 0xE6:   opcode_0xE6();    break;        
       case 0xE7:   opcode_0xE7();    break; 
       case 0xE8:   opcode_0xE8();    break; 
       case 0xE9:   opcode_0xE9();    break; 
       case 0xEA:   opcode_0xEA();    break; 
       case 0xEB:   opcode_0xEB();    break; 
       case 0xEC:   opcode_0xEC();    break; 
       case 0xED:   decode_table_0xED();    break; 
       case 0xEE:   opcode_0xEE();    break; 
       case 0xEF:   opcode_0xEF();    break; 
       case 0xF0:   opcode_0xF0();    break; 
       case 0xF1:   opcode_0xF1();    break; 
       case 0xF2:   opcode_0xF2();    break; 
       case 0xF3:   opcode_0xF3();    break; 
       case 0xF4:   opcode_0xF4();    break; 
       case 0xF5:   opcode_0xF5();    break; 
       case 0xF6:   opcode_0xF6();    break; 
       case 0xF7:   opcode_0xF7();    break; 
       case 0xF8:   opcode_0xF8();    break; 
       case 0xF9:   opcode_0xF9();    break; 
       case 0xFA:   opcode_0xFA();    break; 
       case 0xFB:   opcode_0xFB();    break; 
       case 0xFC:   opcode_0xFC();    break; 
       case 0xFD:   opcode_0xFD();    break;   
       case 0xFE:   opcode_0xFE();    break; 
       case 0xFF:   opcode_0xFF();    break; 
      }
      
return;
}

// -------------------------------------------------
//
// Disassemble command at pc - return address of next instruction
//
// -------------------------------------------------
uint16_t disassemble (char * str, uint16_t opcode_address)
{
  switch (Read_byte (opcode_address)) {
    case 0x00: sprintf (str,"nop"); return (opcode_address + 1);
    case 0x01: sprintf (str,"ld bc,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0x02: sprintf (str,"ld (bc),a"); return (opcode_address + 1);
    case 0x03: sprintf (str,"inc bc"); return (opcode_address + 1);
    case 0x04: sprintf (str,"inc b"); return (opcode_address + 1);
    case 0x05: sprintf (str,"dec b"); return (opcode_address + 1);
    case 0x06: sprintf (str,"ld b,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0x07: sprintf (str,"rlca"); return (opcode_address + 1);
    case 0x08: sprintf (str,"ex af,af'"); return (opcode_address + 1);
    case 0x09: sprintf (str,"add hl,bc"); return (opcode_address + 1);
    case 0x0a: sprintf (str,"ld a,(bc)"); return (opcode_address + 1);
    case 0x0b: sprintf (str,"dec bc"); return (opcode_address + 1);
    case 0x0c: sprintf (str,"inc c"); return (opcode_address + 1);
    case 0x0d: sprintf (str,"dec c"); return (opcode_address + 1);
    case 0x0e: sprintf (str,"ld c,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0x0f: sprintf (str,"rrca"); return (opcode_address + 1);
    case 0x10: sprintf (str,"djnz %04x", (0xffff & (opcode_address + 2 + Sign_Extend (Read_byte (opcode_address+1))))); return (opcode_address + 2);
    case 0x11: sprintf (str,"ld de, %02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0x12: sprintf (str,"ld (de),a"); return (opcode_address + 1);
    case 0x13: sprintf (str,"inc de"); return (opcode_address + 1);
    case 0x14: sprintf (str,"inc d"); return (opcode_address + 1);
    case 0x15: sprintf (str,"dec d"); return (opcode_address + 1);
    case 0x16: sprintf (str,"ld d,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0x17: sprintf (str,"rla"); return (opcode_address + 1);
    case 0x18: sprintf (str,"jr %04x", (0xffff & (opcode_address + 2 + Sign_Extend (Read_byte (opcode_address+1))))); return (opcode_address + 2);
    case 0x19: sprintf (str,"add hl,de"); return (opcode_address + 1);
    case 0x1a: sprintf (str,"ld a,(de)"); return (opcode_address + 1);
    case 0x1b: sprintf (str,"dec de"); return (opcode_address + 1);
    case 0x1c: sprintf (str,"inc e"); return (opcode_address + 1);
    case 0x1d: sprintf (str,"dec e"); return (opcode_address + 1);
    case 0x1e: sprintf (str,"ld e,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0x1f: sprintf (str,"rra"); return (opcode_address + 1);
    case 0x20: sprintf (str,"jr nz,%04x", (0xffff & (opcode_address + 2 + Sign_Extend (Read_byte (opcode_address+1))))); return (opcode_address + 2);
    case 0x21: sprintf (str,"ld hl,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0x22: sprintf (str,"ld (%02x%02x),hl", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0x23: sprintf (str,"inc hl"); return (opcode_address + 1);
    case 0x24: sprintf (str,"inc h"); return (opcode_address + 1);
    case 0x25: sprintf (str,"dec h"); return (opcode_address + 1);
    case 0x26: sprintf (str,"ld h,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0x27: sprintf (str,"daa"); return (opcode_address + 1);
    case 0x28: sprintf (str,"jr z,%04x", (0xffff & (opcode_address + 2 + Sign_Extend (Read_byte (opcode_address+1))))); return (opcode_address + 2);
    case 0x29: sprintf (str,"add hl,hl"); return (opcode_address + 1);
    case 0x2a: sprintf (str,"ld hl,(%02x%02x)", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0x2b: sprintf (str,"dec hl"); return (opcode_address + 1);
    case 0x2c: sprintf (str,"inc l"); return (opcode_address + 1);
    case 0x2d: sprintf (str,"dec l"); return (opcode_address + 1);
    case 0x2e: sprintf (str,"ld l,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0x2f: sprintf (str,"cpl"); return (opcode_address + 1);
    case 0x30: sprintf (str,"jr nc,%04x", (0xffff & (opcode_address + 2 + Sign_Extend (Read_byte (opcode_address+1))))); return (opcode_address + 2);
    case 0x31: sprintf (str,"ld sp,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0x32: sprintf (str,"ld (%02x%02x),a", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0x33: sprintf (str,"inc sp"); return (opcode_address + 1);
    case 0x34: sprintf (str,"inc (hl)"); return (opcode_address + 1);
    case 0x35: sprintf (str,"dec (hl)"); return (opcode_address + 1);
    case 0x36: sprintf (str,"ld (hl),%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0x37: sprintf (str,"scf"); return (opcode_address + 1);
    case 0x38: sprintf (str,"jr c,%04x", (0xffff & (opcode_address + 2 + Sign_Extend (Read_byte (opcode_address+1))))); return (opcode_address + 2);
    case 0x39: sprintf (str,"add hl,sp"); return (opcode_address + 1);
    case 0x3a: sprintf (str,"ld a,(%02x%02x)", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0x3b: sprintf (str,"dec sp"); return (opcode_address + 1);
    case 0x3c: sprintf (str,"inc a"); return (opcode_address + 1);
    case 0x3d: sprintf (str,"dec a"); return (opcode_address + 1);
    case 0x3e: sprintf (str,"ld a,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0x3f: sprintf (str,"ccf"); return (opcode_address + 1);
    case 0x40: sprintf (str,"ld b,b"); return (opcode_address + 1);
    case 0x41: sprintf (str,"ld b,c"); return (opcode_address + 1);
    case 0x42: sprintf (str,"ld b,d"); return (opcode_address + 1);
    case 0x43: sprintf (str,"ld b,e"); return (opcode_address + 1);
    case 0x44: sprintf (str,"ld b,h"); return (opcode_address + 1);
    case 0x45: sprintf (str,"ld b,l"); return (opcode_address + 1);
    case 0x46: sprintf (str,"ld b,(hl)"); return (opcode_address + 1);
    case 0x47: sprintf (str,"ld b,a"); return (opcode_address + 1);
    case 0x48: sprintf (str,"ld c,b"); return (opcode_address + 1);
    case 0x49: sprintf (str,"ld c,c"); return (opcode_address + 1);
    case 0x4a: sprintf (str,"ld c,d"); return (opcode_address + 1);
    case 0x4b: sprintf (str,"ld c,e"); return (opcode_address + 1);
    case 0x4c: sprintf (str,"ld c,h"); return (opcode_address + 1);
    case 0x4d: sprintf (str,"ld c,l"); return (opcode_address + 1);
    case 0x4e: sprintf (str,"ld c,(hl)"); return (opcode_address + 1);
    case 0x4f: sprintf (str,"ld c,a"); return (opcode_address + 1);
    case 0x50: sprintf (str,"ld d,b"); return (opcode_address + 1);
    case 0x51: sprintf (str,"ld d,c"); return (opcode_address + 1);
    case 0x52: sprintf (str,"ld d,d"); return (opcode_address + 1);
    case 0x53: sprintf (str,"ld d,e"); return (opcode_address + 1);
    case 0x54: sprintf (str,"ld d,h"); return (opcode_address + 1);
    case 0x55: sprintf (str,"ld d,l"); return (opcode_address + 1);
    case 0x56: sprintf (str,"ld d,(hl)"); return (opcode_address + 1);
    case 0x57: sprintf (str,"ld d,a"); return (opcode_address + 1);
    case 0x58: sprintf (str,"ld e,b"); return (opcode_address + 1);
    case 0x59: sprintf (str,"ld e,c"); return (opcode_address + 1);
    case 0x5a: sprintf (str,"ld e,d"); return (opcode_address + 1);
    case 0x5b: sprintf (str,"ld e,e"); return (opcode_address + 1);
    case 0x5c: sprintf (str,"ld e,h"); return (opcode_address + 1);
    case 0x5d: sprintf (str,"ld e,l"); return (opcode_address + 1);
    case 0x5e: sprintf (str,"ld e,(hl)"); return (opcode_address + 1);
    case 0x5f: sprintf (str,"ld e,a"); return (opcode_address + 1);
    case 0x60: sprintf (str,"ld h,b"); return (opcode_address + 1);
    case 0x61: sprintf (str,"ld h,c"); return (opcode_address + 1);
    case 0x62: sprintf (str,"ld h,d"); return (opcode_address + 1);
    case 0x63: sprintf (str,"ld h,e"); return (opcode_address + 1);
    case 0x64: sprintf (str,"ld h,h"); return (opcode_address + 1);
    case 0x65: sprintf (str,"ld h,l"); return (opcode_address + 1);
    case 0x66: sprintf (str,"ld h,(hl)"); return (opcode_address + 1);
    case 0x67: sprintf (str,"ld h,a"); return (opcode_address + 1);
    case 0x68: sprintf (str,"ld l,b"); return (opcode_address + 1);
    case 0x69: sprintf (str,"ld l,c"); return (opcode_address + 1);
    case 0x6a: sprintf (str,"ld l,d"); return (opcode_address + 1);
    case 0x6b: sprintf (str,"ld l,e"); return (opcode_address + 1);
    case 0x6c: sprintf (str,"ld l,h"); return (opcode_address + 1);
    case 0x6d: sprintf (str,"ld l,l"); return (opcode_address + 1);
    case 0x6e: sprintf (str,"ld l,(hl)"); return (opcode_address + 1);
    case 0x6f: sprintf (str,"ld l,a"); return (opcode_address + 1);
    case 0x70: sprintf (str,"ld (hl),b"); return (opcode_address + 1);
    case 0x71: sprintf (str,"ld (hl),c"); return (opcode_address + 1);
    case 0x72: sprintf (str,"ld (hl),d"); return (opcode_address + 1);
    case 0x73: sprintf (str,"ld (hl),e"); return (opcode_address + 1);
    case 0x74: sprintf (str,"ld (hl),h"); return (opcode_address + 1);
    case 0x75: sprintf (str,"ld (hl),l"); return (opcode_address + 1);
    case 0x76: sprintf (str,"halt"); return (opcode_address + 1);
    case 0x77: sprintf (str,"ld (hl),a"); return (opcode_address + 1);
    case 0x78: sprintf (str,"ld a,b"); return (opcode_address + 1);
    case 0x79: sprintf (str,"ld a,c"); return (opcode_address + 1);
    case 0x7a: sprintf (str,"ld a,d"); return (opcode_address + 1);
    case 0x7b: sprintf (str,"ld a,e"); return (opcode_address + 1);
    case 0x7c: sprintf (str,"ld a,h"); return (opcode_address + 1);
    case 0x7d: sprintf (str,"ld a,l"); return (opcode_address + 1);
    case 0x7e: sprintf (str,"ld a,(hl)"); return (opcode_address + 1);
    case 0x7f: sprintf (str,"ld a,a"); return (opcode_address + 1);
    case 0x80: sprintf (str,"add a,b"); return (opcode_address + 1);
    case 0x81: sprintf (str,"add a,c"); return (opcode_address + 1);
    case 0x82: sprintf (str,"add a,d"); return (opcode_address + 1);
    case 0x83: sprintf (str,"add a,e"); return (opcode_address + 1);
    case 0x84: sprintf (str,"add a,h"); return (opcode_address + 1);
    case 0x85: sprintf (str,"add a,l"); return (opcode_address + 1);
    case 0x86: sprintf (str,"add a,(hl)"); return (opcode_address + 1);
    case 0x87: sprintf (str,"add a,a"); return (opcode_address + 1);
    case 0x88: sprintf (str,"adc a,b"); return (opcode_address + 1);
    case 0x89: sprintf (str,"adc a,c"); return (opcode_address + 1);
    case 0x8a: sprintf (str,"adc a,d"); return (opcode_address + 1);
    case 0x8b: sprintf (str,"adc a,e"); return (opcode_address + 1);
    case 0x8c: sprintf (str,"adc a,h"); return (opcode_address + 1);
    case 0x8d: sprintf (str,"adc a,l"); return (opcode_address + 1);
    case 0x8e: sprintf (str,"adc a,(hl)"); return (opcode_address + 1);
    case 0x8f: sprintf (str,"adc a,a"); return (opcode_address + 1);
    case 0x90: sprintf (str,"sub b"); return (opcode_address + 1);
    case 0x91: sprintf (str,"sub c"); return (opcode_address + 1);
    case 0x92: sprintf (str,"sub d"); return (opcode_address + 1);
    case 0x93: sprintf (str,"sub e"); return (opcode_address + 1);
    case 0x94: sprintf (str,"sub h"); return (opcode_address + 1);
    case 0x95: sprintf (str,"sub l"); return (opcode_address + 1);
    case 0x96: sprintf (str,"sub (hl)"); return (opcode_address + 1);
    case 0x97: sprintf (str,"sub a"); return (opcode_address + 1);
    case 0x98: sprintf (str,"sbc a,b"); return (opcode_address + 1);
    case 0x99: sprintf (str,"sbc a,c"); return (opcode_address + 1);
    case 0x9a: sprintf (str,"sbc a,d"); return (opcode_address + 1);
    case 0x9b: sprintf (str,"sbc a,e"); return (opcode_address + 1);
    case 0x9c: sprintf (str,"sbc a,h"); return (opcode_address + 1);
    case 0x9d: sprintf (str,"sbc a,l"); return (opcode_address + 1);
    case 0x9e: sprintf (str,"sbc a,(hl)"); return (opcode_address + 1);
    case 0x9f: sprintf (str,"sbc a,a"); return (opcode_address + 1);
    case 0xa0: sprintf (str,"and b"); return (opcode_address + 1);
    case 0xa1: sprintf (str,"and c"); return (opcode_address + 1);
    case 0xa2: sprintf (str,"and d"); return (opcode_address + 1);
    case 0xa3: sprintf (str,"and e"); return (opcode_address + 1);
    case 0xa4: sprintf (str,"and h"); return (opcode_address + 1);
    case 0xa5: sprintf (str,"and l"); return (opcode_address + 1);
    case 0xa6: sprintf (str,"and (hl)"); return (opcode_address + 1);
    case 0xa7: sprintf (str,"and a"); return (opcode_address + 1);
    case 0xa8: sprintf (str,"xor b"); return (opcode_address + 1);
    case 0xa9: sprintf (str,"xor c"); return (opcode_address + 1);
    case 0xaa: sprintf (str,"xor d"); return (opcode_address + 1);
    case 0xab: sprintf (str,"xor e"); return (opcode_address + 1);
    case 0xac: sprintf (str,"xor h"); return (opcode_address + 1);
    case 0xad: sprintf (str,"xor l"); return (opcode_address + 1);
    case 0xae: sprintf (str,"xor (hl)"); return (opcode_address + 1);
    case 0xaf: sprintf (str,"xor a"); return (opcode_address + 1);
    case 0xb0: sprintf (str,"or b"); return (opcode_address + 1);
    case 0xb1: sprintf (str,"or c"); return (opcode_address + 1);
    case 0xb2: sprintf (str,"or d"); return (opcode_address + 1);
    case 0xb3: sprintf (str,"or e"); return (opcode_address + 1);
    case 0xb4: sprintf (str,"or h"); return (opcode_address + 1);
    case 0xb5: sprintf (str,"or l"); return (opcode_address + 1);
    case 0xb6: sprintf (str,"or (hl)"); return (opcode_address + 1);
    case 0xb7: sprintf (str,"or a"); return (opcode_address + 1);
    case 0xb8: sprintf (str,"cp b"); return (opcode_address + 1);
    case 0xb9: sprintf (str,"cp c"); return (opcode_address + 1);
    case 0xba: sprintf (str,"cp d"); return (opcode_address + 1);
    case 0xbb: sprintf (str,"cp e"); return (opcode_address + 1);
    case 0xbc: sprintf (str,"cp h"); return (opcode_address + 1);
    case 0xbd: sprintf (str,"cp l"); return (opcode_address + 1);
    case 0xbe: sprintf (str,"cp (hl)"); return (opcode_address + 1);
    case 0xbf: sprintf (str,"cp a"); return (opcode_address + 1);
    case 0xc0: sprintf (str,"ret nz"); return (opcode_address + 1);
    case 0xc1: sprintf (str,"pop bc"); return (opcode_address + 1);
    case 0xc2: sprintf (str,"jp nz,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xc3: sprintf (str,"jp %02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xc4: sprintf (str,"call nz,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xc5: sprintf (str,"push bc"); return (opcode_address + 1);
    case 0xc6: sprintf (str,"add a,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xc7: sprintf (str,"rst 00h"); return (opcode_address + 1);
    case 0xc8: sprintf (str,"ret z"); return (opcode_address + 1);
    case 0xc9: sprintf (str,"ret"); return (opcode_address + 1);
    case 0xca: sprintf (str,"jp z,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xcb: { // Bit instructions
      switch (Read_byte (opcode_address+1)) { 
        case 0x00: sprintf (str,"rlc b"); return (opcode_address + 2);
        case 0x01: sprintf (str,"rlc c"); return (opcode_address + 2);
        case 0x02: sprintf (str,"rlc d"); return (opcode_address + 2);
        case 0x03: sprintf (str,"rlc e"); return (opcode_address + 2);
        case 0x04: sprintf (str,"rlc h"); return (opcode_address + 2);
        case 0x05: sprintf (str,"rlc l"); return (opcode_address + 2);
        case 0x06: sprintf (str,"rlc (hl)"); return (opcode_address + 2);
        case 0x07: sprintf (str,"rlc a"); return (opcode_address + 2);
        case 0x08: sprintf (str,"rrc b"); return (opcode_address + 2);
        case 0x09: sprintf (str,"rrc c"); return (opcode_address + 2);
        case 0x0a: sprintf (str,"rrc d"); return (opcode_address + 2);
        case 0x0b: sprintf (str,"rrc e"); return (opcode_address + 2);
        case 0x0c: sprintf (str,"rrc h"); return (opcode_address + 2);
        case 0x0d: sprintf (str,"rrc l"); return (opcode_address + 2);
        case 0x0e: sprintf (str,"rrc (hl)"); return (opcode_address + 2);
        case 0x0f: sprintf (str,"rrc a"); return (opcode_address + 2);
        case 0x10: sprintf (str,"rl b"); return (opcode_address + 2);
        case 0x11: sprintf (str,"rl c"); return (opcode_address + 2);
        case 0x12: sprintf (str,"rl d"); return (opcode_address + 2);
        case 0x13: sprintf (str,"rl e"); return (opcode_address + 2);
        case 0x14: sprintf (str,"rl h"); return (opcode_address + 2);
        case 0x15: sprintf (str,"rl l"); return (opcode_address + 2);
        case 0x16: sprintf (str,"rl (hl)"); return (opcode_address + 2);
        case 0x17: sprintf (str,"rl a"); return (opcode_address + 2);
        case 0x18: sprintf (str,"rr b"); return (opcode_address + 2);
        case 0x19: sprintf (str,"rr c"); return (opcode_address + 2);
        case 0x1a: sprintf (str,"rr d"); return (opcode_address + 2);
        case 0x1b: sprintf (str,"rr e"); return (opcode_address + 2);
        case 0x1c: sprintf (str,"rr h"); return (opcode_address + 2);
        case 0x1d: sprintf (str,"rr l"); return (opcode_address + 2);
        case 0x1e: sprintf (str,"rr (hl)"); return (opcode_address + 2);
        case 0x1f: sprintf (str,"rr a"); return (opcode_address + 2);
        case 0x20: sprintf (str,"sla b"); return (opcode_address + 2);
        case 0x21: sprintf (str,"sla c"); return (opcode_address + 2);
        case 0x22: sprintf (str,"sla d"); return (opcode_address + 2);
        case 0x23: sprintf (str,"sla e"); return (opcode_address + 2);
        case 0x24: sprintf (str,"sla h"); return (opcode_address + 2);
        case 0x25: sprintf (str,"sla l"); return (opcode_address + 2);
        case 0x26: sprintf (str,"sla (hl)"); return (opcode_address + 2);
        case 0x27: sprintf (str,"sla a"); return (opcode_address + 2);
        case 0x28: sprintf (str,"sra b"); return (opcode_address + 2);
        case 0x29: sprintf (str,"sra c"); return (opcode_address + 2);
        case 0x2a: sprintf (str,"sra d"); return (opcode_address + 2);
        case 0x2b: sprintf (str,"sra e"); return (opcode_address + 2);
        case 0x2c: sprintf (str,"sra h"); return (opcode_address + 2);
        case 0x2d: sprintf (str,"sra l"); return (opcode_address + 2);
        case 0x2e: sprintf (str,"sra (hl)"); return (opcode_address + 2);
        case 0x2f: sprintf (str,"sra a"); return (opcode_address + 2);
        case 0x38: sprintf (str,"srl b"); return (opcode_address + 2);
        case 0x39: sprintf (str,"srl c"); return (opcode_address + 2);
        case 0x3a: sprintf (str,"srl d"); return (opcode_address + 2);
        case 0x3b: sprintf (str,"srl e"); return (opcode_address + 2);
        case 0x3c: sprintf (str,"srl h"); return (opcode_address + 2);
        case 0x3d: sprintf (str,"srl l"); return (opcode_address + 2);
        case 0x3e: sprintf (str,"srl (hl)"); return (opcode_address + 2);
        case 0x3f: sprintf (str,"srl a"); return (opcode_address + 2);
        case 0x40: sprintf (str,"bit 0,b"); return (opcode_address + 2);
        case 0x41: sprintf (str,"bit 0,c"); return (opcode_address + 2);
        case 0x42: sprintf (str,"bit 0,d"); return (opcode_address + 2);
        case 0x43: sprintf (str,"bit 0,e"); return (opcode_address + 2);
        case 0x44: sprintf (str,"bit 0,h"); return (opcode_address + 2);
        case 0x45: sprintf (str,"bit 0,l"); return (opcode_address + 2);
        case 0x46: sprintf (str,"bit 0,(hl)"); return (opcode_address + 2);
        case 0x47: sprintf (str,"bit 0,a"); return (opcode_address + 2);
        case 0x48: sprintf (str,"bit 1,b"); return (opcode_address + 2);
        case 0x49: sprintf (str,"bit 1,c"); return (opcode_address + 2);
        case 0x4a: sprintf (str,"bit 1,d"); return (opcode_address + 2);
        case 0x4b: sprintf (str,"bit 1,e"); return (opcode_address + 2);
        case 0x4c: sprintf (str,"bit 1,h"); return (opcode_address + 2);
        case 0x4d: sprintf (str,"bit 1,l"); return (opcode_address + 2);
        case 0x4e: sprintf (str,"bit 1,(hl)"); return (opcode_address + 2);
        case 0x4f: sprintf (str,"bit 1,a"); return (opcode_address + 2);
        case 0x50: sprintf (str,"bit 2,b"); return (opcode_address + 2);
        case 0x51: sprintf (str,"bit 2,c"); return (opcode_address + 2);
        case 0x52: sprintf (str,"bit 2,d"); return (opcode_address + 2);
        case 0x53: sprintf (str,"bit 2,e"); return (opcode_address + 2);
        case 0x54: sprintf (str,"bit 2,h"); return (opcode_address + 2);
        case 0x55: sprintf (str,"bit 2,l"); return (opcode_address + 2);
        case 0x56: sprintf (str,"bit 2,(hl)"); return (opcode_address + 2);
        case 0x57: sprintf (str,"bit 2,a"); return (opcode_address + 2);
        case 0x58: sprintf (str,"bit 3,b"); return (opcode_address + 2);
        case 0x59: sprintf (str,"bit 3,c"); return (opcode_address + 2);
        case 0x5a: sprintf (str,"bit 3,d"); return (opcode_address + 2);
        case 0x5b: sprintf (str,"bit 3,e"); return (opcode_address + 2);
        case 0x5c: sprintf (str,"bit 3,h"); return (opcode_address + 2);
        case 0x5d: sprintf (str,"bit 3,l"); return (opcode_address + 2);
        case 0x5e: sprintf (str,"bit 3,(hl)"); return (opcode_address + 2);
        case 0x5f: sprintf (str,"bit 3,a"); return (opcode_address + 2);
        case 0x60: sprintf (str,"bit 4,b"); return (opcode_address + 2);
        case 0x61: sprintf (str,"bit 4,c"); return (opcode_address + 2);
        case 0x62: sprintf (str,"bit 4,d"); return (opcode_address + 2);
        case 0x63: sprintf (str,"bit 4,e"); return (opcode_address + 2);
        case 0x64: sprintf (str,"bit 4,h"); return (opcode_address + 2);
        case 0x65: sprintf (str,"bit 4,l"); return (opcode_address + 2);
        case 0x66: sprintf (str,"bit 4,(hl)"); return (opcode_address + 2);
        case 0x67: sprintf (str,"bit 4,a"); return (opcode_address + 2);
        case 0x68: sprintf (str,"bit 5,b"); return (opcode_address + 2);
        case 0x69: sprintf (str,"bit 5,c"); return (opcode_address + 2);
        case 0x6a: sprintf (str,"bit 5,d"); return (opcode_address + 2);
        case 0x6b: sprintf (str,"bit 5,e"); return (opcode_address + 2);
        case 0x6c: sprintf (str,"bit 5,h"); return (opcode_address + 2);
        case 0x6d: sprintf (str,"bit 5,l"); return (opcode_address + 2);
        case 0x6e: sprintf (str,"bit 5,(hl)"); return (opcode_address + 2);
        case 0x6f: sprintf (str,"bit 5,a"); return (opcode_address + 2);
        case 0x70: sprintf (str,"bit 6,b"); return (opcode_address + 2);
        case 0x71: sprintf (str,"bit 6,c"); return (opcode_address + 2);
        case 0x72: sprintf (str,"bit 6,d"); return (opcode_address + 2);
        case 0x73: sprintf (str,"bit 6,e"); return (opcode_address + 2);
        case 0x74: sprintf (str,"bit 6,h"); return (opcode_address + 2);
        case 0x75: sprintf (str,"bit 6,l"); return (opcode_address + 2);
        case 0x76: sprintf (str,"bit 6,(hl)"); return (opcode_address + 2);
        case 0x77: sprintf (str,"bit 6,a"); return (opcode_address + 2);
        case 0x78: sprintf (str,"bit 7,b"); return (opcode_address + 2);
        case 0x79: sprintf (str,"bit 7,c"); return (opcode_address + 2);
        case 0x7a: sprintf (str,"bit 7,d"); return (opcode_address + 2);
        case 0x7b: sprintf (str,"bit 7,e"); return (opcode_address + 2);
        case 0x7c: sprintf (str,"bit 7,h"); return (opcode_address + 2);
        case 0x7d: sprintf (str,"bit 7,l"); return (opcode_address + 2);
        case 0x7e: sprintf (str,"bit 7,(hl)"); return (opcode_address + 2);
        case 0x7f: sprintf (str,"bit 7,a"); return (opcode_address + 2);
        case 0x80: sprintf (str,"res 0,b"); return (opcode_address + 2);
        case 0x81: sprintf (str,"res 0,c"); return (opcode_address + 2);
        case 0x82: sprintf (str,"res 0,d"); return (opcode_address + 2);
        case 0x83: sprintf (str,"res 0,e"); return (opcode_address + 2);
        case 0x84: sprintf (str,"res 0,h"); return (opcode_address + 2);
        case 0x85: sprintf (str,"res 0,l"); return (opcode_address + 2);
        case 0x86: sprintf (str,"res 0,(hl)"); return (opcode_address + 2);
        case 0x87: sprintf (str,"res 0,a"); return (opcode_address + 2);
        case 0x88: sprintf (str,"res 1,b"); return (opcode_address + 2);
        case 0x89: sprintf (str,"res 1,c"); return (opcode_address + 2);
        case 0x8a: sprintf (str,"res 1,d"); return (opcode_address + 2);
        case 0x8b: sprintf (str,"res 1,e"); return (opcode_address + 2);
        case 0x8c: sprintf (str,"res 1,h"); return (opcode_address + 2);
        case 0x8d: sprintf (str,"res 1,l"); return (opcode_address + 2);
        case 0x8e: sprintf (str,"res 1,(hl)"); return (opcode_address + 2);
        case 0x8f: sprintf (str,"res 1,a"); return (opcode_address + 2);
        case 0x90: sprintf (str,"res 2,b"); return (opcode_address + 2);
        case 0x91: sprintf (str,"res 2,c"); return (opcode_address + 2);
        case 0x92: sprintf (str,"res 2,d"); return (opcode_address + 2);
        case 0x93: sprintf (str,"res 2,e"); return (opcode_address + 2);
        case 0x94: sprintf (str,"res 2,h"); return (opcode_address + 2);
        case 0x95: sprintf (str,"res 2,l"); return (opcode_address + 2);
        case 0x96: sprintf (str,"res 2,(hl)"); return (opcode_address + 2);
        case 0x97: sprintf (str,"res 2,a"); return (opcode_address + 2);
        case 0x98: sprintf (str,"res 3,b"); return (opcode_address + 2);
        case 0x99: sprintf (str,"res 3,c"); return (opcode_address + 2);
        case 0x9a: sprintf (str,"res 3,d"); return (opcode_address + 2);
        case 0x9b: sprintf (str,"res 3,e"); return (opcode_address + 2);
        case 0x9c: sprintf (str,"res 3,h"); return (opcode_address + 2);
        case 0x9d: sprintf (str,"res 3,l"); return (opcode_address + 2);
        case 0x9e: sprintf (str,"res 3,(hl)"); return (opcode_address + 2);
        case 0x9f: sprintf (str,"res 3,a"); return (opcode_address + 2);
        case 0xa0: sprintf (str,"res 4,b"); return (opcode_address + 2);
        case 0xa1: sprintf (str,"res 4,c"); return (opcode_address + 2);
        case 0xa2: sprintf (str,"res 4,d"); return (opcode_address + 2);
        case 0xa3: sprintf (str,"res 4,e"); return (opcode_address + 2);
        case 0xa4: sprintf (str,"res 4,h"); return (opcode_address + 2);
        case 0xa5: sprintf (str,"res 4,l"); return (opcode_address + 2);
        case 0xa6: sprintf (str,"res 4,(hl)"); return (opcode_address + 2);
        case 0xa7: sprintf (str,"res 4,a"); return (opcode_address + 2);
        case 0xa8: sprintf (str,"res 5,b"); return (opcode_address + 2);
        case 0xa9: sprintf (str,"res 5,c"); return (opcode_address + 2);
        case 0xaa: sprintf (str,"res 5,d"); return (opcode_address + 2);
        case 0xab: sprintf (str,"res 5,e"); return (opcode_address + 2);
        case 0xac: sprintf (str,"res 5,h"); return (opcode_address + 2);
        case 0xad: sprintf (str,"res 5,l"); return (opcode_address + 2);
        case 0xae: sprintf (str,"res 5,(hl)"); return (opcode_address + 2);
        case 0xaf: sprintf (str,"res 5,a"); return (opcode_address + 2);
        case 0xb0: sprintf (str,"res 6,b"); return (opcode_address + 2);
        case 0xb1: sprintf (str,"res 6,c"); return (opcode_address + 2);
        case 0xb2: sprintf (str,"res 6,d"); return (opcode_address + 2);
        case 0xb3: sprintf (str,"res 6,e"); return (opcode_address + 2);
        case 0xb4: sprintf (str,"res 6,h"); return (opcode_address + 2);
        case 0xb5: sprintf (str,"res 6,l"); return (opcode_address + 2);
        case 0xb6: sprintf (str,"res 6,(hl)"); return (opcode_address + 2);
        case 0xb7: sprintf (str,"res 6,a"); return (opcode_address + 2);
        case 0xb8: sprintf (str,"res 7,b"); return (opcode_address + 2);
        case 0xb9: sprintf (str,"res 7,c"); return (opcode_address + 2);
        case 0xba: sprintf (str,"res 7,d"); return (opcode_address + 2);
        case 0xbb: sprintf (str,"res 7,e"); return (opcode_address + 2);
        case 0xbc: sprintf (str,"res 7,h"); return (opcode_address + 2);
        case 0xbd: sprintf (str,"res 7,l"); return (opcode_address + 2);
        case 0xbe: sprintf (str,"res 7,(hl)"); return (opcode_address + 2);
        case 0xbf: sprintf (str,"res 7,a"); return (opcode_address + 2);
        case 0xc0: sprintf (str,"set 0,b"); return (opcode_address + 2);
        case 0xc1: sprintf (str,"set 0,c"); return (opcode_address + 2);
        case 0xc2: sprintf (str,"set 0,d"); return (opcode_address + 2);
        case 0xc3: sprintf (str,"set 0,e"); return (opcode_address + 2);
        case 0xc4: sprintf (str,"set 0,h"); return (opcode_address + 2);
        case 0xc5: sprintf (str,"set 0,l"); return (opcode_address + 2);
        case 0xc6: sprintf (str,"set 0,(hl)"); return (opcode_address + 2);
        case 0xc7: sprintf (str,"set 0,a"); return (opcode_address + 2);
        case 0xc8: sprintf (str,"set 1,b"); return (opcode_address + 2);
        case 0xc9: sprintf (str,"set 1,c"); return (opcode_address + 2);
        case 0xca: sprintf (str,"set 1,d"); return (opcode_address + 2);
        case 0xcb: sprintf (str,"set 1,e"); return (opcode_address + 2);
        case 0xcc: sprintf (str,"set 1,h"); return (opcode_address + 2);
        case 0xcd: sprintf (str,"set 1,l"); return (opcode_address + 2);
        case 0xce: sprintf (str,"set 1,(hl)"); return (opcode_address + 2);
        case 0xcf: sprintf (str,"set 1,a"); return (opcode_address + 2);
        case 0xd0: sprintf (str,"set 2,b"); return (opcode_address + 2);
        case 0xd1: sprintf (str,"set 2,c"); return (opcode_address + 2);
        case 0xd2: sprintf (str,"set 2,d"); return (opcode_address + 2);
        case 0xd3: sprintf (str,"set 2,e"); return (opcode_address + 2);
        case 0xd4: sprintf (str,"set 2,h"); return (opcode_address + 2);
        case 0xd5: sprintf (str,"set 2,l"); return (opcode_address + 2);
        case 0xd6: sprintf (str,"set 2,(hl)"); return (opcode_address + 2);
        case 0xd7: sprintf (str,"set 2,a"); return (opcode_address + 2);
        case 0xd8: sprintf (str,"set 3,b"); return (opcode_address + 2);
        case 0xd9: sprintf (str,"set 3,c"); return (opcode_address + 2);
        case 0xda: sprintf (str,"set 3,d"); return (opcode_address + 2);
        case 0xdb: sprintf (str,"set 3,e"); return (opcode_address + 2);
        case 0xdc: sprintf (str,"set 3,h"); return (opcode_address + 2);
        case 0xdd: sprintf (str,"set 3,l"); return (opcode_address + 2);
        case 0xde: sprintf (str,"set 3,(hl)"); return (opcode_address + 2);
        case 0xdf: sprintf (str,"set 3,a"); return (opcode_address + 2);
        case 0xe0: sprintf (str,"set 4,b"); return (opcode_address + 2);
        case 0xe1: sprintf (str,"set 4,c"); return (opcode_address + 2);
        case 0xe2: sprintf (str,"set 4,d"); return (opcode_address + 2);
        case 0xe3: sprintf (str,"set 4,e"); return (opcode_address + 2);
        case 0xe4: sprintf (str,"set 4,h"); return (opcode_address + 2);
        case 0xe5: sprintf (str,"set 4,l"); return (opcode_address + 2);
        case 0xe6: sprintf (str,"set 4,(hl)"); return (opcode_address + 2);
        case 0xe7: sprintf (str,"set 4,a"); return (opcode_address + 2);
        case 0xe8: sprintf (str,"set 5,b"); return (opcode_address + 2);
        case 0xe9: sprintf (str,"set 5,c"); return (opcode_address + 2);
        case 0xea: sprintf (str,"set 5,d"); return (opcode_address + 2);
        case 0xeb: sprintf (str,"set 5,e"); return (opcode_address + 2);
        case 0xec: sprintf (str,"set 5,h"); return (opcode_address + 2);
        case 0xed: sprintf (str,"set 5,l"); return (opcode_address + 2);
        case 0xee: sprintf (str,"set 5,(hl)"); return (opcode_address + 2);
        case 0xef: sprintf (str,"set 5,a"); return (opcode_address + 2);
        case 0xf0: sprintf (str,"set 6,b"); return (opcode_address + 2);
        case 0xf1: sprintf (str,"set 6,c"); return (opcode_address + 2);
        case 0xf2: sprintf (str,"set 6,d"); return (opcode_address + 2);
        case 0xf3: sprintf (str,"set 6,e"); return (opcode_address + 2);
        case 0xf4: sprintf (str,"set 6,h"); return (opcode_address + 2);
        case 0xf5: sprintf (str,"set 6,l"); return (opcode_address + 2);
        case 0xf6: sprintf (str,"set 6,(hl)"); return (opcode_address + 2);
        case 0xf7: sprintf (str,"set 6,a"); return (opcode_address + 2);
        case 0xf8: sprintf (str,"set 7,b"); return (opcode_address + 2);
        case 0xf9: sprintf (str,"set 7,c"); return (opcode_address + 2);
        case 0xfa: sprintf (str,"set 7,d"); return (opcode_address + 2);
        case 0xfb: sprintf (str,"set 7,e"); return (opcode_address + 2);
        case 0xfc: sprintf (str,"set 7,h"); return (opcode_address + 2);
        case 0xfd: sprintf (str,"set 7,l"); return (opcode_address + 2);
        case 0xfe: sprintf (str,"set 7,(hl)"); return (opcode_address + 2);
        case 0xff: sprintf (str,"set 7,a"); return (opcode_address + 2);
        default: sprintf (str," "); return (opcode_address + 2);
      }
    }
    case 0xcc: sprintf (str,"call z,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xcd: sprintf (str,"call %02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xce: sprintf (str,"adc a,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xcf: sprintf (str,"rst 08h"); return (opcode_address + 1);
    case 0xd0: sprintf (str,"ret nc"); return (opcode_address + 1);
    case 0xd1: sprintf (str,"pop de"); return (opcode_address + 1);
    case 0xd2: sprintf (str,"jp nc,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xd3: sprintf (str,"out (%02x),a", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xd4: sprintf (str,"call nc,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xd5: sprintf (str,"push de"); return (opcode_address + 1);
    case 0xd6: sprintf (str,"sub %02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xd7: sprintf (str,"rst 10h"); return (opcode_address + 1);
    case 0xd8: sprintf (str,"ret c"); return (opcode_address + 1);
    case 0xd9: sprintf (str,"exx"); return (opcode_address + 1);
    case 0xda: sprintf (str,"jp c,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xdb: sprintf (str,"in a,(%02x)", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xdc: sprintf (str,"call c,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xdd: { // IX instructions
      switch (Read_byte (opcode_address+1)) { 
        case 0x09: sprintf (str,"add ix,bc"); return (opcode_address + 2);
        case 0x19: sprintf (str,"add ix,de"); return (opcode_address + 2);
        case 0x21: sprintf (str,"ld ix,%02x%02x", Read_byte (opcode_address+4), Read_byte (opcode_address+3)); return (opcode_address + 4);
        case 0x22: sprintf (str,"ld (%02x%02x),ix", Read_byte (opcode_address+4), Read_byte (opcode_address+3)); return (opcode_address + 4);
        case 0x29: sprintf (str,"add ix,ix"); return (opcode_address + 2);
        case 0x2a: sprintf (str,"add ix,(%02x%02x)", Read_byte (opcode_address+4), Read_byte (opcode_address+3)); return (opcode_address + 4);
        case 0x2b: sprintf (str,"dec ix"); return (opcode_address + 2);
        case 0x34: sprintf (str,"inc (ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x35: sprintf (str,"dec (ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x36: sprintf (str,"ld (ix+%02x),%02x", Read_byte (opcode_address+3), Read_byte (opcode_address+4)); return (opcode_address + 4);
        case 0x39: sprintf (str,"add ix,sp"); return (opcode_address + 2);
        case 0x46: sprintf (str,"ld b,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x4e: sprintf (str,"ld c,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x56: sprintf (str,"ld d,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x5e: sprintf (str,"ld e,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x66: sprintf (str,"ld l,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x6e: sprintf (str,"ld h,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x70: sprintf (str,"ld (ix+%02x),b", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x71: sprintf (str,"ld (ix+%02x),c", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x72: sprintf (str,"ld (ix+%02x),d", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x73: sprintf (str,"ld (ix+%02x),e", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x74: sprintf (str,"ld (ix+%02x),h", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x75: sprintf (str,"ld (ix+%02x),l", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x77: sprintf (str,"ld (ix+%02x),a", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x7e: sprintf (str,"ld a,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x86: sprintf (str,"add a,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x8e: sprintf (str,"adc a,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x96: sprintf (str,"sub a,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x9e: sprintf (str,"sbc a,(ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xa6: sprintf (str,"and (ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xae: sprintf (str,"xor (ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xb6: sprintf (str,"or (ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xbe: sprintf (str,"cp (ix+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xcb: {  // IX bit instructions
          switch (Read_byte (opcode_address+3)) { 
            case 0x06: sprintf (str,"rlc (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x0e: sprintf (str,"rrc (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x16: sprintf (str,"rl (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x1e: sprintf (str,"rr (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x26: sprintf (str,"sla (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x2e: sprintf (str,"sra (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x3e: sprintf (str,"srl (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x46: sprintf (str,"bit 0 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x4e: sprintf (str,"bit 1 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x56: sprintf (str,"bit 2 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x5e: sprintf (str,"bit 3 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x66: sprintf (str,"bit 4 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x6e: sprintf (str,"bit 5 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x76: sprintf (str,"bit 6 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x7e: sprintf (str,"bit 7 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x86: sprintf (str,"res 0 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x8e: sprintf (str,"res 1 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x96: sprintf (str,"res 2 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x9e: sprintf (str,"res 3 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xa6: sprintf (str,"res 4 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xae: sprintf (str,"res 5 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xb6: sprintf (str,"res 6 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xbe: sprintf (str,"res 7 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xc6: sprintf (str,"set 0 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xce: sprintf (str,"set 1 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xd6: sprintf (str,"set 2 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xde: sprintf (str,"set 3 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xe6: sprintf (str,"set 4 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xee: sprintf (str,"set 5 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xf6: sprintf (str,"set 6 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xfe: sprintf (str,"set 7 (ix+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
          }
        }
        case 0xe1: sprintf (str,"pop ix"); return (opcode_address + 2);
        case 0xe3: sprintf (str,"ex (sp),ix"); return (opcode_address + 2);
        case 0xe9: sprintf (str,"jp (ix)"); return (opcode_address + 2);
        case 0xf9: sprintf (str,"ld sp,ix"); return (opcode_address + 2);
        default: sprintf (str," "); return (opcode_address + 2);
      }
    }
    case 0xde: sprintf (str,"sbc a,%02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xdf: sprintf (str,"rst 18h"); return (opcode_address + 1);
    case 0xe0: sprintf (str,"ret po"); return (opcode_address + 1);
    case 0xe1: sprintf (str,"pop hl"); return (opcode_address + 1);
    case 0xe2: sprintf (str,"jp po,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xe3: sprintf (str,"ex (sp),hl"); return (opcode_address + 1);
    case 0xe4: sprintf (str,"call po,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xe5: sprintf (str,"push hl"); return (opcode_address + 1);
    case 0xe6: sprintf (str,"and %02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xe7: sprintf (str,"rst 20h"); return (opcode_address + 1);
    case 0xe8: sprintf (str,"ret pe"); return (opcode_address + 1);
    case 0xe9: sprintf (str,"jp (hl)"); return (opcode_address + 1);
    case 0xea: sprintf (str,"jp pe,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xeb: sprintf (str,"ex de,hl"); return (opcode_address + 1);
    case 0xec: sprintf (str,"call pe,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xed: { // Misc instructions
      switch (Read_byte (opcode_address+1)) { 
        case 0x40: sprintf (str,"in b,(c)"); return (opcode_address + 2);
        case 0x41: sprintf (str,"out (c),b"); return (opcode_address + 2);
        case 0x42: sprintf (str,"sbc hl,bc"); return (opcode_address + 2);
        case 0x43: sprintf (str,"ld (%02x%02x),bc", Read_byte (opcode_address+3), Read_byte (opcode_address+2)); return (opcode_address + 4);
        case 0x44: sprintf (str,"neg"); return (opcode_address + 2);
        case 0x45: sprintf (str,"retn"); return (opcode_address + 2);
        case 0x46: sprintf (str,"im 0"); return (opcode_address + 2);
        case 0x47: sprintf (str,"ld i,a"); return (opcode_address + 2);
        case 0x48: sprintf (str,"in c,(c)"); return (opcode_address + 2);
        case 0x49: sprintf (str,"out (c),c"); return (opcode_address + 2);
        case 0x4a: sprintf (str,"adc hl,bc"); return (opcode_address + 2);
        case 0x4b: sprintf (str,"ld bc,(%02x%02x)", Read_byte (opcode_address+3), Read_byte (opcode_address+2)); return (opcode_address + 4);
        case 0x4d: sprintf (str,"reti"); return (opcode_address + 2);
        case 0x4f: sprintf (str,"ld r,a"); return (opcode_address + 2);
        case 0x50: sprintf (str,"in d,(c)"); return (opcode_address + 2);
        case 0x51: sprintf (str,"out (c),d"); return (opcode_address + 2);
        case 0x52: sprintf (str,"sbc hl,de"); return (opcode_address + 2);
        case 0x53: sprintf (str,"ld (%02x%02x),de", Read_byte (opcode_address+3), Read_byte (opcode_address+2)); return (opcode_address + 4);
        case 0x56: sprintf (str,"im 1"); return (opcode_address + 2);
        case 0x57: sprintf (str,"ld a,i"); return (opcode_address + 2);
        case 0x58: sprintf (str,"in e,(c)"); return (opcode_address + 2);
        case 0x59: sprintf (str,"out (c),e"); return (opcode_address + 2);
        case 0x5a: sprintf (str,"adc hl,de"); return (opcode_address + 2);
        case 0x5b: sprintf (str,"ld de,(%02x%02x)", Read_byte (opcode_address+3), Read_byte (opcode_address+2)); return (opcode_address + 4);
        case 0x5e: sprintf (str,"im 2"); return (opcode_address + 2);
        case 0x5f: sprintf (str,"ld a,r"); return (opcode_address + 2);
        case 0x60: sprintf (str,"in h,(c)"); return (opcode_address + 2);
        case 0x61: sprintf (str,"out (c),h"); return (opcode_address + 2);
        case 0x62: sprintf (str,"sbc hl,hl"); return (opcode_address + 2);
        case 0x67: sprintf (str,"rrd"); return (opcode_address + 2);
        case 0x68: sprintf (str,"in l,(c)"); return (opcode_address + 2);
        case 0x69: sprintf (str,"out (c),l"); return (opcode_address + 2);
        case 0x6a: sprintf (str,"adc hl,hl"); return (opcode_address + 2);
        case 0x6f: sprintf (str,"rld"); return (opcode_address + 2);
        case 0x72: sprintf (str,"sbc hl,sp"); return (opcode_address + 2);
        case 0x73: sprintf (str,"ld (%02x%02x),sp", Read_byte (opcode_address+3), Read_byte (opcode_address+2)); return (opcode_address + 4);
        case 0x78: sprintf (str,"in a,(c)"); return (opcode_address + 2);
        case 0x79: sprintf (str,"out (c),a"); return (opcode_address + 2);
        case 0x7a: sprintf (str,"adc hl,sp"); return (opcode_address + 2);
        case 0x7b: sprintf (str,"ld sp,(%02x%02x)", Read_byte (opcode_address+3), Read_byte (opcode_address+2)); return (opcode_address + 4);
        case 0xa0: sprintf (str,"ldi"); return (opcode_address + 2);
        case 0xa1: sprintf (str,"cpi"); return (opcode_address + 2);
        case 0xa2: sprintf (str,"ini"); return (opcode_address + 2);
        case 0xa3: sprintf (str,"outi"); return (opcode_address + 2);
        case 0xa8: sprintf (str,"ldd"); return (opcode_address + 2);
        case 0xa9: sprintf (str,"cpd"); return (opcode_address + 2);
        case 0xaa: sprintf (str,"ind"); return (opcode_address + 2);
        case 0xab: sprintf (str,"outd"); return (opcode_address + 2);
        case 0xb0: sprintf (str,"ldir"); return (opcode_address + 2);
        case 0xb1: sprintf (str,"cpir"); return (opcode_address + 2);
        case 0xb2: sprintf (str,"inir"); return (opcode_address + 2);
        case 0xb3: sprintf (str,"otir"); return (opcode_address + 2);
        case 0xb8: sprintf (str,"lddr"); return (opcode_address + 2);
        case 0xb9: sprintf (str,"cpdr"); return (opcode_address + 2);
        case 0xba: sprintf (str,"indr"); return (opcode_address + 2);
        case 0xbb: sprintf (str,"otdr"); return (opcode_address + 2);
        default: sprintf (str," "); return (opcode_address + 2);
      }
    }
    case 0xee: sprintf (str,"xor %02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xef: sprintf (str,"rst 28h"); return (opcode_address + 1);
    case 0xf0: sprintf (str,"ret p"); return (opcode_address + 1);
    case 0xf1: sprintf (str,"pop af"); return (opcode_address + 1);
    case 0xf2: sprintf (str,"jp p,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xf3: sprintf (str,"di"); return (opcode_address + 1);
    case 0xf4: sprintf (str,"call p,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xf5: sprintf (str,"push af"); return (opcode_address + 1);
    case 0xf6: sprintf (str,"or %02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xf7: sprintf (str,"rst 30h"); return (opcode_address + 1);
    case 0xf8: sprintf (str,"ret m"); return (opcode_address + 1);
    case 0xf9: sprintf (str,"ld sp,hl"); return (opcode_address + 1);
    case 0xfa: sprintf (str,"jp m,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xfb: sprintf (str,"ei"); return (opcode_address + 1);
    case 0xfc: sprintf (str,"call m,%02x%02x", Read_byte (opcode_address+2), Read_byte (opcode_address+1)); return (opcode_address + 3);
    case 0xfd: { // IY instructions
      switch (Read_byte (opcode_address+1)) { 
        case 0x09: sprintf (str,"add iy,bc"); return (opcode_address + 2);
        case 0x19: sprintf (str,"add iy,de"); return (opcode_address + 2);
        case 0x21: sprintf (str,"ld iy,%02x%02x", Read_byte (opcode_address+4), Read_byte (opcode_address+3)); return (opcode_address + 4);
        case 0x22: sprintf (str,"ld (%02x%02x),iy", Read_byte (opcode_address+4), Read_byte (opcode_address+3)); return (opcode_address + 4);
        case 0x29: sprintf (str,"add iy,iy"); return (opcode_address + 2);
        case 0x2a: sprintf (str,"add iy,(%02x%02x)", Read_byte (opcode_address+4), Read_byte (opcode_address+3)); return (opcode_address + 4);
        case 0x2b: sprintf (str,"dec iy"); return (opcode_address + 2);
        case 0x34: sprintf (str,"inc (iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x35: sprintf (str,"dec (iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x36: sprintf (str,"ld (iy+%02x),%02x", Read_byte (opcode_address+3), Read_byte (opcode_address+4)); return (opcode_address + 4);
        case 0x39: sprintf (str,"add iy,sp"); return (opcode_address + 2);
        case 0x46: sprintf (str,"ld b,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x4e: sprintf (str,"ld c,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x56: sprintf (str,"ld d,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x5e: sprintf (str,"ld e,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x66: sprintf (str,"ld l,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x6e: sprintf (str,"ld h,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x70: sprintf (str,"ld (iy+%02x),b", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x71: sprintf (str,"ld (iy+%02x),c", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x72: sprintf (str,"ld (iy+%02x),d", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x73: sprintf (str,"ld (iy+%02x),e", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x74: sprintf (str,"ld (iy+%02x),h", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x75: sprintf (str,"ld (iy+%02x),l", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x77: sprintf (str,"ld (iy+%02x),a", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x7e: sprintf (str,"ld a,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x86: sprintf (str,"add a,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x8e: sprintf (str,"adc a,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x96: sprintf (str,"sub a,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0x9e: sprintf (str,"sbc a,(iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xa6: sprintf (str,"and (iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xae: sprintf (str,"xor (iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xb6: sprintf (str,"or (iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xbe: sprintf (str,"cp (iy+%02x)", Read_byte (opcode_address+3)); return (opcode_address + 3);
        case 0xcb: {  // IY bit instructions
          switch (Read_byte (opcode_address+3)) { 
            case 0x06: sprintf (str,"rlc (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x0e: sprintf (str,"rrc (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x16: sprintf (str,"rl (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x1e: sprintf (str,"rr (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x26: sprintf (str,"sla (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x2e: sprintf (str,"sra (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x3e: sprintf (str,"srl (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x46: sprintf (str,"bit 0 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x4e: sprintf (str,"bit 1 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x56: sprintf (str,"bit 2 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x5e: sprintf (str,"bit 3 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x66: sprintf (str,"bit 4 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x6e: sprintf (str,"bit 5 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x76: sprintf (str,"bit 6 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x7e: sprintf (str,"bit 7 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x86: sprintf (str,"res 0 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x8e: sprintf (str,"res 1 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x96: sprintf (str,"res 2 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0x9e: sprintf (str,"res 3 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xa6: sprintf (str,"res 4 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xae: sprintf (str,"res 5 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xb6: sprintf (str,"res 6 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xbe: sprintf (str,"res 7 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xc6: sprintf (str,"set 0 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xce: sprintf (str,"set 1 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xd6: sprintf (str,"set 2 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xde: sprintf (str,"set 3 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xe6: sprintf (str,"set 4 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xee: sprintf (str,"set 5 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xf6: sprintf (str,"set 6 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
            case 0xfe: sprintf (str,"set 7 (iy+%02x)", Read_byte (opcode_address+2)); return (opcode_address + 4);
          }
        }
        case 0xe1: sprintf (str,"pop iy"); return (opcode_address + 2);
        case 0xe3: sprintf (str,"ex (sp),iy"); return (opcode_address + 2);
        case 0xe9: sprintf (str,"jp (iy)"); return (opcode_address + 2);
        case 0xf9: sprintf (str,"ld sp,iy"); return (opcode_address + 2);
        default: sprintf (str," "); return (opcode_address + 2);
      }
    }
    case 0xfe: sprintf (str,"cp %02x", Read_byte (opcode_address+1)); return (opcode_address + 2);
    case 0xff: sprintf (str,"rst 38h"); return (opcode_address + 1);
  }
  return opcode_address;
}

// -------------------------------------------------
//
// Dump registers to console
//
// -------------------------------------------------
void dump_registers (void)
{
  if (flag_s==1) Serial.print("S"); else Serial.print(".");
  if (flag_z==1) Serial.print("Z"); else Serial.print(".");
  if (flag_h==1) Serial.print("H"); else Serial.print(".");
  if (flag_p==1) Serial.print("P"); else Serial.print(".");
  if (flag_n==1) Serial.print("N"); else Serial.print(".");
  if (flag_c==1) Serial.print("C"); else Serial.print(".");
  sprintf (strBuf, "  A : %02X  BC : %02X%02X  DE : %02X%02X  HL : %02X%02X  SP: %04X  PC: %04X  ", register_a, register_b, register_c, register_d, register_e, register_h, register_l, register_sp, register_pc);
  Serial.print(strBuf);
  disassemble (strBuf, register_pc);
  Serial.println (strBuf);
  if (flag_s2==1) Serial.print("S"); else Serial.print(".");
  if (flag_z2==1) Serial.print("Z"); else Serial.print(".");
  if (flag_h2==1) Serial.print("H"); else Serial.print(".");
  if (flag_p2==1) Serial.print("P"); else Serial.print(".");
  if (flag_n2==1) Serial.print("N"); else Serial.print(".");
  if (flag_c2==1) Serial.print("C"); else Serial.print(".");
  sprintf (strBuf, "  A': %02X  BC': %02X%02X  DE': %02X%02X  HL': %02X%02X  IX: %02X%02X  IY: %02X%02X", register_a2, register_b2, register_c2, register_d2, register_e2, register_h2, register_l2, register_ixh, register_ixl, register_iyh, register_iyl);
  Serial.println (strBuf);
}

// -------------------------------------------------
//
// Read Intel hex format from console
//
// -------------------------------------------------
void hex_read (int offset)
{
  static char input_line [LINE_LENGTH];
  char temp [LINE_LENGTH];
  unsigned int input_pos = 0, i;
  short unsigned int address;
  unsigned char record_length, record_type, inByte, j;
  unsigned char record_data [256];
  unsigned char checksum;

  while (1) {
    if (Serial.available() > 0 ) {
      inByte = Serial.read();
      switch (inByte) {
        case '\n': // end of line
          input_line [input_pos] = 0;  // null terminator
          for (input_pos = 0; input_line[input_pos]!=':'&&input_line[input_pos]!=0; input_pos++); // discard stuff before :
          if (input_line[input_pos]==':') {
            input_pos++;
            for (i=0;i<2;i++) temp[i] = input_line[input_pos++];
            temp[2] = 0;
            sscanf (temp, "%hhx", &record_length);
            for (i=0;i<4;i++) temp[i] = input_line[input_pos++];
            temp[4] = 0;
            sscanf (temp, "%hx", &address);
            for (i=0;i<2;i++) temp[i] = input_line[input_pos++];
            temp[2] = 0;
            sscanf (temp, "%hhx", &record_type);
            if (record_type == 0) { // data record
              checksum = 0;
              for (j=0;j<record_length+1;j++) { // include checksum byte in record data read
                for (i=0;i<2;i++) temp[i] = input_line[input_pos++];
                temp[2] = 0;
                sscanf (temp, "%hhx", &record_data[j]);
                checksum += record_data[j];
              }
              if ((checksum & 0xff) == 0) { // checksum byte = 0 for successful read
              
              }
            }
          }
          input_pos = 0;
          break;
        case '\r': // discard carriage return
          break;
        default: // add char to buffer
          if (input_pos < (LINE_LENGTH -1)) input_line [input_pos++] = inByte;
          break;
      }
    } 
  }


  //Serial.print (inByte); // echo input to terminal
  switch (inByte)
    {
    case '\n': // end of line
      input_line [input_pos] = 0;  // null terminator
      process_command (input_line);
      input_pos = 0;
      break;
    case '\r': // discard carriage return
      break;
    default: // add char to buffer
      if (input_pos < (LINE_LENGTH -1)) input_line [input_pos++] = inByte;
      break;
    }
  return;



}

// -------------------------------------------------
//
// Process serial command
//
// -------------------------------------------------
void process_command(const char* instring)
{
  char* token;
  char* index;
  int temp;
  int temp16;
  int origin_address;
  int end_address;
  int byte_to_write;
  int dest_address;
  int offset;
  uint8_t checksum;
  int i;
  int j;

  Serial.println (instring); 
  Serial.println ();
  token = strtok ((char *) instring, " ,");
  index = token;
  while (*index) {
    *index = toupper ((unsigned char)*index);
    index++;
  }
  if (strcmp(token,"Q")==0) { // halt execution and print registers to console
    dump_registers ();
    Serial.println ();
    Serial.print ("OK ====> ");
    run = 0;
  }
  else if (strcmp(token,"G")==0) { // resume execution
    Serial.print("OK ====> ");
    stepenable = 0;
    run = 1;
  }
  else if (strcmp(token,"S")==0) { // single step
    Serial.print("OK ====> ");
    stepbreak = disassemble (strBuf, register_pc);
    stepenable = 1;
    run = 1;
  }

  else if (strcmp (token,"MODE")==0) { // set execution mode
    token = strtok (NULL, " , ");
    if (token != NULL) {
      sscanf (token,"%hhx",&mode);  // mode
    }
    Serial.print("OK ====> ");
  }
  else if (strcmp(token,"BP")==0) { // set breakpoint address
    token = strtok (NULL, " , ");
    sscanf (token,"%x",&temp);  // breakpoint number
    token = strtok (NULL, " , ");
    sscanf (token,"%x",&temp16);
    if (temp==1) breakpoint1 = temp16;
    if (temp==2) breakpoint2 = temp16;
    if (temp==3) breakpoint3 = temp16;
    Serial.print("OK ====> ");
  }
  else if (strcmp(token,"BPC")==0) { // set breakpoint count
    token = strtok (NULL, " , ");
    sscanf (token,"%x",&temp);  // breakpoint number
    token = strtok (NULL, " , ");
    sscanf (token,"%x",&temp);
    if (temp==1) bp1_count = temp;
    if (temp==2) bp2_count = temp;
    if (temp==3) bp3_count = temp;
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"EBP")==0) { // enable breakpoint
    token = strtok (NULL, " , ");
    if (token != NULL) {
      sscanf (token,"%x",&temp);  // breakpoint number
      if (temp==1) bp1_enable = 1;
      if (temp==2) bp2_enable = 1;
      if (temp==3) bp3_enable = 1;
    }
    else {
      bp1_enable = 1;
      bp2_enable = 1;
      bp3_enable = 1;
    }
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"DBP")==0) { // disable breakpoint
    token = strtok (NULL, " , ");
    if (token != NULL) {
      sscanf (token,"%x",&temp);  // breakpoint number
      if (temp==1) bp1_enable = 0;
      if (temp==2) bp2_enable = 0;
      if (temp==3) bp3_enable = 0;
    }
    else {
      bp1_enable = 0;
      bp2_enable = 0;
      bp3_enable = 0;
    }
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"ST")==0) { // print status
    sprintf (strBuf, "---> %04X %02X ", breakpoint1, bp1_count);
    Serial.print (strBuf);
    if (bp1_enable==1) Serial.println("E"); else Serial.println("D");
    sprintf (strBuf, "---> %04X %02X ", breakpoint2, bp2_count);
    Serial.print (strBuf);
    if (bp2_enable==1) Serial.println("E"); else Serial.println("D");
    sprintf (strBuf, "---> %04X %02X ", breakpoint3, bp3_count);
    Serial.print (strBuf);
    if (bp3_enable==1) Serial.println("E"); else Serial.println("D");
    if (run==1) Serial.println("RUNNING");
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"D")==0) { // Display memory contents
    token = strtok (NULL, " , ");
    if (token != NULL) sscanf (token,"%hx",&display_address); // start address
    token = strtok (NULL, " , ");
    if (token != NULL) sscanf (token,"%x",&temp16); // end address
    else temp16 = display_address + 127;
    for (j=0;j<((temp16-display_address)/16+1);j++) {
      sprintf (strBuf,"%04X      ",display_address+j*16);
      Serial.print (strBuf);
      for (i=0;i<16;i++) {
        sprintf (strBuf,"%02X ",Read_byte (display_address+i+16*j));
        Serial.print (strBuf);
      }
      Serial.print ("  ");
      for (i=0;i<16;i++) {
        temp = Read_byte (display_address+i+16*j);
        if (temp >= 32 && temp <= 127) Serial.write (temp); else Serial.print(".");
      }
      Serial.println();
    }
    display_address+=128;
    Serial.println();
    Serial.print("OK ====> ");
  }
   else if (strcmp (token,"L")==0) { // Display listing of memory contents
    token = strtok (NULL, " , ");
    if (token != NULL) sscanf (token,"%hx",&display_address);
    token = strtok (NULL, " ,");
    if (token == NULL) { // no end address entered - display 19 instructions
      for (j=0;j<19;j++) {
        sprintf (strBuf,"%04X      ",display_address);
        Serial.print (strBuf);
        for (i=0;i<4;i++) {
          if ((display_address+i) < disassemble (strBuf, display_address)) sprintf (strBuf,"%02X ", Read_byte (display_address+i));
          else sprintf (strBuf,"   ");
          Serial.print (strBuf);
        }
        Serial.print ("  ");
        display_address = disassemble (strBuf, display_address);
        Serial.println(strBuf);
      }
    }
    else {
      sscanf (token,"%x",&temp16); // end address
      while (display_address <= (uint16_t) temp16) {
        sprintf (strBuf,"%04X      ",display_address);
        Serial.print (strBuf);
        for (i=0;i<4;i++) {
          if ((display_address+i) < disassemble (strBuf, display_address)) sprintf (strBuf,"%02X ", Read_byte (display_address+i));
          else sprintf (strBuf,"   ");
          Serial.print (strBuf);
        }
        Serial.print ("  ");
        display_address = disassemble (strBuf, display_address);
        Serial.println(strBuf);
      }      
    }
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"E")==0) { // Display single byte from memory
    token = strtok (NULL, " , ");
    if (token != NULL) {
      sscanf (token,"%hx",&display_address);
      sprintf (strBuf,"%02X",Read_byte (display_address));
      Serial.println (strBuf);
    }
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"F")==0) { // fill start,end,byte
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&origin_address);
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&end_address);
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&byte_to_write);
    for (i=origin_address;i<end_address+1;i++) Write_byte(i, byte_to_write);
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"I")==0) { // input from port
    token = strtok (NULL, " ,");
    if (token != NULL) {
      sscanf (token,"%x",&dest_address);
      sprintf (strBuf,"%02X",BIU_Bus_Cycle(IO_READ_BYTE, dest_address, 0x00));
      Serial.println (strBuf);
    }
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"O")==0) { // output to port
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&dest_address);
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&byte_to_write);
    BIU_Bus_Cycle(IO_WRITE_BYTE, dest_address, byte_to_write);
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"M")==0) { // move start,end,dest
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&origin_address);
    token = strtok (NULL, " , ");
    if (token != NULL) sscanf (token,"%x",&end_address);
    token = strtok (NULL, " , ");
    if (token != NULL) sscanf (token,"%x",&dest_address);
    for (i=0;i<(end_address-origin_address+1);i++) {
      temp = Read_byte (i+origin_address);
      Write_byte(i+dest_address, temp);
    }
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"W")==0) { // write start,end,offset - writes intel hex format to console
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&origin_address); else origin_address = 0;
    token = strtok (NULL, " , ");
    if (token != NULL) sscanf (token,"%x",&end_address); else end_address = 0x1f;
    token = strtok (NULL, " , ");
    if (token != NULL) sscanf (token,"%x",&offset); else offset = 0;
    for (j=0;j<((end_address-origin_address)/32+1);j++) {
      sprintf (strBuf,":20%04X00",origin_address+j*32-offset);
      Serial.print (strBuf);
      checksum = 0;
      for (i=0;i<32;i++) {
        sprintf (strBuf,"%02X",Read_byte (origin_address+i+32*j));
        Serial.print (strBuf);
        checksum += Read_byte (origin_address+i+16*j);
      }
      sprintf (strBuf,"%02X",((~(checksum))+1) & 0xff);
      Serial.println(strBuf);
    }
    Serial.println (":00000001FF"); // EOF marker
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"R")==0) { // read [offset] - reads intel hex format from console
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&offset); else offset = 0;
    hex_read (offset);
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"CD")==0) { // clock divide [divisor] - wait for a given number of cycles between instructions 
    token = strtok (NULL, " ,");
    if (token != NULL) sscanf (token,"%x",&slow_counter_set); else slow_counter_set = 0;
    sprintf (strBuf,"%04X",slow_counter_set);
    Serial.println (strBuf);
    Serial.println();
    Serial.print("OK ====> ");
  }
  else if (strcmp (token,"X")==0) { // Display or edit registers
    token = strtok (NULL, " ");
    if (token != NULL) {
      index = token;
      while (*index) {
        *index = toupper ((unsigned char)*index);
        index++;
      }
      if (strcmp(token,"A")==0) { // Modify A register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_a);
      }
      if (strcmp(token,"B")==0) { // Modify B register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_b);
      }
      if (strcmp(token,"C")==0) { // Modify C register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_c);
      }
      if (strcmp(token,"BC")==0) { // Modify BC register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%x",&temp16);
        register_b = temp16 / 256;
        register_c = temp16 % 256;
      }
      if (strcmp(token,"D")==0) { // Modify D register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_d);
      }
      if (strcmp(token,"E")==0) { // Modify E register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_e);
      }
      if (strcmp(token,"DE")==0) { // Modify DE register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%x",&temp16);
        register_d = temp16 / 256;
        register_e = temp16 % 256;
      }
      if (strcmp(token,"H")==0) { // Modify H register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_h);
      }
      if (strcmp(token,"L")==0) { // Modify L register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_l);
      }
      if (strcmp(token,"HL")==0) { // Modify HL register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%x",&temp16);
        register_h = temp16 / 256;
        register_l = temp16 % 256;
      }
      if (strcmp(token,"SP")==0) { // Modify SP register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hx",&register_sp);
      }
      if (strcmp(token,"PC")==0) { // Modify PC register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hx",&register_pc);
      }
      if (strcmp(token,"A'")==0) { // Modify A' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_a2);
      }
      if (strcmp(token,"B'")==0) { // Modify B' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_b2);
      }
      if (strcmp(token,"C'")==0) { // Modify C' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_c2);
      }
      if (strcmp(token,"BC'")==0) { // Modify BC' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%x",&temp16);
        register_b2 = temp16 / 256;
        register_c2 = temp16 % 256;
      }
      if (strcmp(token,"D'")==0) { // Modify D' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_d2);
      }
      if (strcmp(token,"E'")==0) { // Modify E' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_e2);
      }
      if (strcmp(token,"DE'")==0) { // Modify DE register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%x",&temp16);
        register_d2 = temp16 / 256;
        register_e2 = temp16 % 256;
      }
      if (strcmp(token,"H'")==0) { // Modify H' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_h2);
      }
      if (strcmp(token,"L'")==0) { // Modify L' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%hhx",&register_l2);
      }
      if (strcmp(token,"HL'")==0) { // Modify HL' register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%x",&temp16);
        register_h2 = temp16 / 256;
        register_l2 = temp16 % 256;
      }
      if (strcmp(token,"IX")==0) { // Modify IX register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%x",&temp16);
        register_ixh = temp16 / 256;
        register_ixl = temp16 % 256;
      }
      if (strcmp(token,"IY")==0) { // Modify IY register
        token = strtok (NULL, " , ");
        if (token != NULL) sscanf (token,"%x",&temp16);
        register_iyh = temp16 / 256;
        register_iyl = temp16 % 256;
      }
    }
    dump_registers ();
    Serial.println ();
    Serial.print ("OK ====> ");
  }
  return;
}

// -------------------------------------------------
//
// Collect serial input line
//
// -------------------------------------------------
 void process_serial_byte(const byte inByte)
  {
  static char input_line [LINE_LENGTH];
  static unsigned int input_pos = 0;

  //Serial.print (inByte); // echo input to terminal
  switch (inByte)
    {
    case '\n': // end of line
      input_line [input_pos] = 0;  // null terminator
      process_command (input_line);
      input_pos = 0;
      break;
    case '\r': // discard carriage return
      break;
    default: // add char to buffer
      if (input_pos < (LINE_LENGTH -1)) input_line [input_pos++] = inByte;
      break;
    }
  return;
  }

// -------------------------------------------------
//
// Main loop
//
// -------------------------------------------------
 void loop() {
  uint16_t local_counter = 0;


  // Give Teensy 4.1 a moment
  delay (1000);
  wait_for_CLK_rising_edge();
  wait_for_CLK_rising_edge();
  wait_for_CLK_rising_edge();

  reset_sequence();

  // Copy mainboard ROM into internal RAM for accelleration
  //
  for (local_counter=0x8000; local_counter<=0xefff; local_counter++) {
      internal_RAM[local_counter] = BIU_Bus_Cycle(MEM_READ_BYTE , local_counter, 0x00 );
  }
  
  local_counter=0;
  
  Serial.println ();
  Serial.print ("OK ====> ");
  
  while (1) {
                
      if (direct_reset==0) reset_sequence();

      local_counter++;
      if (local_counter==8000) {
        local_counter = 0;
        if (Serial.available() > 0 ) process_serial_byte(Serial.read());
      }
      
      
      // Poll for interrupts between instructions, 
      // but not when immediately after instruction enabling interrupts,
      // or if the last opcode was a prefix.
      //
      if (last_instruction_set_a_prefix==0 && pause_interrupts==0)  {
        if      (nmi_latched==1)                         { NMI_Handler();  }           
        else if (direct_intr==0 && register_iff1==1)     { INTR_Handler(); }
      }
      pause_interrupts=0;                // debounce
      last_instruction_set_a_prefix=0;


      // Process new instruction
      //
      if (register_pc == breakpoint1 && bp1_enable == 1 && run == 1) {
        if (bp1_count == 0) {
          Serial.println ("Breakpoint encountered - halting execution.");
          Serial.println ();
          dump_registers ();
          Serial.println ();
          Serial.print ("OK ====> ");
          stepbreak = disassemble (strBuf, stepbreak); 
          run = 0;
        }
        else bp1_count--;
      }
      if (register_pc == breakpoint2 && bp2_enable == 1 && run == 1) {
        if (bp2_count == 0) {
          Serial.println ("Breakpoint encountered - halting execution.");
          Serial.println ();
          dump_registers ();
          Serial.println ();
          Serial.print ("OK ====> ");
          stepbreak = disassemble (strBuf, stepbreak); 
          run = 0;
        }
        else bp2_count--;
      }
      if (register_pc == breakpoint3 && bp3_enable == 1 && run == 1) {
        if (bp3_count == 0) {
          Serial.println ("Breakpoint encountered - halting execution.");
          Serial.println ();
          dump_registers ();
          Serial.println ();
          Serial.print ("OK ====> ");
          stepbreak = disassemble (strBuf, stepbreak); 
          run = 0;
        }
        else bp3_count--;
      }

      if (register_pc == stepbreak && stepenable == 1 && run == 1) {
        Serial.println ("Step encountered - halting execution.");
        Serial.println ();
        dump_registers ();
        Serial.println ();
        Serial.print ("OK ====> ");
        run = 0;
        stepbreak = disassemble (strBuf, stepbreak); 
      }

      if (run==1) {
        //if (slow_counter-- == 0) {
          execute_instruction();
          //if (slow_counter_set >= 10000) dump_registers ();
          //slow_counter = slow_counter_set;
        //}
      }

//      if (slow_counter_set != 0) {
//        delayMicroseconds (slow_counter_set);
//        dump_registers ();
//        Serial.println ();
//      }

      if (last_instruction_set_a_prefix==0) {
          prefix_dd = 0;
          prefix_fd = 0;
          prefix_cb = 0;
      }

      // Wait for cycle counter to reach zero before processing interrupts or the next instruction
      //
      if (mode<3) while (clock_counter>0)  { 
        wait_for_CLK_falling_edge();
      }          
  }      
} 
